"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.2
// source: api/api.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupUserList = exports.GroupList = exports.Group = exports.UpdateUsersRequest = exports.GetUsersRequest = exports.FriendList = exports.Friend = exports.Event_PropertiesEntry = exports.Event = exports.DeleteNotificationsRequest = exports.DeleteGroupRequest = exports.DeleteFriendsRequest = exports.CreateGroupRequest = exports.ChannelMessageList = exports.MessageDeleted = exports.MessageRef = exports.MessageAttachment = exports.MessageReaction = exports.NotificationInfo = exports.MessageMention = exports.ChannelMessage = exports.BlockFriendsRequest = exports.BanGroupUsersRequest = exports.SessionLogoutRequest = exports.SessionRefreshRequest_VarsEntry = exports.SessionRefreshRequest = exports.AddGroupUsersRequest = exports.AddFriendsRequest = exports.AccountRefresh_VarsEntry = exports.AccountRefresh = exports.Account = exports.userGroupList_UserGroup_StateToJSON = exports.userGroupList_UserGroup_StateFromJSON = exports.UserGroupList_UserGroup_State = exports.groupUserList_GroupUser_StateToJSON = exports.groupUserList_GroupUser_StateFromJSON = exports.GroupUserList_GroupUser_State = exports.friend_StateToJSON = exports.friend_StateFromJSON = exports.Friend_State = exports.operatorToJSON = exports.operatorFromJSON = exports.Operator = exports.storeEnvironmentToJSON = exports.storeEnvironmentFromJSON = exports.StoreEnvironment = exports.storeProviderToJSON = exports.storeProviderFromJSON = exports.StoreProvider = exports.protobufPackage = void 0;
exports.ClanProfile = exports.LinkInviteUser = exports.JoinClanChannelRequest = exports.InviteUserRes = exports.InviteUserRequest = exports.LinkInviteUserRequest = exports.ClanDescList = exports.ListClanDescRequest = exports.DeleteClanDescRequest = exports.UpdateClanDescRequest = exports.CreateClanDescRequest = exports.ClanDesc = exports.ClanDescProfileRequest = exports.UpdateClanDescProfileRequest = exports.ClanDescProfile = exports.Users = exports.UserGroupList_UserGroup = exports.UserGroupList = exports.User = exports.UpdateCategoryDescRequest = exports.UpdateGroupRequest = exports.UpdateAccountRequest = exports.Session = exports.Rpc = exports.DemoteGroupUsersRequest = exports.PromoteGroupUsersRequest = exports.NotificationList = exports.EmojiRecentList = exports.EmojiRecent = exports.Notification = exports.ListUserGroupsRequest = exports.ListNotificationsRequest = exports.ListClanUsersRequest = exports.ListChannelAttachmentRequest = exports.ListChannelUsersRequest = exports.ListGroupUsersRequest = exports.ListGroupsRequest = exports.ListFriendsRequest = exports.ListChannelMessagesRequest = exports.RegistFcmDeviceTokenResponse = exports.RegistFcmDeviceTokenRequest = exports.ClanUserList_ClanUser = exports.ClanUserList = exports.ChannelAttachmentList = exports.ChannelAttachment = exports.VoiceChannelUserList = exports.VoiceChannelUser = exports.ChannelUserList_ChannelUser = exports.ChannelUserList = exports.GroupUserList_GroupUser = void 0;
exports.NotificationChannelCategorySetting = exports.NotificationChannelCategorySettingList = exports.HashtagDm = exports.HashtagDmList = exports.HashtagDmListRequest = exports.SetMuteNotificationRequest = exports.PinMessageRequest = exports.SetNotificationRequest = exports.NotificationSettingList = exports.NotificationClan = exports.NotificationChannel = exports.DefaultNotificationCategory = exports.DefaultNotificationClan = exports.NotifiReactMessage = exports.NotificationUserChannel = exports.PinMessagesList = exports.PinMessage = exports.DeletePinMessage = exports.NotificationSetting = exports.Permission = exports.EventManagement = exports.Role = exports.LeaveThreadRequest = exports.RemoveClanUsersRequest = exports.RemoveChannelUsersRequest = exports.AddChannelUsersRequest = exports.ChangeChannelPrivateRequest = exports.UpdateChannelDescRequest = exports.DeleteChannelDescRequest = exports.CreateChannelDescRequest = exports.AddRoleChannelDescRequest = exports.ListChannelDetailRequest = exports.ListChannelDescsRequest = exports.ListThreadRequest = exports.ChannelDescList = exports.ChannelDescription = exports.ChannelMessageHeader = exports.ListCategoryDescsRequest = exports.CategoryDescList = exports.DeleteCategoryDescRequest = exports.CreateCategoryDescRequest = exports.CategoryOrderUpdate = exports.RoleOrderUpdate = exports.UpdateRoleOrderRequest = exports.UpdateCategoryOrderRequest = exports.CategoryDesc = exports.UpdateClanOrderRequest_ClanOrder = exports.UpdateClanOrderRequest = exports.UpdateClanProfileRequest = exports.ClanProfileRequest = void 0;
exports.CheckDuplicateClanNameResponse = exports.CheckDuplicateClanNameRequest = exports.WebhookHandlerRequest = exports.WebhookGenerateResponse = exports.WebhookListResponse = exports.WebhookListRequest = exports.WebhookDeleteRequestById = exports.WebhookUpdateRequestById = exports.WebhookListRequestById = exports.WebhookCreateRequest = exports.Webhook = exports.ClanEmojiUpdateRequest = exports.ClanEmojiDeleteRequest = exports.ClanEmojiGetByClanIdRequest = exports.ClanEmojiCreateRequest = exports.AllUsersAddChannelResponse = exports.AllUsersAddChannelRequest = exports.ClanSticker = exports.StickerListedResponse = exports.EmojiListedResponse = exports.ClanEmoji = exports.RegistrationEmailRequest_VarsEntry = exports.RegistrationEmailRequest = exports.SearchMessageResponse = exports.SearchMessageDocument = exports.FilterParam = exports.SortParam = exports.SearchMessageRequest = exports.UploadAttachment = exports.ListMessageMentionRequest = exports.UploadAttachmentRequest = exports.PermissionUpdate = exports.UpdateRoleChannelRequest = exports.UpdateRoleRequest = exports.DeleteEventRequest = exports.DeleteRoleRequest = exports.UpdateEventRequest = exports.CreateEventRequest = exports.CreateRoleRequest = exports.ListEventsRequest = exports.UserEventRequest = exports.RoleUserList_RoleUser = exports.RoleUserList = exports.ListPermissionOfUsersRequest = exports.ListRoleUsersRequest = exports.ListPermissionsRequest = exports.PermissionList = exports.EventList = exports.RoleList = exports.SetDefaultNotificationRequest = void 0;
exports.ChannelCanvasDetailRequest = exports.ChannelCanvasListResponse = exports.ChannelCanvasItem = exports.ChannelCanvasListRequest = exports.DeleteChannelCanvasRequest = exports.EditChannelCanvasResponse = exports.EditChannelCanvasRequest = exports.MarkAsReadRequest = exports.ChannelSettingListResponse = exports.ChannelSettingItem = exports.ChannelSettingListRequest = exports.PermissionRoleChannelListEventResponse = exports.PermissionRoleChannelListEventRequest = exports.PermissionRoleChannel = exports.UserPermissionInChannelListResponse = exports.UserPermissionInChannelListRequest = exports.RoleListEventResponse = exports.RoleListEventRequest = exports.AllUserClans = exports.ChannelAppResponse = exports.ListChannelAppsResponse = exports.ListChannelAppsRequest = exports.GiveCoffeeEvent = exports.RegisterStreamingChannelResponse = exports.RegisterStreamingChannelRequest = exports.StreamingChannelUserList = exports.StreamingChannelUser = exports.StreamHttpCallbackResponse = exports.StreamHttpCallbackRequest = exports.DeleteCategoryOrderRequest = exports.GetSystemMessage = exports.DeleteSystemMessage = exports.SystemMessageRequest = exports.SystemMessagesList = exports.SystemMessage = exports.DeleteChannelMessagesResponse = exports.DeleteChannelMessagesRequest = exports.AppClan = exports.AppId = exports.UpdateAppRequest = exports.ListAppsRequest = exports.AddAppRequest = exports.AppList = exports.AppDeleteRequest = exports.App = exports.ChangeChannelCategoryRequest = exports.ClanStickerDeleteRequest = exports.ClanStickerUpdateByIdRequest = exports.ClanStickerListByClanIdRequest = exports.ClanStickerAddRequest = void 0;
exports.WalletLedgerListReq = exports.WalletLedgerList = exports.WalletLedger = exports.UpdateOnboardingStepRequest = exports.ListOnboardingStepRequest = exports.ListOnboardingStepResponse = exports.OnboardingSteps = exports.UserStatusUpdate = exports.UserStatus = exports.ClanWebhookHandlerRequest = exports.ClanWebhookHandlerBody = exports.ListClanWebhookResponse = exports.ListClanWebhookRequest = exports.UpdateClanWebhookRequest = exports.ClanWebhookRequest = exports.GenerateClanWebhookResponse = exports.GenerateClanWebhookRequest = exports.ClanWebhook = exports.OnboardingRequest = exports.UpdateOnboardingRequest = exports.CreateOnboardingRequest = exports.OnboardingContent = exports.OnboardingAnswer = exports.OnboardingItem = exports.ListOnboardingResponse = exports.ListOnboardingRequest = exports.WithdrawTokenRequest = exports.TokenSentEvent = exports.ListAuditLogRequest = exports.ListAuditLog = exports.AuditLog = exports.GetKeyServerResp = exports.ChanEncryptionMethod = exports.GetPubKeysResponse_UserPubKey = exports.GetPubKeysResponse = exports.GetPubKeysRequest = exports.PushPubKeyRequest = exports.PubKey = exports.ConfirmLoginRequest = exports.LoginRequest = exports.LoginIDResponse = exports.CreateActivityRequest = exports.ListUserActivity = exports.UserActivity = exports.ListFavoriteChannelResponse = exports.ListFavoriteChannelRequest = exports.AddFavoriteChannelResponse = exports.RemoveFavoriteChannelRequest = exports.AddFavoriteChannelRequest = exports.ChannelCanvasDetailResponse = void 0;
exports.AccountMezon_VarsEntry = exports.AccountMezon = exports.AccountEmail_VarsEntry = exports.AccountEmail = exports.Message2InboxRequest = exports.GenerateHashChannelAppsResponse = exports.GenerateHashChannelAppsRequest = exports.SearchThreadRequest = exports.GetMezonOauthClientRequest = exports.MezonOauthClientList = exports.MezonOauthClient = exports.CreateRoomChannelApps = exports.GenerateMezonMeetResponse = exports.GenerateMeetTokenResponse = exports.GenerateMeetTokenRequest = exports.DeleteSdTopicRequest = exports.SdTopicDetailRequest = exports.ListSdTopicRequest = exports.SdTopicList = exports.SdTopicRequest = exports.SdTopic = exports.TransactionDetail = exports.TransactionDetailReq = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const struct_1 = require("../google/protobuf/struct");
const timestamp_1 = require("../google/protobuf/timestamp");
const wrappers_1 = require("../google/protobuf/wrappers");
exports.protobufPackage = "mezon.api";
/** The Mezon server RPC protocol for games and apps. */
/** Validation Provider, */
var StoreProvider;
(function (StoreProvider) {
    /** APPLE_APP_STORE - Apple App Store */
    StoreProvider[StoreProvider["APPLE_APP_STORE"] = 0] = "APPLE_APP_STORE";
    /** GOOGLE_PLAY_STORE - Google Play Store */
    StoreProvider[StoreProvider["GOOGLE_PLAY_STORE"] = 1] = "GOOGLE_PLAY_STORE";
    /** HUAWEI_APP_GALLERY - Huawei App Gallery */
    StoreProvider[StoreProvider["HUAWEI_APP_GALLERY"] = 2] = "HUAWEI_APP_GALLERY";
    /** FACEBOOK_INSTANT_STORE - Facebook Instant Store */
    StoreProvider[StoreProvider["FACEBOOK_INSTANT_STORE"] = 3] = "FACEBOOK_INSTANT_STORE";
    StoreProvider[StoreProvider["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(StoreProvider = exports.StoreProvider || (exports.StoreProvider = {}));
function storeProviderFromJSON(object) {
    switch (object) {
        case 0:
        case "APPLE_APP_STORE":
            return StoreProvider.APPLE_APP_STORE;
        case 1:
        case "GOOGLE_PLAY_STORE":
            return StoreProvider.GOOGLE_PLAY_STORE;
        case 2:
        case "HUAWEI_APP_GALLERY":
            return StoreProvider.HUAWEI_APP_GALLERY;
        case 3:
        case "FACEBOOK_INSTANT_STORE":
            return StoreProvider.FACEBOOK_INSTANT_STORE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return StoreProvider.UNRECOGNIZED;
    }
}
exports.storeProviderFromJSON = storeProviderFromJSON;
function storeProviderToJSON(object) {
    switch (object) {
        case StoreProvider.APPLE_APP_STORE:
            return "APPLE_APP_STORE";
        case StoreProvider.GOOGLE_PLAY_STORE:
            return "GOOGLE_PLAY_STORE";
        case StoreProvider.HUAWEI_APP_GALLERY:
            return "HUAWEI_APP_GALLERY";
        case StoreProvider.FACEBOOK_INSTANT_STORE:
            return "FACEBOOK_INSTANT_STORE";
        case StoreProvider.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.storeProviderToJSON = storeProviderToJSON;
/** Environment where a purchase/subscription took place, */
var StoreEnvironment;
(function (StoreEnvironment) {
    /** UNKNOWN - Unknown environment. */
    StoreEnvironment[StoreEnvironment["UNKNOWN"] = 0] = "UNKNOWN";
    /** SANDBOX - Sandbox/test environment. */
    StoreEnvironment[StoreEnvironment["SANDBOX"] = 1] = "SANDBOX";
    /** PRODUCTION - Production environment. */
    StoreEnvironment[StoreEnvironment["PRODUCTION"] = 2] = "PRODUCTION";
    StoreEnvironment[StoreEnvironment["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(StoreEnvironment = exports.StoreEnvironment || (exports.StoreEnvironment = {}));
function storeEnvironmentFromJSON(object) {
    switch (object) {
        case 0:
        case "UNKNOWN":
            return StoreEnvironment.UNKNOWN;
        case 1:
        case "SANDBOX":
            return StoreEnvironment.SANDBOX;
        case 2:
        case "PRODUCTION":
            return StoreEnvironment.PRODUCTION;
        case -1:
        case "UNRECOGNIZED":
        default:
            return StoreEnvironment.UNRECOGNIZED;
    }
}
exports.storeEnvironmentFromJSON = storeEnvironmentFromJSON;
function storeEnvironmentToJSON(object) {
    switch (object) {
        case StoreEnvironment.UNKNOWN:
            return "UNKNOWN";
        case StoreEnvironment.SANDBOX:
            return "SANDBOX";
        case StoreEnvironment.PRODUCTION:
            return "PRODUCTION";
        case StoreEnvironment.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.storeEnvironmentToJSON = storeEnvironmentToJSON;
/** Operator that can be used to override the one set in the leaderboard. */
var Operator;
(function (Operator) {
    /** NO_OVERRIDE - Do not override the leaderboard operator. */
    Operator[Operator["NO_OVERRIDE"] = 0] = "NO_OVERRIDE";
    /** BEST - Override the leaderboard operator with BEST. */
    Operator[Operator["BEST"] = 1] = "BEST";
    /** SET - Override the leaderboard operator with SET. */
    Operator[Operator["SET"] = 2] = "SET";
    /** INCREMENT - Override the leaderboard operator with INCREMENT. */
    Operator[Operator["INCREMENT"] = 3] = "INCREMENT";
    /** DECREMENT - Override the leaderboard operator with DECREMENT. */
    Operator[Operator["DECREMENT"] = 4] = "DECREMENT";
    Operator[Operator["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Operator = exports.Operator || (exports.Operator = {}));
function operatorFromJSON(object) {
    switch (object) {
        case 0:
        case "NO_OVERRIDE":
            return Operator.NO_OVERRIDE;
        case 1:
        case "BEST":
            return Operator.BEST;
        case 2:
        case "SET":
            return Operator.SET;
        case 3:
        case "INCREMENT":
            return Operator.INCREMENT;
        case 4:
        case "DECREMENT":
            return Operator.DECREMENT;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Operator.UNRECOGNIZED;
    }
}
exports.operatorFromJSON = operatorFromJSON;
function operatorToJSON(object) {
    switch (object) {
        case Operator.NO_OVERRIDE:
            return "NO_OVERRIDE";
        case Operator.BEST:
            return "BEST";
        case Operator.SET:
            return "SET";
        case Operator.INCREMENT:
            return "INCREMENT";
        case Operator.DECREMENT:
            return "DECREMENT";
        case Operator.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.operatorToJSON = operatorToJSON;
/** The friendship status. */
var Friend_State;
(function (Friend_State) {
    /** FRIEND - The user is a friend of the current user. */
    Friend_State[Friend_State["FRIEND"] = 0] = "FRIEND";
    /** INVITE_SENT - The current user has sent an invite to the user. */
    Friend_State[Friend_State["INVITE_SENT"] = 1] = "INVITE_SENT";
    /** INVITE_RECEIVED - The current user has received an invite from this user. */
    Friend_State[Friend_State["INVITE_RECEIVED"] = 2] = "INVITE_RECEIVED";
    /** BLOCKED - The current user has blocked this user. */
    Friend_State[Friend_State["BLOCKED"] = 3] = "BLOCKED";
    Friend_State[Friend_State["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Friend_State = exports.Friend_State || (exports.Friend_State = {}));
function friend_StateFromJSON(object) {
    switch (object) {
        case 0:
        case "FRIEND":
            return Friend_State.FRIEND;
        case 1:
        case "INVITE_SENT":
            return Friend_State.INVITE_SENT;
        case 2:
        case "INVITE_RECEIVED":
            return Friend_State.INVITE_RECEIVED;
        case 3:
        case "BLOCKED":
            return Friend_State.BLOCKED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Friend_State.UNRECOGNIZED;
    }
}
exports.friend_StateFromJSON = friend_StateFromJSON;
function friend_StateToJSON(object) {
    switch (object) {
        case Friend_State.FRIEND:
            return "FRIEND";
        case Friend_State.INVITE_SENT:
            return "INVITE_SENT";
        case Friend_State.INVITE_RECEIVED:
            return "INVITE_RECEIVED";
        case Friend_State.BLOCKED:
            return "BLOCKED";
        case Friend_State.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.friend_StateToJSON = friend_StateToJSON;
/** The group role status. */
var GroupUserList_GroupUser_State;
(function (GroupUserList_GroupUser_State) {
    /** SUPERADMIN - The user is a superadmin with full control of the group. */
    GroupUserList_GroupUser_State[GroupUserList_GroupUser_State["SUPERADMIN"] = 0] = "SUPERADMIN";
    /** ADMIN - The user is an admin with additional privileges. */
    GroupUserList_GroupUser_State[GroupUserList_GroupUser_State["ADMIN"] = 1] = "ADMIN";
    /** MEMBER - The user is a regular member. */
    GroupUserList_GroupUser_State[GroupUserList_GroupUser_State["MEMBER"] = 2] = "MEMBER";
    /** JOIN_REQUEST - The user has requested to join the group */
    GroupUserList_GroupUser_State[GroupUserList_GroupUser_State["JOIN_REQUEST"] = 3] = "JOIN_REQUEST";
    GroupUserList_GroupUser_State[GroupUserList_GroupUser_State["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(GroupUserList_GroupUser_State = exports.GroupUserList_GroupUser_State || (exports.GroupUserList_GroupUser_State = {}));
function groupUserList_GroupUser_StateFromJSON(object) {
    switch (object) {
        case 0:
        case "SUPERADMIN":
            return GroupUserList_GroupUser_State.SUPERADMIN;
        case 1:
        case "ADMIN":
            return GroupUserList_GroupUser_State.ADMIN;
        case 2:
        case "MEMBER":
            return GroupUserList_GroupUser_State.MEMBER;
        case 3:
        case "JOIN_REQUEST":
            return GroupUserList_GroupUser_State.JOIN_REQUEST;
        case -1:
        case "UNRECOGNIZED":
        default:
            return GroupUserList_GroupUser_State.UNRECOGNIZED;
    }
}
exports.groupUserList_GroupUser_StateFromJSON = groupUserList_GroupUser_StateFromJSON;
function groupUserList_GroupUser_StateToJSON(object) {
    switch (object) {
        case GroupUserList_GroupUser_State.SUPERADMIN:
            return "SUPERADMIN";
        case GroupUserList_GroupUser_State.ADMIN:
            return "ADMIN";
        case GroupUserList_GroupUser_State.MEMBER:
            return "MEMBER";
        case GroupUserList_GroupUser_State.JOIN_REQUEST:
            return "JOIN_REQUEST";
        case GroupUserList_GroupUser_State.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.groupUserList_GroupUser_StateToJSON = groupUserList_GroupUser_StateToJSON;
/** The group role status. */
var UserGroupList_UserGroup_State;
(function (UserGroupList_UserGroup_State) {
    /** SUPERADMIN - The user is a superadmin with full control of the group. */
    UserGroupList_UserGroup_State[UserGroupList_UserGroup_State["SUPERADMIN"] = 0] = "SUPERADMIN";
    /** ADMIN - The user is an admin with additional privileges. */
    UserGroupList_UserGroup_State[UserGroupList_UserGroup_State["ADMIN"] = 1] = "ADMIN";
    /** MEMBER - The user is a regular member. */
    UserGroupList_UserGroup_State[UserGroupList_UserGroup_State["MEMBER"] = 2] = "MEMBER";
    /** JOIN_REQUEST - The user has requested to join the group */
    UserGroupList_UserGroup_State[UserGroupList_UserGroup_State["JOIN_REQUEST"] = 3] = "JOIN_REQUEST";
    UserGroupList_UserGroup_State[UserGroupList_UserGroup_State["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(UserGroupList_UserGroup_State = exports.UserGroupList_UserGroup_State || (exports.UserGroupList_UserGroup_State = {}));
function userGroupList_UserGroup_StateFromJSON(object) {
    switch (object) {
        case 0:
        case "SUPERADMIN":
            return UserGroupList_UserGroup_State.SUPERADMIN;
        case 1:
        case "ADMIN":
            return UserGroupList_UserGroup_State.ADMIN;
        case 2:
        case "MEMBER":
            return UserGroupList_UserGroup_State.MEMBER;
        case 3:
        case "JOIN_REQUEST":
            return UserGroupList_UserGroup_State.JOIN_REQUEST;
        case -1:
        case "UNRECOGNIZED":
        default:
            return UserGroupList_UserGroup_State.UNRECOGNIZED;
    }
}
exports.userGroupList_UserGroup_StateFromJSON = userGroupList_UserGroup_StateFromJSON;
function userGroupList_UserGroup_StateToJSON(object) {
    switch (object) {
        case UserGroupList_UserGroup_State.SUPERADMIN:
            return "SUPERADMIN";
        case UserGroupList_UserGroup_State.ADMIN:
            return "ADMIN";
        case UserGroupList_UserGroup_State.MEMBER:
            return "MEMBER";
        case UserGroupList_UserGroup_State.JOIN_REQUEST:
            return "JOIN_REQUEST";
        case UserGroupList_UserGroup_State.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.userGroupList_UserGroup_StateToJSON = userGroupList_UserGroup_StateToJSON;
function createBaseAccount() {
    return {
        user: undefined,
        wallet: "",
        email: "",
        mezon_id: "",
        verify_time: undefined,
        disable_time: undefined,
        logo: "",
        splash_screen: "",
        encrypt_private_key: "",
    };
}
exports.Account = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            exports.User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        if (message.wallet !== "") {
            writer.uint32(18).string(message.wallet);
        }
        if (message.email !== "") {
            writer.uint32(26).string(message.email);
        }
        if (message.mezon_id !== "") {
            writer.uint32(34).string(message.mezon_id);
        }
        if (message.verify_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.verify_time), writer.uint32(42).fork()).ldelim();
        }
        if (message.disable_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.disable_time), writer.uint32(50).fork()).ldelim();
        }
        if (message.logo !== "") {
            writer.uint32(58).string(message.logo);
        }
        if (message.splash_screen !== "") {
            writer.uint32(66).string(message.splash_screen);
        }
        if (message.encrypt_private_key !== "") {
            writer.uint32(74).string(message.encrypt_private_key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = exports.User.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.wallet = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.mezon_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.verify_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.disable_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.logo = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.splash_screen = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.encrypt_private_key = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user: isSet(object.user) ? exports.User.fromJSON(object.user) : undefined,
            wallet: isSet(object.wallet) ? globalThis.String(object.wallet) : "",
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            mezon_id: isSet(object.mezon_id) ? globalThis.String(object.mezon_id) : "",
            verify_time: isSet(object.verify_time) ? fromJsonTimestamp(object.verify_time) : undefined,
            disable_time: isSet(object.disable_time) ? fromJsonTimestamp(object.disable_time) : undefined,
            logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
            splash_screen: isSet(object.splash_screen) ? globalThis.String(object.splash_screen) : "",
            encrypt_private_key: isSet(object.encrypt_private_key) ? globalThis.String(object.encrypt_private_key) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.user !== undefined) {
            obj.user = exports.User.toJSON(message.user);
        }
        if (message.wallet !== "") {
            obj.wallet = message.wallet;
        }
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.mezon_id !== "") {
            obj.mezon_id = message.mezon_id;
        }
        if (message.verify_time !== undefined) {
            obj.verify_time = message.verify_time.toISOString();
        }
        if (message.disable_time !== undefined) {
            obj.disable_time = message.disable_time.toISOString();
        }
        if (message.logo !== "") {
            obj.logo = message.logo;
        }
        if (message.splash_screen !== "") {
            obj.splash_screen = message.splash_screen;
        }
        if (message.encrypt_private_key !== "") {
            obj.encrypt_private_key = message.encrypt_private_key;
        }
        return obj;
    },
    create(base) {
        return exports.Account.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseAccount();
        message.user = (object.user !== undefined && object.user !== null) ? exports.User.fromPartial(object.user) : undefined;
        message.wallet = (_a = object.wallet) !== null && _a !== void 0 ? _a : "";
        message.email = (_b = object.email) !== null && _b !== void 0 ? _b : "";
        message.mezon_id = (_c = object.mezon_id) !== null && _c !== void 0 ? _c : "";
        message.verify_time = (_d = object.verify_time) !== null && _d !== void 0 ? _d : undefined;
        message.disable_time = (_e = object.disable_time) !== null && _e !== void 0 ? _e : undefined;
        message.logo = (_f = object.logo) !== null && _f !== void 0 ? _f : "";
        message.splash_screen = (_g = object.splash_screen) !== null && _g !== void 0 ? _g : "";
        message.encrypt_private_key = (_h = object.encrypt_private_key) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseAccountRefresh() {
    return { token: "", vars: {} };
}
exports.AccountRefresh = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        Object.entries(message.vars).forEach(([key, value]) => {
            exports.AccountRefresh_VarsEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccountRefresh();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.AccountRefresh_VarsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.vars[entry2.key] = entry2.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            token: isSet(object.token) ? globalThis.String(object.token) : "",
            vars: isObject(object.vars)
                ? Object.entries(object.vars).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.token !== "") {
            obj.token = message.token;
        }
        if (message.vars) {
            const entries = Object.entries(message.vars);
            if (entries.length > 0) {
                obj.vars = {};
                entries.forEach(([k, v]) => {
                    obj.vars[k] = v;
                });
            }
        }
        return obj;
    },
    create(base) {
        return exports.AccountRefresh.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAccountRefresh();
        message.token = (_a = object.token) !== null && _a !== void 0 ? _a : "";
        message.vars = Object.entries((_b = object.vars) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseAccountRefresh_VarsEntry() {
    return { key: "", value: "" };
}
exports.AccountRefresh_VarsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccountRefresh_VarsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.AccountRefresh_VarsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAccountRefresh_VarsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseAddFriendsRequest() {
    return { ids: [], usernames: [] };
}
exports.AddFriendsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.ids) {
            writer.uint32(10).string(v);
        }
        for (const v of message.usernames) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddFriendsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.ids.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.usernames.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.ids) ? object.ids.map((e) => globalThis.String(e)) : [],
            usernames: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.usernames)
                ? object.usernames.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if ((_a = message.ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.ids = message.ids;
        }
        if ((_b = message.usernames) === null || _b === void 0 ? void 0 : _b.length) {
            obj.usernames = message.usernames;
        }
        return obj;
    },
    create(base) {
        return exports.AddFriendsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAddFriendsRequest();
        message.ids = ((_a = object.ids) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.usernames = ((_b = object.usernames) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseAddGroupUsersRequest() {
    return { group_id: "", user_ids: [] };
}
exports.AddGroupUsersRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.group_id !== "") {
            writer.uint32(10).string(message.group_id);
        }
        for (const v of message.user_ids) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGroupUsersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.group_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user_ids.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            group_id: isSet(object.group_id) ? globalThis.String(object.group_id) : "",
            user_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_ids) ? object.user_ids.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.group_id !== "") {
            obj.group_id = message.group_id;
        }
        if ((_a = message.user_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.user_ids = message.user_ids;
        }
        return obj;
    },
    create(base) {
        return exports.AddGroupUsersRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAddGroupUsersRequest();
        message.group_id = (_a = object.group_id) !== null && _a !== void 0 ? _a : "";
        message.user_ids = ((_b = object.user_ids) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseSessionRefreshRequest() {
    return { token: "", vars: {}, is_remember: undefined };
}
exports.SessionRefreshRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        Object.entries(message.vars).forEach(([key, value]) => {
            exports.SessionRefreshRequest_VarsEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        if (message.is_remember !== undefined) {
            wrappers_1.BoolValue.encode({ value: message.is_remember }, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSessionRefreshRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.SessionRefreshRequest_VarsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.vars[entry2.key] = entry2.value;
                    }
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.is_remember = wrappers_1.BoolValue.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            token: isSet(object.token) ? globalThis.String(object.token) : "",
            vars: isObject(object.vars)
                ? Object.entries(object.vars).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            is_remember: isSet(object.is_remember) ? Boolean(object.is_remember) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.token !== "") {
            obj.token = message.token;
        }
        if (message.vars) {
            const entries = Object.entries(message.vars);
            if (entries.length > 0) {
                obj.vars = {};
                entries.forEach(([k, v]) => {
                    obj.vars[k] = v;
                });
            }
        }
        if (message.is_remember !== undefined) {
            obj.is_remember = message.is_remember;
        }
        return obj;
    },
    create(base) {
        return exports.SessionRefreshRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSessionRefreshRequest();
        message.token = (_a = object.token) !== null && _a !== void 0 ? _a : "";
        message.vars = Object.entries((_b = object.vars) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.is_remember = (_c = object.is_remember) !== null && _c !== void 0 ? _c : undefined;
        return message;
    },
};
function createBaseSessionRefreshRequest_VarsEntry() {
    return { key: "", value: "" };
}
exports.SessionRefreshRequest_VarsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSessionRefreshRequest_VarsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.SessionRefreshRequest_VarsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSessionRefreshRequest_VarsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseSessionLogoutRequest() {
    return { token: "", refresh_token: "", device_id: "", fcm_token: "", platform: "" };
}
exports.SessionLogoutRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        if (message.refresh_token !== "") {
            writer.uint32(18).string(message.refresh_token);
        }
        if (message.device_id !== "") {
            writer.uint32(26).string(message.device_id);
        }
        if (message.fcm_token !== "") {
            writer.uint32(34).string(message.fcm_token);
        }
        if (message.platform !== "") {
            writer.uint32(42).string(message.platform);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSessionLogoutRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.refresh_token = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.device_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.fcm_token = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.platform = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            token: isSet(object.token) ? globalThis.String(object.token) : "",
            refresh_token: isSet(object.refresh_token) ? globalThis.String(object.refresh_token) : "",
            device_id: isSet(object.device_id) ? globalThis.String(object.device_id) : "",
            fcm_token: isSet(object.fcm_token) ? globalThis.String(object.fcm_token) : "",
            platform: isSet(object.platform) ? globalThis.String(object.platform) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.token !== "") {
            obj.token = message.token;
        }
        if (message.refresh_token !== "") {
            obj.refresh_token = message.refresh_token;
        }
        if (message.device_id !== "") {
            obj.device_id = message.device_id;
        }
        if (message.fcm_token !== "") {
            obj.fcm_token = message.fcm_token;
        }
        if (message.platform !== "") {
            obj.platform = message.platform;
        }
        return obj;
    },
    create(base) {
        return exports.SessionLogoutRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseSessionLogoutRequest();
        message.token = (_a = object.token) !== null && _a !== void 0 ? _a : "";
        message.refresh_token = (_b = object.refresh_token) !== null && _b !== void 0 ? _b : "";
        message.device_id = (_c = object.device_id) !== null && _c !== void 0 ? _c : "";
        message.fcm_token = (_d = object.fcm_token) !== null && _d !== void 0 ? _d : "";
        message.platform = (_e = object.platform) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseBanGroupUsersRequest() {
    return { group_id: "", user_ids: [] };
}
exports.BanGroupUsersRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.group_id !== "") {
            writer.uint32(10).string(message.group_id);
        }
        for (const v of message.user_ids) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBanGroupUsersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.group_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user_ids.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            group_id: isSet(object.group_id) ? globalThis.String(object.group_id) : "",
            user_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_ids) ? object.user_ids.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.group_id !== "") {
            obj.group_id = message.group_id;
        }
        if ((_a = message.user_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.user_ids = message.user_ids;
        }
        return obj;
    },
    create(base) {
        return exports.BanGroupUsersRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseBanGroupUsersRequest();
        message.group_id = (_a = object.group_id) !== null && _a !== void 0 ? _a : "";
        message.user_ids = ((_b = object.user_ids) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseBlockFriendsRequest() {
    return { ids: [], usernames: [] };
}
exports.BlockFriendsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.ids) {
            writer.uint32(10).string(v);
        }
        for (const v of message.usernames) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockFriendsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.ids.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.usernames.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.ids) ? object.ids.map((e) => globalThis.String(e)) : [],
            usernames: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.usernames)
                ? object.usernames.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if ((_a = message.ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.ids = message.ids;
        }
        if ((_b = message.usernames) === null || _b === void 0 ? void 0 : _b.length) {
            obj.usernames = message.usernames;
        }
        return obj;
    },
    create(base) {
        return exports.BlockFriendsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseBlockFriendsRequest();
        message.ids = ((_a = object.ids) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.usernames = ((_b = object.usernames) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseChannelMessage() {
    return {
        clan_id: "",
        channel_id: "",
        message_id: "",
        code: undefined,
        sender_id: "",
        username: "",
        avatar: "",
        content: "",
        create_time: undefined,
        update_time: undefined,
        channel_label: "",
        clan_logo: "",
        category_name: "",
        display_name: "",
        clan_nick: "",
        clan_avatar: "",
        reactions: "",
        mentions: "",
        attachments: "",
        references: "",
        referenced_message: "",
        create_time_seconds: 0,
        update_time_seconds: 0,
        mode: 0,
        hide_editted: false,
        is_public: false,
        topic_id: "",
    };
}
exports.ChannelMessage = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.message_id !== "") {
            writer.uint32(26).string(message.message_id);
        }
        if (message.code !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.code }, writer.uint32(34).fork()).ldelim();
        }
        if (message.sender_id !== "") {
            writer.uint32(42).string(message.sender_id);
        }
        if (message.username !== "") {
            writer.uint32(50).string(message.username);
        }
        if (message.avatar !== "") {
            writer.uint32(58).string(message.avatar);
        }
        if (message.content !== "") {
            writer.uint32(66).string(message.content);
        }
        if (message.create_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.create_time), writer.uint32(74).fork()).ldelim();
        }
        if (message.update_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.update_time), writer.uint32(82).fork()).ldelim();
        }
        if (message.channel_label !== "") {
            writer.uint32(90).string(message.channel_label);
        }
        if (message.clan_logo !== "") {
            writer.uint32(98).string(message.clan_logo);
        }
        if (message.category_name !== "") {
            writer.uint32(106).string(message.category_name);
        }
        if (message.display_name !== "") {
            writer.uint32(114).string(message.display_name);
        }
        if (message.clan_nick !== "") {
            writer.uint32(122).string(message.clan_nick);
        }
        if (message.clan_avatar !== "") {
            writer.uint32(130).string(message.clan_avatar);
        }
        if (message.reactions !== "") {
            writer.uint32(138).string(message.reactions);
        }
        if (message.mentions !== "") {
            writer.uint32(146).string(message.mentions);
        }
        if (message.attachments !== "") {
            writer.uint32(154).string(message.attachments);
        }
        if (message.references !== "") {
            writer.uint32(162).string(message.references);
        }
        if (message.referenced_message !== "") {
            writer.uint32(170).string(message.referenced_message);
        }
        if (message.create_time_seconds !== 0) {
            writer.uint32(176).uint32(message.create_time_seconds);
        }
        if (message.update_time_seconds !== 0) {
            writer.uint32(184).uint32(message.update_time_seconds);
        }
        if (message.mode !== 0) {
            writer.uint32(192).int32(message.mode);
        }
        if (message.hide_editted !== false) {
            writer.uint32(200).bool(message.hide_editted);
        }
        if (message.is_public !== false) {
            writer.uint32(208).bool(message.is_public);
        }
        if (message.topic_id !== "") {
            writer.uint32(218).string(message.topic_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.code = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.sender_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.avatar = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.create_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.update_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.channel_label = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.clan_logo = reader.string();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.category_name = reader.string();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.display_name = reader.string();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.clan_nick = reader.string();
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.clan_avatar = reader.string();
                    continue;
                case 17:
                    if (tag !== 138) {
                        break;
                    }
                    message.reactions = reader.string();
                    continue;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    message.mentions = reader.string();
                    continue;
                case 19:
                    if (tag !== 154) {
                        break;
                    }
                    message.attachments = reader.string();
                    continue;
                case 20:
                    if (tag !== 162) {
                        break;
                    }
                    message.references = reader.string();
                    continue;
                case 21:
                    if (tag !== 170) {
                        break;
                    }
                    message.referenced_message = reader.string();
                    continue;
                case 22:
                    if (tag !== 176) {
                        break;
                    }
                    message.create_time_seconds = reader.uint32();
                    continue;
                case 23:
                    if (tag !== 184) {
                        break;
                    }
                    message.update_time_seconds = reader.uint32();
                    continue;
                case 24:
                    if (tag !== 192) {
                        break;
                    }
                    message.mode = reader.int32();
                    continue;
                case 25:
                    if (tag !== 200) {
                        break;
                    }
                    message.hide_editted = reader.bool();
                    continue;
                case 26:
                    if (tag !== 208) {
                        break;
                    }
                    message.is_public = reader.bool();
                    continue;
                case 27:
                    if (tag !== 218) {
                        break;
                    }
                    message.topic_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
            code: isSet(object.code) ? Number(object.code) : undefined,
            sender_id: isSet(object.sender_id) ? globalThis.String(object.sender_id) : "",
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
            content: isSet(object.content) ? globalThis.String(object.content) : "",
            create_time: isSet(object.create_time) ? fromJsonTimestamp(object.create_time) : undefined,
            update_time: isSet(object.update_time) ? fromJsonTimestamp(object.update_time) : undefined,
            channel_label: isSet(object.channel_label) ? globalThis.String(object.channel_label) : "",
            clan_logo: isSet(object.clan_logo) ? globalThis.String(object.clan_logo) : "",
            category_name: isSet(object.category_name) ? globalThis.String(object.category_name) : "",
            display_name: isSet(object.display_name) ? globalThis.String(object.display_name) : "",
            clan_nick: isSet(object.clan_nick) ? globalThis.String(object.clan_nick) : "",
            clan_avatar: isSet(object.clan_avatar) ? globalThis.String(object.clan_avatar) : "",
            reactions: isSet(object.reactions) ? globalThis.String(object.reactions) : "",
            mentions: isSet(object.mentions) ? globalThis.String(object.mentions) : "",
            attachments: isSet(object.attachments) ? globalThis.String(object.attachments) : "",
            references: isSet(object.references) ? globalThis.String(object.references) : "",
            referenced_message: isSet(object.referenced_message) ? globalThis.String(object.referenced_message) : "",
            create_time_seconds: isSet(object.create_time_seconds) ? globalThis.Number(object.create_time_seconds) : 0,
            update_time_seconds: isSet(object.update_time_seconds) ? globalThis.Number(object.update_time_seconds) : 0,
            mode: isSet(object.mode) ? globalThis.Number(object.mode) : 0,
            hide_editted: isSet(object.hide_editted) ? globalThis.Boolean(object.hide_editted) : false,
            is_public: isSet(object.is_public) ? globalThis.Boolean(object.is_public) : false,
            topic_id: isSet(object.topic_id) ? globalThis.String(object.topic_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.message_id !== "") {
            obj.message_id = message.message_id;
        }
        if (message.code !== undefined) {
            obj.code = message.code;
        }
        if (message.sender_id !== "") {
            obj.sender_id = message.sender_id;
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.avatar !== "") {
            obj.avatar = message.avatar;
        }
        if (message.content !== "") {
            obj.content = message.content;
        }
        if (message.create_time !== undefined) {
            obj.create_time = message.create_time.toISOString();
        }
        if (message.update_time !== undefined) {
            obj.update_time = message.update_time.toISOString();
        }
        if (message.channel_label !== "") {
            obj.channel_label = message.channel_label;
        }
        if (message.clan_logo !== "") {
            obj.clan_logo = message.clan_logo;
        }
        if (message.category_name !== "") {
            obj.category_name = message.category_name;
        }
        if (message.display_name !== "") {
            obj.display_name = message.display_name;
        }
        if (message.clan_nick !== "") {
            obj.clan_nick = message.clan_nick;
        }
        if (message.clan_avatar !== "") {
            obj.clan_avatar = message.clan_avatar;
        }
        if (message.reactions !== "") {
            obj.reactions = message.reactions;
        }
        if (message.mentions !== "") {
            obj.mentions = message.mentions;
        }
        if (message.attachments !== "") {
            obj.attachments = message.attachments;
        }
        if (message.references !== "") {
            obj.references = message.references;
        }
        if (message.referenced_message !== "") {
            obj.referenced_message = message.referenced_message;
        }
        if (message.create_time_seconds !== 0) {
            obj.create_time_seconds = Math.round(message.create_time_seconds);
        }
        if (message.update_time_seconds !== 0) {
            obj.update_time_seconds = Math.round(message.update_time_seconds);
        }
        if (message.mode !== 0) {
            obj.mode = Math.round(message.mode);
        }
        if (message.hide_editted !== false) {
            obj.hide_editted = message.hide_editted;
        }
        if (message.is_public !== false) {
            obj.is_public = message.is_public;
        }
        if (message.topic_id !== "") {
            obj.topic_id = message.topic_id;
        }
        return obj;
    },
    create(base) {
        return exports.ChannelMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
        const message = createBaseChannelMessage();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.message_id = (_c = object.message_id) !== null && _c !== void 0 ? _c : "";
        message.code = (_d = object.code) !== null && _d !== void 0 ? _d : undefined;
        message.sender_id = (_e = object.sender_id) !== null && _e !== void 0 ? _e : "";
        message.username = (_f = object.username) !== null && _f !== void 0 ? _f : "";
        message.avatar = (_g = object.avatar) !== null && _g !== void 0 ? _g : "";
        message.content = (_h = object.content) !== null && _h !== void 0 ? _h : "";
        message.create_time = (_j = object.create_time) !== null && _j !== void 0 ? _j : undefined;
        message.update_time = (_k = object.update_time) !== null && _k !== void 0 ? _k : undefined;
        message.channel_label = (_l = object.channel_label) !== null && _l !== void 0 ? _l : "";
        message.clan_logo = (_m = object.clan_logo) !== null && _m !== void 0 ? _m : "";
        message.category_name = (_o = object.category_name) !== null && _o !== void 0 ? _o : "";
        message.display_name = (_p = object.display_name) !== null && _p !== void 0 ? _p : "";
        message.clan_nick = (_q = object.clan_nick) !== null && _q !== void 0 ? _q : "";
        message.clan_avatar = (_r = object.clan_avatar) !== null && _r !== void 0 ? _r : "";
        message.reactions = (_s = object.reactions) !== null && _s !== void 0 ? _s : "";
        message.mentions = (_t = object.mentions) !== null && _t !== void 0 ? _t : "";
        message.attachments = (_u = object.attachments) !== null && _u !== void 0 ? _u : "";
        message.references = (_v = object.references) !== null && _v !== void 0 ? _v : "";
        message.referenced_message = (_w = object.referenced_message) !== null && _w !== void 0 ? _w : "";
        message.create_time_seconds = (_x = object.create_time_seconds) !== null && _x !== void 0 ? _x : 0;
        message.update_time_seconds = (_y = object.update_time_seconds) !== null && _y !== void 0 ? _y : 0;
        message.mode = (_z = object.mode) !== null && _z !== void 0 ? _z : 0;
        message.hide_editted = (_0 = object.hide_editted) !== null && _0 !== void 0 ? _0 : false;
        message.is_public = (_1 = object.is_public) !== null && _1 !== void 0 ? _1 : false;
        message.topic_id = (_2 = object.topic_id) !== null && _2 !== void 0 ? _2 : "";
        return message;
    },
};
function createBaseMessageMention() {
    return { id: "", user_id: "", username: "", role_id: "", rolename: "", create_time: undefined, s: 0, e: 0 };
}
exports.MessageMention = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.user_id !== "") {
            writer.uint32(18).string(message.user_id);
        }
        if (message.username !== "") {
            writer.uint32(26).string(message.username);
        }
        if (message.role_id !== "") {
            writer.uint32(34).string(message.role_id);
        }
        if (message.rolename !== "") {
            writer.uint32(42).string(message.rolename);
        }
        if (message.create_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.create_time), writer.uint32(50).fork()).ldelim();
        }
        if (message.s !== 0) {
            writer.uint32(56).int32(message.s);
        }
        if (message.e !== 0) {
            writer.uint32(64).int32(message.e);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessageMention();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.role_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.rolename = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.create_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.s = reader.int32();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.e = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            role_id: isSet(object.role_id) ? globalThis.String(object.role_id) : "",
            rolename: isSet(object.rolename) ? globalThis.String(object.rolename) : "",
            create_time: isSet(object.create_time) ? fromJsonTimestamp(object.create_time) : undefined,
            s: isSet(object.s) ? globalThis.Number(object.s) : 0,
            e: isSet(object.e) ? globalThis.Number(object.e) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.role_id !== "") {
            obj.role_id = message.role_id;
        }
        if (message.rolename !== "") {
            obj.rolename = message.rolename;
        }
        if (message.create_time !== undefined) {
            obj.create_time = message.create_time.toISOString();
        }
        if (message.s !== 0) {
            obj.s = Math.round(message.s);
        }
        if (message.e !== 0) {
            obj.e = Math.round(message.e);
        }
        return obj;
    },
    create(base) {
        return exports.MessageMention.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseMessageMention();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.user_id = (_b = object.user_id) !== null && _b !== void 0 ? _b : "";
        message.username = (_c = object.username) !== null && _c !== void 0 ? _c : "";
        message.role_id = (_d = object.role_id) !== null && _d !== void 0 ? _d : "";
        message.rolename = (_e = object.rolename) !== null && _e !== void 0 ? _e : "";
        message.create_time = (_f = object.create_time) !== null && _f !== void 0 ? _f : undefined;
        message.s = (_g = object.s) !== null && _g !== void 0 ? _g : 0;
        message.e = (_h = object.e) !== null && _h !== void 0 ? _h : 0;
        return message;
    },
};
function createBaseNotificationInfo() {
    return {
        username: "",
        avatar: "",
        clan_nick: "",
        clan_avatar: "",
        display_name: "",
        channel_label: "",
        channel_type: 0,
        category_name: "",
        clan_name: "",
        clan_logo: "",
        channel: undefined,
    };
}
exports.NotificationInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.username !== "") {
            writer.uint32(10).string(message.username);
        }
        if (message.avatar !== "") {
            writer.uint32(18).string(message.avatar);
        }
        if (message.clan_nick !== "") {
            writer.uint32(26).string(message.clan_nick);
        }
        if (message.clan_avatar !== "") {
            writer.uint32(34).string(message.clan_avatar);
        }
        if (message.display_name !== "") {
            writer.uint32(42).string(message.display_name);
        }
        if (message.channel_label !== "") {
            writer.uint32(50).string(message.channel_label);
        }
        if (message.channel_type !== 0) {
            writer.uint32(56).int32(message.channel_type);
        }
        if (message.category_name !== "") {
            writer.uint32(66).string(message.category_name);
        }
        if (message.clan_name !== "") {
            writer.uint32(74).string(message.clan_name);
        }
        if (message.clan_logo !== "") {
            writer.uint32(82).string(message.clan_logo);
        }
        if (message.channel !== undefined) {
            exports.ChannelDescription.encode(message.channel, writer.uint32(90).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNotificationInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.avatar = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_nick = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clan_avatar = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.display_name = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.channel_label = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.channel_type = reader.int32();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.category_name = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.clan_name = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.clan_logo = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.channel = exports.ChannelDescription.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
            clan_nick: isSet(object.clan_nick) ? globalThis.String(object.clan_nick) : "",
            clan_avatar: isSet(object.clan_avatar) ? globalThis.String(object.clan_avatar) : "",
            display_name: isSet(object.display_name) ? globalThis.String(object.display_name) : "",
            channel_label: isSet(object.channel_label) ? globalThis.String(object.channel_label) : "",
            channel_type: isSet(object.channel_type) ? globalThis.Number(object.channel_type) : 0,
            category_name: isSet(object.category_name) ? globalThis.String(object.category_name) : "",
            clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
            clan_logo: isSet(object.clan_logo) ? globalThis.String(object.clan_logo) : "",
            channel: isSet(object.channel) ? exports.ChannelDescription.fromJSON(object.channel) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.avatar !== "") {
            obj.avatar = message.avatar;
        }
        if (message.clan_nick !== "") {
            obj.clan_nick = message.clan_nick;
        }
        if (message.clan_avatar !== "") {
            obj.clan_avatar = message.clan_avatar;
        }
        if (message.display_name !== "") {
            obj.display_name = message.display_name;
        }
        if (message.channel_label !== "") {
            obj.channel_label = message.channel_label;
        }
        if (message.channel_type !== 0) {
            obj.channel_type = Math.round(message.channel_type);
        }
        if (message.category_name !== "") {
            obj.category_name = message.category_name;
        }
        if (message.clan_name !== "") {
            obj.clan_name = message.clan_name;
        }
        if (message.clan_logo !== "") {
            obj.clan_logo = message.clan_logo;
        }
        if (message.channel !== undefined) {
            obj.channel = exports.ChannelDescription.toJSON(message.channel);
        }
        return obj;
    },
    create(base) {
        return exports.NotificationInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const message = createBaseNotificationInfo();
        message.username = (_a = object.username) !== null && _a !== void 0 ? _a : "";
        message.avatar = (_b = object.avatar) !== null && _b !== void 0 ? _b : "";
        message.clan_nick = (_c = object.clan_nick) !== null && _c !== void 0 ? _c : "";
        message.clan_avatar = (_d = object.clan_avatar) !== null && _d !== void 0 ? _d : "";
        message.display_name = (_e = object.display_name) !== null && _e !== void 0 ? _e : "";
        message.channel_label = (_f = object.channel_label) !== null && _f !== void 0 ? _f : "";
        message.channel_type = (_g = object.channel_type) !== null && _g !== void 0 ? _g : 0;
        message.category_name = (_h = object.category_name) !== null && _h !== void 0 ? _h : "";
        message.clan_name = (_j = object.clan_name) !== null && _j !== void 0 ? _j : "";
        message.clan_logo = (_k = object.clan_logo) !== null && _k !== void 0 ? _k : "";
        message.channel = (object.channel !== undefined && object.channel !== null)
            ? exports.ChannelDescription.fromPartial(object.channel)
            : undefined;
        return message;
    },
};
function createBaseMessageReaction() {
    return {
        id: "",
        emoji_id: "",
        emoji: "",
        sender_id: "",
        sender_name: "",
        sender_avatar: "",
        action: false,
        count: 0,
        channel_id: "",
        message_id: "",
        clan_id: "",
        mode: 0,
        message_sender_id: "",
        is_public: false,
        topic_id: "",
        emoji_recent_id: "",
    };
}
exports.MessageReaction = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.emoji_id !== "") {
            writer.uint32(18).string(message.emoji_id);
        }
        if (message.emoji !== "") {
            writer.uint32(26).string(message.emoji);
        }
        if (message.sender_id !== "") {
            writer.uint32(34).string(message.sender_id);
        }
        if (message.sender_name !== "") {
            writer.uint32(42).string(message.sender_name);
        }
        if (message.sender_avatar !== "") {
            writer.uint32(50).string(message.sender_avatar);
        }
        if (message.action !== false) {
            writer.uint32(56).bool(message.action);
        }
        if (message.count !== 0) {
            writer.uint32(64).int32(message.count);
        }
        if (message.channel_id !== "") {
            writer.uint32(74).string(message.channel_id);
        }
        if (message.message_id !== "") {
            writer.uint32(82).string(message.message_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(90).string(message.clan_id);
        }
        if (message.mode !== 0) {
            writer.uint32(96).int32(message.mode);
        }
        if (message.message_sender_id !== "") {
            writer.uint32(106).string(message.message_sender_id);
        }
        if (message.is_public !== false) {
            writer.uint32(112).bool(message.is_public);
        }
        if (message.topic_id !== "") {
            writer.uint32(122).string(message.topic_id);
        }
        if (message.emoji_recent_id !== "") {
            writer.uint32(130).string(message.emoji_recent_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessageReaction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.emoji_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.emoji = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.sender_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.sender_name = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.sender_avatar = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.action = reader.bool();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.count = reader.int32();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 12:
                    if (tag !== 96) {
                        break;
                    }
                    message.mode = reader.int32();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.message_sender_id = reader.string();
                    continue;
                case 14:
                    if (tag !== 112) {
                        break;
                    }
                    message.is_public = reader.bool();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.topic_id = reader.string();
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.emoji_recent_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            emoji_id: isSet(object.emoji_id) ? globalThis.String(object.emoji_id) : "",
            emoji: isSet(object.emoji) ? globalThis.String(object.emoji) : "",
            sender_id: isSet(object.sender_id) ? globalThis.String(object.sender_id) : "",
            sender_name: isSet(object.sender_name) ? globalThis.String(object.sender_name) : "",
            sender_avatar: isSet(object.sender_avatar) ? globalThis.String(object.sender_avatar) : "",
            action: isSet(object.action) ? globalThis.Boolean(object.action) : false,
            count: isSet(object.count) ? globalThis.Number(object.count) : 0,
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            mode: isSet(object.mode) ? globalThis.Number(object.mode) : 0,
            message_sender_id: isSet(object.message_sender_id) ? globalThis.String(object.message_sender_id) : "",
            is_public: isSet(object.is_public) ? globalThis.Boolean(object.is_public) : false,
            topic_id: isSet(object.topic_id) ? globalThis.String(object.topic_id) : "",
            emoji_recent_id: isSet(object.emoji_recent_id) ? globalThis.String(object.emoji_recent_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.emoji_id !== "") {
            obj.emoji_id = message.emoji_id;
        }
        if (message.emoji !== "") {
            obj.emoji = message.emoji;
        }
        if (message.sender_id !== "") {
            obj.sender_id = message.sender_id;
        }
        if (message.sender_name !== "") {
            obj.sender_name = message.sender_name;
        }
        if (message.sender_avatar !== "") {
            obj.sender_avatar = message.sender_avatar;
        }
        if (message.action !== false) {
            obj.action = message.action;
        }
        if (message.count !== 0) {
            obj.count = Math.round(message.count);
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.message_id !== "") {
            obj.message_id = message.message_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.mode !== 0) {
            obj.mode = Math.round(message.mode);
        }
        if (message.message_sender_id !== "") {
            obj.message_sender_id = message.message_sender_id;
        }
        if (message.is_public !== false) {
            obj.is_public = message.is_public;
        }
        if (message.topic_id !== "") {
            obj.topic_id = message.topic_id;
        }
        if (message.emoji_recent_id !== "") {
            obj.emoji_recent_id = message.emoji_recent_id;
        }
        return obj;
    },
    create(base) {
        return exports.MessageReaction.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
        const message = createBaseMessageReaction();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.emoji_id = (_b = object.emoji_id) !== null && _b !== void 0 ? _b : "";
        message.emoji = (_c = object.emoji) !== null && _c !== void 0 ? _c : "";
        message.sender_id = (_d = object.sender_id) !== null && _d !== void 0 ? _d : "";
        message.sender_name = (_e = object.sender_name) !== null && _e !== void 0 ? _e : "";
        message.sender_avatar = (_f = object.sender_avatar) !== null && _f !== void 0 ? _f : "";
        message.action = (_g = object.action) !== null && _g !== void 0 ? _g : false;
        message.count = (_h = object.count) !== null && _h !== void 0 ? _h : 0;
        message.channel_id = (_j = object.channel_id) !== null && _j !== void 0 ? _j : "";
        message.message_id = (_k = object.message_id) !== null && _k !== void 0 ? _k : "";
        message.clan_id = (_l = object.clan_id) !== null && _l !== void 0 ? _l : "";
        message.mode = (_m = object.mode) !== null && _m !== void 0 ? _m : 0;
        message.message_sender_id = (_o = object.message_sender_id) !== null && _o !== void 0 ? _o : "";
        message.is_public = (_p = object.is_public) !== null && _p !== void 0 ? _p : false;
        message.topic_id = (_q = object.topic_id) !== null && _q !== void 0 ? _q : "";
        message.emoji_recent_id = (_r = object.emoji_recent_id) !== null && _r !== void 0 ? _r : "";
        return message;
    },
};
function createBaseMessageAttachment() {
    return { filename: "", size: 0, url: "", filetype: "", width: 0, height: 0, thumbnail: "" };
}
exports.MessageAttachment = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.filename !== "") {
            writer.uint32(10).string(message.filename);
        }
        if (message.size !== 0) {
            writer.uint32(16).int64(message.size);
        }
        if (message.url !== "") {
            writer.uint32(26).string(message.url);
        }
        if (message.filetype !== "") {
            writer.uint32(34).string(message.filetype);
        }
        if (message.width !== 0) {
            writer.uint32(40).int32(message.width);
        }
        if (message.height !== 0) {
            writer.uint32(48).int32(message.height);
        }
        if (message.thumbnail !== "") {
            writer.uint32(58).string(message.thumbnail);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessageAttachment();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.filename = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.size = longToNumber(reader.int64());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.filetype = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.width = reader.int32();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.height = reader.int32();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.thumbnail = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
            size: isSet(object.size) ? globalThis.Number(object.size) : 0,
            url: isSet(object.url) ? globalThis.String(object.url) : "",
            filetype: isSet(object.filetype) ? globalThis.String(object.filetype) : "",
            width: isSet(object.width) ? globalThis.Number(object.width) : 0,
            height: isSet(object.height) ? globalThis.Number(object.height) : 0,
            thumbnail: isSet(object.thumbnail) ? globalThis.String(object.thumbnail) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.filename !== "") {
            obj.filename = message.filename;
        }
        if (message.size !== 0) {
            obj.size = Math.round(message.size);
        }
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.filetype !== "") {
            obj.filetype = message.filetype;
        }
        if (message.width !== 0) {
            obj.width = Math.round(message.width);
        }
        if (message.height !== 0) {
            obj.height = Math.round(message.height);
        }
        if (message.thumbnail !== "") {
            obj.thumbnail = message.thumbnail;
        }
        return obj;
    },
    create(base) {
        return exports.MessageAttachment.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseMessageAttachment();
        message.filename = (_a = object.filename) !== null && _a !== void 0 ? _a : "";
        message.size = (_b = object.size) !== null && _b !== void 0 ? _b : 0;
        message.url = (_c = object.url) !== null && _c !== void 0 ? _c : "";
        message.filetype = (_d = object.filetype) !== null && _d !== void 0 ? _d : "";
        message.width = (_e = object.width) !== null && _e !== void 0 ? _e : 0;
        message.height = (_f = object.height) !== null && _f !== void 0 ? _f : 0;
        message.thumbnail = (_g = object.thumbnail) !== null && _g !== void 0 ? _g : "";
        return message;
    },
};
function createBaseMessageRef() {
    return {
        message_id: "",
        message_ref_id: "",
        content: "",
        has_attachment: false,
        ref_type: 0,
        message_sender_id: "",
        message_sender_username: "",
        mesages_sender_avatar: "",
        message_sender_clan_nick: "",
        message_sender_display_name: "",
    };
}
exports.MessageRef = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.message_id !== "") {
            writer.uint32(10).string(message.message_id);
        }
        if (message.message_ref_id !== "") {
            writer.uint32(18).string(message.message_ref_id);
        }
        if (message.content !== "") {
            writer.uint32(26).string(message.content);
        }
        if (message.has_attachment !== false) {
            writer.uint32(32).bool(message.has_attachment);
        }
        if (message.ref_type !== 0) {
            writer.uint32(40).int32(message.ref_type);
        }
        if (message.message_sender_id !== "") {
            writer.uint32(50).string(message.message_sender_id);
        }
        if (message.message_sender_username !== "") {
            writer.uint32(58).string(message.message_sender_username);
        }
        if (message.mesages_sender_avatar !== "") {
            writer.uint32(66).string(message.mesages_sender_avatar);
        }
        if (message.message_sender_clan_nick !== "") {
            writer.uint32(74).string(message.message_sender_clan_nick);
        }
        if (message.message_sender_display_name !== "") {
            writer.uint32(82).string(message.message_sender_display_name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessageRef();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message_ref_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.has_attachment = reader.bool();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.ref_type = reader.int32();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.message_sender_id = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.message_sender_username = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.mesages_sender_avatar = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.message_sender_clan_nick = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.message_sender_display_name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
            message_ref_id: isSet(object.message_ref_id) ? globalThis.String(object.message_ref_id) : "",
            content: isSet(object.content) ? globalThis.String(object.content) : "",
            has_attachment: isSet(object.has_attachment) ? globalThis.Boolean(object.has_attachment) : false,
            ref_type: isSet(object.ref_type) ? globalThis.Number(object.ref_type) : 0,
            message_sender_id: isSet(object.message_sender_id) ? globalThis.String(object.message_sender_id) : "",
            message_sender_username: isSet(object.message_sender_username)
                ? globalThis.String(object.message_sender_username)
                : "",
            mesages_sender_avatar: isSet(object.mesages_sender_avatar) ? globalThis.String(object.mesages_sender_avatar) : "",
            message_sender_clan_nick: isSet(object.message_sender_clan_nick)
                ? globalThis.String(object.message_sender_clan_nick)
                : "",
            message_sender_display_name: isSet(object.message_sender_display_name)
                ? globalThis.String(object.message_sender_display_name)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.message_id !== "") {
            obj.message_id = message.message_id;
        }
        if (message.message_ref_id !== "") {
            obj.message_ref_id = message.message_ref_id;
        }
        if (message.content !== "") {
            obj.content = message.content;
        }
        if (message.has_attachment !== false) {
            obj.has_attachment = message.has_attachment;
        }
        if (message.ref_type !== 0) {
            obj.ref_type = Math.round(message.ref_type);
        }
        if (message.message_sender_id !== "") {
            obj.message_sender_id = message.message_sender_id;
        }
        if (message.message_sender_username !== "") {
            obj.message_sender_username = message.message_sender_username;
        }
        if (message.mesages_sender_avatar !== "") {
            obj.mesages_sender_avatar = message.mesages_sender_avatar;
        }
        if (message.message_sender_clan_nick !== "") {
            obj.message_sender_clan_nick = message.message_sender_clan_nick;
        }
        if (message.message_sender_display_name !== "") {
            obj.message_sender_display_name = message.message_sender_display_name;
        }
        return obj;
    },
    create(base) {
        return exports.MessageRef.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const message = createBaseMessageRef();
        message.message_id = (_a = object.message_id) !== null && _a !== void 0 ? _a : "";
        message.message_ref_id = (_b = object.message_ref_id) !== null && _b !== void 0 ? _b : "";
        message.content = (_c = object.content) !== null && _c !== void 0 ? _c : "";
        message.has_attachment = (_d = object.has_attachment) !== null && _d !== void 0 ? _d : false;
        message.ref_type = (_e = object.ref_type) !== null && _e !== void 0 ? _e : 0;
        message.message_sender_id = (_f = object.message_sender_id) !== null && _f !== void 0 ? _f : "";
        message.message_sender_username = (_g = object.message_sender_username) !== null && _g !== void 0 ? _g : "";
        message.mesages_sender_avatar = (_h = object.mesages_sender_avatar) !== null && _h !== void 0 ? _h : "";
        message.message_sender_clan_nick = (_j = object.message_sender_clan_nick) !== null && _j !== void 0 ? _j : "";
        message.message_sender_display_name = (_k = object.message_sender_display_name) !== null && _k !== void 0 ? _k : "";
        return message;
    },
};
function createBaseMessageDeleted() {
    return { message_id: "", deletor: "" };
}
exports.MessageDeleted = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.message_id !== "") {
            writer.uint32(10).string(message.message_id);
        }
        if (message.deletor !== "") {
            writer.uint32(18).string(message.deletor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessageDeleted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.deletor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
            deletor: isSet(object.deletor) ? globalThis.String(object.deletor) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.message_id !== "") {
            obj.message_id = message.message_id;
        }
        if (message.deletor !== "") {
            obj.deletor = message.deletor;
        }
        return obj;
    },
    create(base) {
        return exports.MessageDeleted.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMessageDeleted();
        message.message_id = (_a = object.message_id) !== null && _a !== void 0 ? _a : "";
        message.deletor = (_b = object.deletor) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseChannelMessageList() {
    return { messages: [], last_seen_message: undefined, last_sent_message: undefined };
}
exports.ChannelMessageList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.messages) {
            exports.ChannelMessage.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.last_seen_message !== undefined) {
            exports.ChannelMessageHeader.encode(message.last_seen_message, writer.uint32(18).fork()).ldelim();
        }
        if (message.last_sent_message !== undefined) {
            exports.ChannelMessageHeader.encode(message.last_sent_message, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelMessageList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.messages.push(exports.ChannelMessage.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.last_seen_message = exports.ChannelMessageHeader.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.last_sent_message = exports.ChannelMessageHeader.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            messages: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.messages)
                ? object.messages.map((e) => exports.ChannelMessage.fromJSON(e))
                : [],
            last_seen_message: isSet(object.last_seen_message)
                ? exports.ChannelMessageHeader.fromJSON(object.last_seen_message)
                : undefined,
            last_sent_message: isSet(object.last_sent_message)
                ? exports.ChannelMessageHeader.fromJSON(object.last_sent_message)
                : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.messages) === null || _a === void 0 ? void 0 : _a.length) {
            obj.messages = message.messages.map((e) => exports.ChannelMessage.toJSON(e));
        }
        if (message.last_seen_message !== undefined) {
            obj.last_seen_message = exports.ChannelMessageHeader.toJSON(message.last_seen_message);
        }
        if (message.last_sent_message !== undefined) {
            obj.last_sent_message = exports.ChannelMessageHeader.toJSON(message.last_sent_message);
        }
        return obj;
    },
    create(base) {
        return exports.ChannelMessageList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseChannelMessageList();
        message.messages = ((_a = object.messages) === null || _a === void 0 ? void 0 : _a.map((e) => exports.ChannelMessage.fromPartial(e))) || [];
        message.last_seen_message = (object.last_seen_message !== undefined && object.last_seen_message !== null)
            ? exports.ChannelMessageHeader.fromPartial(object.last_seen_message)
            : undefined;
        message.last_sent_message = (object.last_sent_message !== undefined && object.last_sent_message !== null)
            ? exports.ChannelMessageHeader.fromPartial(object.last_sent_message)
            : undefined;
        return message;
    },
};
function createBaseCreateGroupRequest() {
    return { name: "", description: "", lang_tag: "", avatar_url: "", open: false, max_count: 0 };
}
exports.CreateGroupRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.lang_tag !== "") {
            writer.uint32(26).string(message.lang_tag);
        }
        if (message.avatar_url !== "") {
            writer.uint32(34).string(message.avatar_url);
        }
        if (message.open !== false) {
            writer.uint32(40).bool(message.open);
        }
        if (message.max_count !== 0) {
            writer.uint32(48).int32(message.max_count);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateGroupRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.lang_tag = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.avatar_url = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.open = reader.bool();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.max_count = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            lang_tag: isSet(object.lang_tag) ? globalThis.String(object.lang_tag) : "",
            avatar_url: isSet(object.avatar_url) ? globalThis.String(object.avatar_url) : "",
            open: isSet(object.open) ? globalThis.Boolean(object.open) : false,
            max_count: isSet(object.max_count) ? globalThis.Number(object.max_count) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.lang_tag !== "") {
            obj.lang_tag = message.lang_tag;
        }
        if (message.avatar_url !== "") {
            obj.avatar_url = message.avatar_url;
        }
        if (message.open !== false) {
            obj.open = message.open;
        }
        if (message.max_count !== 0) {
            obj.max_count = Math.round(message.max_count);
        }
        return obj;
    },
    create(base) {
        return exports.CreateGroupRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseCreateGroupRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.lang_tag = (_c = object.lang_tag) !== null && _c !== void 0 ? _c : "";
        message.avatar_url = (_d = object.avatar_url) !== null && _d !== void 0 ? _d : "";
        message.open = (_e = object.open) !== null && _e !== void 0 ? _e : false;
        message.max_count = (_f = object.max_count) !== null && _f !== void 0 ? _f : 0;
        return message;
    },
};
function createBaseDeleteFriendsRequest() {
    return { ids: [], usernames: [] };
}
exports.DeleteFriendsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.ids) {
            writer.uint32(10).string(v);
        }
        for (const v of message.usernames) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteFriendsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.ids.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.usernames.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.ids) ? object.ids.map((e) => globalThis.String(e)) : [],
            usernames: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.usernames)
                ? object.usernames.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if ((_a = message.ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.ids = message.ids;
        }
        if ((_b = message.usernames) === null || _b === void 0 ? void 0 : _b.length) {
            obj.usernames = message.usernames;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteFriendsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseDeleteFriendsRequest();
        message.ids = ((_a = object.ids) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.usernames = ((_b = object.usernames) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseDeleteGroupRequest() {
    return { group_id: "" };
}
exports.DeleteGroupRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.group_id !== "") {
            writer.uint32(10).string(message.group_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteGroupRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.group_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { group_id: isSet(object.group_id) ? globalThis.String(object.group_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.group_id !== "") {
            obj.group_id = message.group_id;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteGroupRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDeleteGroupRequest();
        message.group_id = (_a = object.group_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseDeleteNotificationsRequest() {
    return { ids: [], category: 0 };
}
exports.DeleteNotificationsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.ids) {
            writer.uint32(10).string(v);
        }
        if (message.category !== 0) {
            writer.uint32(16).int32(message.category);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteNotificationsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.ids.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.category = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.ids) ? object.ids.map((e) => globalThis.String(e)) : [],
            category: isSet(object.category) ? globalThis.Number(object.category) : 0,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.ids = message.ids;
        }
        if (message.category !== 0) {
            obj.category = Math.round(message.category);
        }
        return obj;
    },
    create(base) {
        return exports.DeleteNotificationsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseDeleteNotificationsRequest();
        message.ids = ((_a = object.ids) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.category = (_b = object.category) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseEvent() {
    return { name: "", properties: {}, timestamp: undefined, external: false };
}
exports.Event = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        Object.entries(message.properties).forEach(([key, value]) => {
            exports.Event_PropertiesEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        if (message.timestamp !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(26).fork()).ldelim();
        }
        if (message.external !== false) {
            writer.uint32(32).bool(message.external);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.Event_PropertiesEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.properties[entry2.key] = entry2.value;
                    }
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.timestamp = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.external = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            properties: isObject(object.properties)
                ? Object.entries(object.properties).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
            external: isSet(object.external) ? globalThis.Boolean(object.external) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.properties) {
            const entries = Object.entries(message.properties);
            if (entries.length > 0) {
                obj.properties = {};
                entries.forEach(([k, v]) => {
                    obj.properties[k] = v;
                });
            }
        }
        if (message.timestamp !== undefined) {
            obj.timestamp = message.timestamp.toISOString();
        }
        if (message.external !== false) {
            obj.external = message.external;
        }
        return obj;
    },
    create(base) {
        return exports.Event.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseEvent();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.properties = Object.entries((_b = object.properties) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.timestamp = (_c = object.timestamp) !== null && _c !== void 0 ? _c : undefined;
        message.external = (_d = object.external) !== null && _d !== void 0 ? _d : false;
        return message;
    },
};
function createBaseEvent_PropertiesEntry() {
    return { key: "", value: "" };
}
exports.Event_PropertiesEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEvent_PropertiesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.Event_PropertiesEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEvent_PropertiesEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseFriend() {
    return { user: undefined, state: undefined, update_time: undefined, source_id: "" };
}
exports.Friend = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            exports.User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        if (message.state !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.state }, writer.uint32(18).fork()).ldelim();
        }
        if (message.update_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.update_time), writer.uint32(26).fork()).ldelim();
        }
        if (message.source_id !== "") {
            writer.uint32(34).string(message.source_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFriend();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = exports.User.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.state = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.update_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.source_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user: isSet(object.user) ? exports.User.fromJSON(object.user) : undefined,
            state: isSet(object.state) ? Number(object.state) : undefined,
            update_time: isSet(object.update_time) ? fromJsonTimestamp(object.update_time) : undefined,
            source_id: isSet(object.source_id) ? globalThis.String(object.source_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.user !== undefined) {
            obj.user = exports.User.toJSON(message.user);
        }
        if (message.state !== undefined) {
            obj.state = message.state;
        }
        if (message.update_time !== undefined) {
            obj.update_time = message.update_time.toISOString();
        }
        if (message.source_id !== "") {
            obj.source_id = message.source_id;
        }
        return obj;
    },
    create(base) {
        return exports.Friend.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseFriend();
        message.user = (object.user !== undefined && object.user !== null) ? exports.User.fromPartial(object.user) : undefined;
        message.state = (_a = object.state) !== null && _a !== void 0 ? _a : undefined;
        message.update_time = (_b = object.update_time) !== null && _b !== void 0 ? _b : undefined;
        message.source_id = (_c = object.source_id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseFriendList() {
    return { friends: [], cursor: "" };
}
exports.FriendList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.friends) {
            exports.Friend.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.cursor !== "") {
            writer.uint32(18).string(message.cursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFriendList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.friends.push(exports.Friend.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            friends: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.friends) ? object.friends.map((e) => exports.Friend.fromJSON(e)) : [],
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.friends) === null || _a === void 0 ? void 0 : _a.length) {
            obj.friends = message.friends.map((e) => exports.Friend.toJSON(e));
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        return obj;
    },
    create(base) {
        return exports.FriendList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseFriendList();
        message.friends = ((_a = object.friends) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Friend.fromPartial(e))) || [];
        message.cursor = (_b = object.cursor) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetUsersRequest() {
    return { ids: [], usernames: [], facebook_ids: [] };
}
exports.GetUsersRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.ids) {
            writer.uint32(10).string(v);
        }
        for (const v of message.usernames) {
            writer.uint32(18).string(v);
        }
        for (const v of message.facebook_ids) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUsersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.ids.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.usernames.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.facebook_ids.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.ids) ? object.ids.map((e) => globalThis.String(e)) : [],
            usernames: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.usernames)
                ? object.usernames.map((e) => globalThis.String(e))
                : [],
            facebook_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.facebook_ids)
                ? object.facebook_ids.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c;
        const obj = {};
        if ((_a = message.ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.ids = message.ids;
        }
        if ((_b = message.usernames) === null || _b === void 0 ? void 0 : _b.length) {
            obj.usernames = message.usernames;
        }
        if ((_c = message.facebook_ids) === null || _c === void 0 ? void 0 : _c.length) {
            obj.facebook_ids = message.facebook_ids;
        }
        return obj;
    },
    create(base) {
        return exports.GetUsersRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseGetUsersRequest();
        message.ids = ((_a = object.ids) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.usernames = ((_b = object.usernames) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.facebook_ids = ((_c = object.facebook_ids) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        return message;
    },
};
function createBaseUpdateUsersRequest() {
    return { display_name: "", avatar_url: "" };
}
exports.UpdateUsersRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.display_name !== "") {
            writer.uint32(18).string(message.display_name);
        }
        if (message.avatar_url !== "") {
            writer.uint32(26).string(message.avatar_url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateUsersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.display_name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.avatar_url = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            display_name: isSet(object.display_name) ? globalThis.String(object.display_name) : "",
            avatar_url: isSet(object.avatar_url) ? globalThis.String(object.avatar_url) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.display_name !== "") {
            obj.display_name = message.display_name;
        }
        if (message.avatar_url !== "") {
            obj.avatar_url = message.avatar_url;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateUsersRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUpdateUsersRequest();
        message.display_name = (_a = object.display_name) !== null && _a !== void 0 ? _a : "";
        message.avatar_url = (_b = object.avatar_url) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGroup() {
    return {
        id: "",
        creator_id: "",
        name: "",
        description: "",
        lang_tag: "",
        metadata: "",
        avatar_url: "",
        open: undefined,
        edge_count: 0,
        max_count: 0,
        create_time: undefined,
        update_time: undefined,
    };
}
exports.Group = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.creator_id !== "") {
            writer.uint32(18).string(message.creator_id);
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        if (message.lang_tag !== "") {
            writer.uint32(42).string(message.lang_tag);
        }
        if (message.metadata !== "") {
            writer.uint32(50).string(message.metadata);
        }
        if (message.avatar_url !== "") {
            writer.uint32(58).string(message.avatar_url);
        }
        if (message.open !== undefined) {
            wrappers_1.BoolValue.encode({ value: message.open }, writer.uint32(66).fork()).ldelim();
        }
        if (message.edge_count !== 0) {
            writer.uint32(72).int32(message.edge_count);
        }
        if (message.max_count !== 0) {
            writer.uint32(80).int32(message.max_count);
        }
        if (message.create_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.create_time), writer.uint32(90).fork()).ldelim();
        }
        if (message.update_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.update_time), writer.uint32(98).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.lang_tag = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.metadata = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.avatar_url = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.open = wrappers_1.BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.edge_count = reader.int32();
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.max_count = reader.int32();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.create_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.update_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            lang_tag: isSet(object.lang_tag) ? globalThis.String(object.lang_tag) : "",
            metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
            avatar_url: isSet(object.avatar_url) ? globalThis.String(object.avatar_url) : "",
            open: isSet(object.open) ? Boolean(object.open) : undefined,
            edge_count: isSet(object.edge_count) ? globalThis.Number(object.edge_count) : 0,
            max_count: isSet(object.max_count) ? globalThis.Number(object.max_count) : 0,
            create_time: isSet(object.create_time) ? fromJsonTimestamp(object.create_time) : undefined,
            update_time: isSet(object.update_time) ? fromJsonTimestamp(object.update_time) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.lang_tag !== "") {
            obj.lang_tag = message.lang_tag;
        }
        if (message.metadata !== "") {
            obj.metadata = message.metadata;
        }
        if (message.avatar_url !== "") {
            obj.avatar_url = message.avatar_url;
        }
        if (message.open !== undefined) {
            obj.open = message.open;
        }
        if (message.edge_count !== 0) {
            obj.edge_count = Math.round(message.edge_count);
        }
        if (message.max_count !== 0) {
            obj.max_count = Math.round(message.max_count);
        }
        if (message.create_time !== undefined) {
            obj.create_time = message.create_time.toISOString();
        }
        if (message.update_time !== undefined) {
            obj.update_time = message.update_time.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.Group.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        const message = createBaseGroup();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.creator_id = (_b = object.creator_id) !== null && _b !== void 0 ? _b : "";
        message.name = (_c = object.name) !== null && _c !== void 0 ? _c : "";
        message.description = (_d = object.description) !== null && _d !== void 0 ? _d : "";
        message.lang_tag = (_e = object.lang_tag) !== null && _e !== void 0 ? _e : "";
        message.metadata = (_f = object.metadata) !== null && _f !== void 0 ? _f : "";
        message.avatar_url = (_g = object.avatar_url) !== null && _g !== void 0 ? _g : "";
        message.open = (_h = object.open) !== null && _h !== void 0 ? _h : undefined;
        message.edge_count = (_j = object.edge_count) !== null && _j !== void 0 ? _j : 0;
        message.max_count = (_k = object.max_count) !== null && _k !== void 0 ? _k : 0;
        message.create_time = (_l = object.create_time) !== null && _l !== void 0 ? _l : undefined;
        message.update_time = (_m = object.update_time) !== null && _m !== void 0 ? _m : undefined;
        return message;
    },
};
function createBaseGroupList() {
    return { groups: [], cursor: "" };
}
exports.GroupList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.groups) {
            exports.Group.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.cursor !== "") {
            writer.uint32(18).string(message.cursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.groups.push(exports.Group.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            groups: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.groups) ? object.groups.map((e) => exports.Group.fromJSON(e)) : [],
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.groups) === null || _a === void 0 ? void 0 : _a.length) {
            obj.groups = message.groups.map((e) => exports.Group.toJSON(e));
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        return obj;
    },
    create(base) {
        return exports.GroupList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGroupList();
        message.groups = ((_a = object.groups) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Group.fromPartial(e))) || [];
        message.cursor = (_b = object.cursor) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGroupUserList() {
    return { group_users: [], cursor: "" };
}
exports.GroupUserList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.group_users) {
            exports.GroupUserList_GroupUser.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.cursor !== "") {
            writer.uint32(18).string(message.cursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupUserList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.group_users.push(exports.GroupUserList_GroupUser.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            group_users: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.group_users)
                ? object.group_users.map((e) => exports.GroupUserList_GroupUser.fromJSON(e))
                : [],
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.group_users) === null || _a === void 0 ? void 0 : _a.length) {
            obj.group_users = message.group_users.map((e) => exports.GroupUserList_GroupUser.toJSON(e));
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        return obj;
    },
    create(base) {
        return exports.GroupUserList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGroupUserList();
        message.group_users = ((_a = object.group_users) === null || _a === void 0 ? void 0 : _a.map((e) => exports.GroupUserList_GroupUser.fromPartial(e))) || [];
        message.cursor = (_b = object.cursor) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGroupUserList_GroupUser() {
    return { user: undefined, state: undefined };
}
exports.GroupUserList_GroupUser = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            exports.User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        if (message.state !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.state }, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupUserList_GroupUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = exports.User.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.state = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user: isSet(object.user) ? exports.User.fromJSON(object.user) : undefined,
            state: isSet(object.state) ? Number(object.state) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.user !== undefined) {
            obj.user = exports.User.toJSON(message.user);
        }
        if (message.state !== undefined) {
            obj.state = message.state;
        }
        return obj;
    },
    create(base) {
        return exports.GroupUserList_GroupUser.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGroupUserList_GroupUser();
        message.user = (object.user !== undefined && object.user !== null) ? exports.User.fromPartial(object.user) : undefined;
        message.state = (_a = object.state) !== null && _a !== void 0 ? _a : undefined;
        return message;
    },
};
function createBaseChannelUserList() {
    return { channel_users: [], cursor: "", channel_id: "" };
}
exports.ChannelUserList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.channel_users) {
            exports.ChannelUserList_ChannelUser.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.cursor !== "") {
            writer.uint32(18).string(message.cursor);
        }
        if (message.channel_id !== "") {
            writer.uint32(26).string(message.channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelUserList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_users.push(exports.ChannelUserList_ChannelUser.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_users: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.channel_users)
                ? object.channel_users.map((e) => exports.ChannelUserList_ChannelUser.fromJSON(e))
                : [],
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.channel_users) === null || _a === void 0 ? void 0 : _a.length) {
            obj.channel_users = message.channel_users.map((e) => exports.ChannelUserList_ChannelUser.toJSON(e));
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.ChannelUserList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseChannelUserList();
        message.channel_users = ((_a = object.channel_users) === null || _a === void 0 ? void 0 : _a.map((e) => exports.ChannelUserList_ChannelUser.fromPartial(e))) || [];
        message.cursor = (_b = object.cursor) !== null && _b !== void 0 ? _b : "";
        message.channel_id = (_c = object.channel_id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseChannelUserList_ChannelUser() {
    return { user_id: "", role_id: [], id: "", thread_id: "", clan_nick: "", clan_avatar: "", clan_id: "" };
}
exports.ChannelUserList_ChannelUser = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user_id !== "") {
            writer.uint32(10).string(message.user_id);
        }
        for (const v of message.role_id) {
            writer.uint32(18).string(v);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        if (message.thread_id !== "") {
            writer.uint32(34).string(message.thread_id);
        }
        if (message.clan_nick !== "") {
            writer.uint32(42).string(message.clan_nick);
        }
        if (message.clan_avatar !== "") {
            writer.uint32(50).string(message.clan_avatar);
        }
        if (message.clan_id !== "") {
            writer.uint32(58).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelUserList_ChannelUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.role_id.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.thread_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.clan_nick = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.clan_avatar = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            role_id: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.role_id) ? object.role_id.map((e) => globalThis.String(e)) : [],
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            thread_id: isSet(object.thread_id) ? globalThis.String(object.thread_id) : "",
            clan_nick: isSet(object.clan_nick) ? globalThis.String(object.clan_nick) : "",
            clan_avatar: isSet(object.clan_avatar) ? globalThis.String(object.clan_avatar) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if ((_a = message.role_id) === null || _a === void 0 ? void 0 : _a.length) {
            obj.role_id = message.role_id;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.thread_id !== "") {
            obj.thread_id = message.thread_id;
        }
        if (message.clan_nick !== "") {
            obj.clan_nick = message.clan_nick;
        }
        if (message.clan_avatar !== "") {
            obj.clan_avatar = message.clan_avatar;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.ChannelUserList_ChannelUser.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseChannelUserList_ChannelUser();
        message.user_id = (_a = object.user_id) !== null && _a !== void 0 ? _a : "";
        message.role_id = ((_b = object.role_id) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.id = (_c = object.id) !== null && _c !== void 0 ? _c : "";
        message.thread_id = (_d = object.thread_id) !== null && _d !== void 0 ? _d : "";
        message.clan_nick = (_e = object.clan_nick) !== null && _e !== void 0 ? _e : "";
        message.clan_avatar = (_f = object.clan_avatar) !== null && _f !== void 0 ? _f : "";
        message.clan_id = (_g = object.clan_id) !== null && _g !== void 0 ? _g : "";
        return message;
    },
};
function createBaseVoiceChannelUser() {
    return { id: "", user_id: "", channel_id: "", participant: "" };
}
exports.VoiceChannelUser = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.user_id !== "") {
            writer.uint32(18).string(message.user_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(26).string(message.channel_id);
        }
        if (message.participant !== "") {
            writer.uint32(34).string(message.participant);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVoiceChannelUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.participant = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            participant: isSet(object.participant) ? globalThis.String(object.participant) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.participant !== "") {
            obj.participant = message.participant;
        }
        return obj;
    },
    create(base) {
        return exports.VoiceChannelUser.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseVoiceChannelUser();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.user_id = (_b = object.user_id) !== null && _b !== void 0 ? _b : "";
        message.channel_id = (_c = object.channel_id) !== null && _c !== void 0 ? _c : "";
        message.participant = (_d = object.participant) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseVoiceChannelUserList() {
    return { voice_channel_users: [] };
}
exports.VoiceChannelUserList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.voice_channel_users) {
            exports.VoiceChannelUser.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVoiceChannelUserList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.voice_channel_users.push(exports.VoiceChannelUser.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            voice_channel_users: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.voice_channel_users)
                ? object.voice_channel_users.map((e) => exports.VoiceChannelUser.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.voice_channel_users) === null || _a === void 0 ? void 0 : _a.length) {
            obj.voice_channel_users = message.voice_channel_users.map((e) => exports.VoiceChannelUser.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.VoiceChannelUserList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseVoiceChannelUserList();
        message.voice_channel_users = ((_a = object.voice_channel_users) === null || _a === void 0 ? void 0 : _a.map((e) => exports.VoiceChannelUser.fromPartial(e))) || [];
        return message;
    },
};
function createBaseChannelAttachment() {
    return {
        id: "",
        filename: "",
        filetype: "",
        filesize: "",
        url: "",
        uploader: "",
        create_time: undefined,
        message_id: "",
        width: 0,
        height: 0,
    };
}
exports.ChannelAttachment = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.filename !== "") {
            writer.uint32(18).string(message.filename);
        }
        if (message.filetype !== "") {
            writer.uint32(26).string(message.filetype);
        }
        if (message.filesize !== "") {
            writer.uint32(34).string(message.filesize);
        }
        if (message.url !== "") {
            writer.uint32(42).string(message.url);
        }
        if (message.uploader !== "") {
            writer.uint32(50).string(message.uploader);
        }
        if (message.create_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.create_time), writer.uint32(58).fork()).ldelim();
        }
        if (message.message_id !== "") {
            writer.uint32(66).string(message.message_id);
        }
        if (message.width !== 0) {
            writer.uint32(72).int32(message.width);
        }
        if (message.height !== 0) {
            writer.uint32(80).int32(message.height);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelAttachment();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.filename = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.filetype = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.filesize = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.uploader = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.create_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.width = reader.int32();
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.height = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
            filetype: isSet(object.filetype) ? globalThis.String(object.filetype) : "",
            filesize: isSet(object.filesize) ? globalThis.String(object.filesize) : "",
            url: isSet(object.url) ? globalThis.String(object.url) : "",
            uploader: isSet(object.uploader) ? globalThis.String(object.uploader) : "",
            create_time: isSet(object.create_time) ? fromJsonTimestamp(object.create_time) : undefined,
            message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
            width: isSet(object.width) ? globalThis.Number(object.width) : 0,
            height: isSet(object.height) ? globalThis.Number(object.height) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.filename !== "") {
            obj.filename = message.filename;
        }
        if (message.filetype !== "") {
            obj.filetype = message.filetype;
        }
        if (message.filesize !== "") {
            obj.filesize = message.filesize;
        }
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.uploader !== "") {
            obj.uploader = message.uploader;
        }
        if (message.create_time !== undefined) {
            obj.create_time = message.create_time.toISOString();
        }
        if (message.message_id !== "") {
            obj.message_id = message.message_id;
        }
        if (message.width !== 0) {
            obj.width = Math.round(message.width);
        }
        if (message.height !== 0) {
            obj.height = Math.round(message.height);
        }
        return obj;
    },
    create(base) {
        return exports.ChannelAttachment.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const message = createBaseChannelAttachment();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.filename = (_b = object.filename) !== null && _b !== void 0 ? _b : "";
        message.filetype = (_c = object.filetype) !== null && _c !== void 0 ? _c : "";
        message.filesize = (_d = object.filesize) !== null && _d !== void 0 ? _d : "";
        message.url = (_e = object.url) !== null && _e !== void 0 ? _e : "";
        message.uploader = (_f = object.uploader) !== null && _f !== void 0 ? _f : "";
        message.create_time = (_g = object.create_time) !== null && _g !== void 0 ? _g : undefined;
        message.message_id = (_h = object.message_id) !== null && _h !== void 0 ? _h : "";
        message.width = (_j = object.width) !== null && _j !== void 0 ? _j : 0;
        message.height = (_k = object.height) !== null && _k !== void 0 ? _k : 0;
        return message;
    },
};
function createBaseChannelAttachmentList() {
    return { attachments: [] };
}
exports.ChannelAttachmentList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.attachments) {
            exports.ChannelAttachment.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelAttachmentList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.attachments.push(exports.ChannelAttachment.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            attachments: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.attachments)
                ? object.attachments.map((e) => exports.ChannelAttachment.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.attachments) === null || _a === void 0 ? void 0 : _a.length) {
            obj.attachments = message.attachments.map((e) => exports.ChannelAttachment.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ChannelAttachmentList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseChannelAttachmentList();
        message.attachments = ((_a = object.attachments) === null || _a === void 0 ? void 0 : _a.map((e) => exports.ChannelAttachment.fromPartial(e))) || [];
        return message;
    },
};
function createBaseClanUserList() {
    return { clan_users: [], cursor: "", clan_id: "" };
}
exports.ClanUserList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.clan_users) {
            exports.ClanUserList_ClanUser.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.cursor !== "") {
            writer.uint32(18).string(message.cursor);
        }
        if (message.clan_id !== "") {
            writer.uint32(26).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanUserList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_users.push(exports.ClanUserList_ClanUser.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_users: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.clan_users)
                ? object.clan_users.map((e) => exports.ClanUserList_ClanUser.fromJSON(e))
                : [],
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.clan_users) === null || _a === void 0 ? void 0 : _a.length) {
            obj.clan_users = message.clan_users.map((e) => exports.ClanUserList_ClanUser.toJSON(e));
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.ClanUserList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseClanUserList();
        message.clan_users = ((_a = object.clan_users) === null || _a === void 0 ? void 0 : _a.map((e) => exports.ClanUserList_ClanUser.fromPartial(e))) || [];
        message.cursor = (_b = object.cursor) !== null && _b !== void 0 ? _b : "";
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseClanUserList_ClanUser() {
    return { user: undefined, role_id: [], clan_nick: "", clan_avatar: "", clan_id: "" };
}
exports.ClanUserList_ClanUser = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== undefined) {
            exports.User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.role_id) {
            writer.uint32(18).string(v);
        }
        if (message.clan_nick !== "") {
            writer.uint32(26).string(message.clan_nick);
        }
        if (message.clan_avatar !== "") {
            writer.uint32(34).string(message.clan_avatar);
        }
        if (message.clan_id !== "") {
            writer.uint32(42).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanUserList_ClanUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = exports.User.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.role_id.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_nick = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clan_avatar = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user: isSet(object.user) ? exports.User.fromJSON(object.user) : undefined,
            role_id: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.role_id) ? object.role_id.map((e) => globalThis.String(e)) : [],
            clan_nick: isSet(object.clan_nick) ? globalThis.String(object.clan_nick) : "",
            clan_avatar: isSet(object.clan_avatar) ? globalThis.String(object.clan_avatar) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.user !== undefined) {
            obj.user = exports.User.toJSON(message.user);
        }
        if ((_a = message.role_id) === null || _a === void 0 ? void 0 : _a.length) {
            obj.role_id = message.role_id;
        }
        if (message.clan_nick !== "") {
            obj.clan_nick = message.clan_nick;
        }
        if (message.clan_avatar !== "") {
            obj.clan_avatar = message.clan_avatar;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.ClanUserList_ClanUser.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseClanUserList_ClanUser();
        message.user = (object.user !== undefined && object.user !== null) ? exports.User.fromPartial(object.user) : undefined;
        message.role_id = ((_a = object.role_id) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.clan_nick = (_b = object.clan_nick) !== null && _b !== void 0 ? _b : "";
        message.clan_avatar = (_c = object.clan_avatar) !== null && _c !== void 0 ? _c : "";
        message.clan_id = (_d = object.clan_id) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseRegistFcmDeviceTokenRequest() {
    return { token: "", device_id: "", platform: "", voip_token: "" };
}
exports.RegistFcmDeviceTokenRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        if (message.device_id !== "") {
            writer.uint32(18).string(message.device_id);
        }
        if (message.platform !== "") {
            writer.uint32(26).string(message.platform);
        }
        if (message.voip_token !== "") {
            writer.uint32(34).string(message.voip_token);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegistFcmDeviceTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.device_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.platform = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.voip_token = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            token: isSet(object.token) ? globalThis.String(object.token) : "",
            device_id: isSet(object.device_id) ? globalThis.String(object.device_id) : "",
            platform: isSet(object.platform) ? globalThis.String(object.platform) : "",
            voip_token: isSet(object.voip_token) ? globalThis.String(object.voip_token) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.token !== "") {
            obj.token = message.token;
        }
        if (message.device_id !== "") {
            obj.device_id = message.device_id;
        }
        if (message.platform !== "") {
            obj.platform = message.platform;
        }
        if (message.voip_token !== "") {
            obj.voip_token = message.voip_token;
        }
        return obj;
    },
    create(base) {
        return exports.RegistFcmDeviceTokenRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseRegistFcmDeviceTokenRequest();
        message.token = (_a = object.token) !== null && _a !== void 0 ? _a : "";
        message.device_id = (_b = object.device_id) !== null && _b !== void 0 ? _b : "";
        message.platform = (_c = object.platform) !== null && _c !== void 0 ? _c : "";
        message.voip_token = (_d = object.voip_token) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseRegistFcmDeviceTokenResponse() {
    return { token: "", device_id: "", platform: "" };
}
exports.RegistFcmDeviceTokenResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        if (message.device_id !== "") {
            writer.uint32(18).string(message.device_id);
        }
        if (message.platform !== "") {
            writer.uint32(26).string(message.platform);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegistFcmDeviceTokenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.device_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.platform = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            token: isSet(object.token) ? globalThis.String(object.token) : "",
            device_id: isSet(object.device_id) ? globalThis.String(object.device_id) : "",
            platform: isSet(object.platform) ? globalThis.String(object.platform) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.token !== "") {
            obj.token = message.token;
        }
        if (message.device_id !== "") {
            obj.device_id = message.device_id;
        }
        if (message.platform !== "") {
            obj.platform = message.platform;
        }
        return obj;
    },
    create(base) {
        return exports.RegistFcmDeviceTokenResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseRegistFcmDeviceTokenResponse();
        message.token = (_a = object.token) !== null && _a !== void 0 ? _a : "";
        message.device_id = (_b = object.device_id) !== null && _b !== void 0 ? _b : "";
        message.platform = (_c = object.platform) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseListChannelMessagesRequest() {
    return { clan_id: "", channel_id: "", message_id: "", limit: undefined, direction: undefined, topic_id: "" };
}
exports.ListChannelMessagesRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.message_id !== "") {
            writer.uint32(26).string(message.message_id);
        }
        if (message.limit !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.limit }, writer.uint32(34).fork()).ldelim();
        }
        if (message.direction !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.direction }, writer.uint32(42).fork()).ldelim();
        }
        if (message.topic_id !== "") {
            writer.uint32(50).string(message.topic_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListChannelMessagesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.limit = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.direction = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.topic_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
            direction: isSet(object.direction) ? Number(object.direction) : undefined,
            topic_id: isSet(object.topic_id) ? globalThis.String(object.topic_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.message_id !== "") {
            obj.message_id = message.message_id;
        }
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        if (message.direction !== undefined) {
            obj.direction = message.direction;
        }
        if (message.topic_id !== "") {
            obj.topic_id = message.topic_id;
        }
        return obj;
    },
    create(base) {
        return exports.ListChannelMessagesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseListChannelMessagesRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.message_id = (_c = object.message_id) !== null && _c !== void 0 ? _c : "";
        message.limit = (_d = object.limit) !== null && _d !== void 0 ? _d : undefined;
        message.direction = (_e = object.direction) !== null && _e !== void 0 ? _e : undefined;
        message.topic_id = (_f = object.topic_id) !== null && _f !== void 0 ? _f : "";
        return message;
    },
};
function createBaseListFriendsRequest() {
    return { limit: undefined, state: undefined, cursor: "" };
}
exports.ListFriendsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.limit !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.limit }, writer.uint32(10).fork()).ldelim();
        }
        if (message.state !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.state }, writer.uint32(18).fork()).ldelim();
        }
        if (message.cursor !== "") {
            writer.uint32(26).string(message.cursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListFriendsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.limit = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.state = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
            state: isSet(object.state) ? Number(object.state) : undefined,
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        if (message.state !== undefined) {
            obj.state = message.state;
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        return obj;
    },
    create(base) {
        return exports.ListFriendsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseListFriendsRequest();
        message.limit = (_a = object.limit) !== null && _a !== void 0 ? _a : undefined;
        message.state = (_b = object.state) !== null && _b !== void 0 ? _b : undefined;
        message.cursor = (_c = object.cursor) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseListGroupsRequest() {
    return { name: "", cursor: "", limit: undefined, lang_tag: "", members: undefined, open: undefined };
}
exports.ListGroupsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.cursor !== "") {
            writer.uint32(18).string(message.cursor);
        }
        if (message.limit !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.limit }, writer.uint32(26).fork()).ldelim();
        }
        if (message.lang_tag !== "") {
            writer.uint32(34).string(message.lang_tag);
        }
        if (message.members !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.members }, writer.uint32(42).fork()).ldelim();
        }
        if (message.open !== undefined) {
            wrappers_1.BoolValue.encode({ value: message.open }, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListGroupsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.limit = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.lang_tag = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.members = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.open = wrappers_1.BoolValue.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
            lang_tag: isSet(object.lang_tag) ? globalThis.String(object.lang_tag) : "",
            members: isSet(object.members) ? Number(object.members) : undefined,
            open: isSet(object.open) ? Boolean(object.open) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        if (message.lang_tag !== "") {
            obj.lang_tag = message.lang_tag;
        }
        if (message.members !== undefined) {
            obj.members = message.members;
        }
        if (message.open !== undefined) {
            obj.open = message.open;
        }
        return obj;
    },
    create(base) {
        return exports.ListGroupsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseListGroupsRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.cursor = (_b = object.cursor) !== null && _b !== void 0 ? _b : "";
        message.limit = (_c = object.limit) !== null && _c !== void 0 ? _c : undefined;
        message.lang_tag = (_d = object.lang_tag) !== null && _d !== void 0 ? _d : "";
        message.members = (_e = object.members) !== null && _e !== void 0 ? _e : undefined;
        message.open = (_f = object.open) !== null && _f !== void 0 ? _f : undefined;
        return message;
    },
};
function createBaseListGroupUsersRequest() {
    return { group_id: "", limit: undefined, state: undefined, cursor: "" };
}
exports.ListGroupUsersRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.group_id !== "") {
            writer.uint32(10).string(message.group_id);
        }
        if (message.limit !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.limit }, writer.uint32(18).fork()).ldelim();
        }
        if (message.state !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.state }, writer.uint32(26).fork()).ldelim();
        }
        if (message.cursor !== "") {
            writer.uint32(34).string(message.cursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListGroupUsersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.group_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.limit = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.state = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            group_id: isSet(object.group_id) ? globalThis.String(object.group_id) : "",
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
            state: isSet(object.state) ? Number(object.state) : undefined,
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.group_id !== "") {
            obj.group_id = message.group_id;
        }
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        if (message.state !== undefined) {
            obj.state = message.state;
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        return obj;
    },
    create(base) {
        return exports.ListGroupUsersRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseListGroupUsersRequest();
        message.group_id = (_a = object.group_id) !== null && _a !== void 0 ? _a : "";
        message.limit = (_b = object.limit) !== null && _b !== void 0 ? _b : undefined;
        message.state = (_c = object.state) !== null && _c !== void 0 ? _c : undefined;
        message.cursor = (_d = object.cursor) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseListChannelUsersRequest() {
    return { clan_id: "", channel_id: "", channel_type: 0, limit: undefined, state: undefined, cursor: "" };
}
exports.ListChannelUsersRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.channel_type !== 0) {
            writer.uint32(24).int32(message.channel_type);
        }
        if (message.limit !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.limit }, writer.uint32(34).fork()).ldelim();
        }
        if (message.state !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.state }, writer.uint32(42).fork()).ldelim();
        }
        if (message.cursor !== "") {
            writer.uint32(50).string(message.cursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListChannelUsersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.channel_type = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.limit = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.state = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            channel_type: isSet(object.channel_type) ? globalThis.Number(object.channel_type) : 0,
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
            state: isSet(object.state) ? Number(object.state) : undefined,
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.channel_type !== 0) {
            obj.channel_type = Math.round(message.channel_type);
        }
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        if (message.state !== undefined) {
            obj.state = message.state;
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        return obj;
    },
    create(base) {
        return exports.ListChannelUsersRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseListChannelUsersRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.channel_type = (_c = object.channel_type) !== null && _c !== void 0 ? _c : 0;
        message.limit = (_d = object.limit) !== null && _d !== void 0 ? _d : undefined;
        message.state = (_e = object.state) !== null && _e !== void 0 ? _e : undefined;
        message.cursor = (_f = object.cursor) !== null && _f !== void 0 ? _f : "";
        return message;
    },
};
function createBaseListChannelAttachmentRequest() {
    return {
        clan_id: "",
        channel_id: "",
        file_type: "",
        limit: undefined,
        state: undefined,
        before: "",
        after: "",
        around: "",
    };
}
exports.ListChannelAttachmentRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.file_type !== "") {
            writer.uint32(26).string(message.file_type);
        }
        if (message.limit !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.limit }, writer.uint32(34).fork()).ldelim();
        }
        if (message.state !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.state }, writer.uint32(42).fork()).ldelim();
        }
        if (message.before !== "") {
            writer.uint32(50).string(message.before);
        }
        if (message.after !== "") {
            writer.uint32(58).string(message.after);
        }
        if (message.around !== "") {
            writer.uint32(66).string(message.around);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListChannelAttachmentRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.file_type = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.limit = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.state = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.before = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.after = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.around = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            file_type: isSet(object.file_type) ? globalThis.String(object.file_type) : "",
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
            state: isSet(object.state) ? Number(object.state) : undefined,
            before: isSet(object.before) ? globalThis.String(object.before) : "",
            after: isSet(object.after) ? globalThis.String(object.after) : "",
            around: isSet(object.around) ? globalThis.String(object.around) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.file_type !== "") {
            obj.file_type = message.file_type;
        }
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        if (message.state !== undefined) {
            obj.state = message.state;
        }
        if (message.before !== "") {
            obj.before = message.before;
        }
        if (message.after !== "") {
            obj.after = message.after;
        }
        if (message.around !== "") {
            obj.around = message.around;
        }
        return obj;
    },
    create(base) {
        return exports.ListChannelAttachmentRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseListChannelAttachmentRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.file_type = (_c = object.file_type) !== null && _c !== void 0 ? _c : "";
        message.limit = (_d = object.limit) !== null && _d !== void 0 ? _d : undefined;
        message.state = (_e = object.state) !== null && _e !== void 0 ? _e : undefined;
        message.before = (_f = object.before) !== null && _f !== void 0 ? _f : "";
        message.after = (_g = object.after) !== null && _g !== void 0 ? _g : "";
        message.around = (_h = object.around) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseListClanUsersRequest() {
    return { clan_id: "" };
}
exports.ListClanUsersRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListClanUsersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.ListClanUsersRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListClanUsersRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseListNotificationsRequest() {
    return { limit: undefined, clan_id: "", notification_id: "", category: 0, direction: undefined };
}
exports.ListNotificationsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.limit !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.limit }, writer.uint32(10).fork()).ldelim();
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        if (message.notification_id !== "") {
            writer.uint32(26).string(message.notification_id);
        }
        if (message.category !== 0) {
            writer.uint32(32).int32(message.category);
        }
        if (message.direction !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.direction }, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListNotificationsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.limit = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.notification_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.category = reader.int32();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.direction = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            notification_id: isSet(object.notification_id) ? globalThis.String(object.notification_id) : "",
            category: isSet(object.category) ? globalThis.Number(object.category) : 0,
            direction: isSet(object.direction) ? Number(object.direction) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.notification_id !== "") {
            obj.notification_id = message.notification_id;
        }
        if (message.category !== 0) {
            obj.category = Math.round(message.category);
        }
        if (message.direction !== undefined) {
            obj.direction = message.direction;
        }
        return obj;
    },
    create(base) {
        return exports.ListNotificationsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseListNotificationsRequest();
        message.limit = (_a = object.limit) !== null && _a !== void 0 ? _a : undefined;
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        message.notification_id = (_c = object.notification_id) !== null && _c !== void 0 ? _c : "";
        message.category = (_d = object.category) !== null && _d !== void 0 ? _d : 0;
        message.direction = (_e = object.direction) !== null && _e !== void 0 ? _e : undefined;
        return message;
    },
};
function createBaseListUserGroupsRequest() {
    return { user_id: "", limit: undefined, state: undefined, cursor: "" };
}
exports.ListUserGroupsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user_id !== "") {
            writer.uint32(10).string(message.user_id);
        }
        if (message.limit !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.limit }, writer.uint32(18).fork()).ldelim();
        }
        if (message.state !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.state }, writer.uint32(26).fork()).ldelim();
        }
        if (message.cursor !== "") {
            writer.uint32(34).string(message.cursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListUserGroupsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.limit = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.state = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
            state: isSet(object.state) ? Number(object.state) : undefined,
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        if (message.state !== undefined) {
            obj.state = message.state;
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        return obj;
    },
    create(base) {
        return exports.ListUserGroupsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseListUserGroupsRequest();
        message.user_id = (_a = object.user_id) !== null && _a !== void 0 ? _a : "";
        message.limit = (_b = object.limit) !== null && _b !== void 0 ? _b : undefined;
        message.state = (_c = object.state) !== null && _c !== void 0 ? _c : undefined;
        message.cursor = (_d = object.cursor) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseNotification() {
    return {
        id: "",
        subject: "",
        content: "",
        code: 0,
        sender_id: "",
        create_time: undefined,
        persistent: false,
        clan_id: "",
        channel_id: "",
        channel_type: 0,
        avatar_url: "",
        channel: undefined,
        topic_id: "",
        category: 0,
    };
}
exports.Notification = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.subject !== "") {
            writer.uint32(18).string(message.subject);
        }
        if (message.content !== "") {
            writer.uint32(26).string(message.content);
        }
        if (message.code !== 0) {
            writer.uint32(32).int32(message.code);
        }
        if (message.sender_id !== "") {
            writer.uint32(42).string(message.sender_id);
        }
        if (message.create_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.create_time), writer.uint32(50).fork()).ldelim();
        }
        if (message.persistent !== false) {
            writer.uint32(56).bool(message.persistent);
        }
        if (message.clan_id !== "") {
            writer.uint32(66).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(74).string(message.channel_id);
        }
        if (message.channel_type !== 0) {
            writer.uint32(80).int32(message.channel_type);
        }
        if (message.avatar_url !== "") {
            writer.uint32(90).string(message.avatar_url);
        }
        if (message.channel !== undefined) {
            exports.ChannelDescription.encode(message.channel, writer.uint32(98).fork()).ldelim();
        }
        if (message.topic_id !== "") {
            writer.uint32(106).string(message.topic_id);
        }
        if (message.category !== 0) {
            writer.uint32(112).int32(message.category);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNotification();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.code = reader.int32();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.sender_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.create_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.persistent = reader.bool();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.channel_type = reader.int32();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.avatar_url = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.channel = exports.ChannelDescription.decode(reader, reader.uint32());
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.topic_id = reader.string();
                    continue;
                case 14:
                    if (tag !== 112) {
                        break;
                    }
                    message.category = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            content: isSet(object.content) ? globalThis.String(object.content) : "",
            code: isSet(object.code) ? globalThis.Number(object.code) : 0,
            sender_id: isSet(object.sender_id) ? globalThis.String(object.sender_id) : "",
            create_time: isSet(object.create_time) ? fromJsonTimestamp(object.create_time) : undefined,
            persistent: isSet(object.persistent) ? globalThis.Boolean(object.persistent) : false,
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            channel_type: isSet(object.channel_type) ? globalThis.Number(object.channel_type) : 0,
            avatar_url: isSet(object.avatar_url) ? globalThis.String(object.avatar_url) : "",
            channel: isSet(object.channel) ? exports.ChannelDescription.fromJSON(object.channel) : undefined,
            topic_id: isSet(object.topic_id) ? globalThis.String(object.topic_id) : "",
            category: isSet(object.category) ? globalThis.Number(object.category) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.content !== "") {
            obj.content = message.content;
        }
        if (message.code !== 0) {
            obj.code = Math.round(message.code);
        }
        if (message.sender_id !== "") {
            obj.sender_id = message.sender_id;
        }
        if (message.create_time !== undefined) {
            obj.create_time = message.create_time.toISOString();
        }
        if (message.persistent !== false) {
            obj.persistent = message.persistent;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.channel_type !== 0) {
            obj.channel_type = Math.round(message.channel_type);
        }
        if (message.avatar_url !== "") {
            obj.avatar_url = message.avatar_url;
        }
        if (message.channel !== undefined) {
            obj.channel = exports.ChannelDescription.toJSON(message.channel);
        }
        if (message.topic_id !== "") {
            obj.topic_id = message.topic_id;
        }
        if (message.category !== 0) {
            obj.category = Math.round(message.category);
        }
        return obj;
    },
    create(base) {
        return exports.Notification.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = createBaseNotification();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.subject = (_b = object.subject) !== null && _b !== void 0 ? _b : "";
        message.content = (_c = object.content) !== null && _c !== void 0 ? _c : "";
        message.code = (_d = object.code) !== null && _d !== void 0 ? _d : 0;
        message.sender_id = (_e = object.sender_id) !== null && _e !== void 0 ? _e : "";
        message.create_time = (_f = object.create_time) !== null && _f !== void 0 ? _f : undefined;
        message.persistent = (_g = object.persistent) !== null && _g !== void 0 ? _g : false;
        message.clan_id = (_h = object.clan_id) !== null && _h !== void 0 ? _h : "";
        message.channel_id = (_j = object.channel_id) !== null && _j !== void 0 ? _j : "";
        message.channel_type = (_k = object.channel_type) !== null && _k !== void 0 ? _k : 0;
        message.avatar_url = (_l = object.avatar_url) !== null && _l !== void 0 ? _l : "";
        message.channel = (object.channel !== undefined && object.channel !== null)
            ? exports.ChannelDescription.fromPartial(object.channel)
            : undefined;
        message.topic_id = (_m = object.topic_id) !== null && _m !== void 0 ? _m : "";
        message.category = (_o = object.category) !== null && _o !== void 0 ? _o : 0;
        return message;
    },
};
function createBaseEmojiRecent() {
    return { emoji_recents_id: "", emoji_id: "", update_time: undefined };
}
exports.EmojiRecent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.emoji_recents_id !== "") {
            writer.uint32(10).string(message.emoji_recents_id);
        }
        if (message.emoji_id !== "") {
            writer.uint32(18).string(message.emoji_id);
        }
        if (message.update_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.update_time), writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEmojiRecent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.emoji_recents_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.emoji_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.update_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            emoji_recents_id: isSet(object.emoji_recents_id) ? globalThis.String(object.emoji_recents_id) : "",
            emoji_id: isSet(object.emoji_id) ? globalThis.String(object.emoji_id) : "",
            update_time: isSet(object.update_time) ? fromJsonTimestamp(object.update_time) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.emoji_recents_id !== "") {
            obj.emoji_recents_id = message.emoji_recents_id;
        }
        if (message.emoji_id !== "") {
            obj.emoji_id = message.emoji_id;
        }
        if (message.update_time !== undefined) {
            obj.update_time = message.update_time.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.EmojiRecent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseEmojiRecent();
        message.emoji_recents_id = (_a = object.emoji_recents_id) !== null && _a !== void 0 ? _a : "";
        message.emoji_id = (_b = object.emoji_id) !== null && _b !== void 0 ? _b : "";
        message.update_time = (_c = object.update_time) !== null && _c !== void 0 ? _c : undefined;
        return message;
    },
};
function createBaseEmojiRecentList() {
    return { emoji_recents: [] };
}
exports.EmojiRecentList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.emoji_recents) {
            exports.EmojiRecent.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEmojiRecentList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.emoji_recents.push(exports.EmojiRecent.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            emoji_recents: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.emoji_recents)
                ? object.emoji_recents.map((e) => exports.EmojiRecent.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.emoji_recents) === null || _a === void 0 ? void 0 : _a.length) {
            obj.emoji_recents = message.emoji_recents.map((e) => exports.EmojiRecent.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.EmojiRecentList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEmojiRecentList();
        message.emoji_recents = ((_a = object.emoji_recents) === null || _a === void 0 ? void 0 : _a.map((e) => exports.EmojiRecent.fromPartial(e))) || [];
        return message;
    },
};
function createBaseNotificationList() {
    return { notifications: [], cacheable_cursor: "" };
}
exports.NotificationList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.notifications) {
            exports.Notification.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.cacheable_cursor !== "") {
            writer.uint32(18).string(message.cacheable_cursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNotificationList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.notifications.push(exports.Notification.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.cacheable_cursor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            notifications: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.notifications)
                ? object.notifications.map((e) => exports.Notification.fromJSON(e))
                : [],
            cacheable_cursor: isSet(object.cacheable_cursor) ? globalThis.String(object.cacheable_cursor) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.notifications) === null || _a === void 0 ? void 0 : _a.length) {
            obj.notifications = message.notifications.map((e) => exports.Notification.toJSON(e));
        }
        if (message.cacheable_cursor !== "") {
            obj.cacheable_cursor = message.cacheable_cursor;
        }
        return obj;
    },
    create(base) {
        return exports.NotificationList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseNotificationList();
        message.notifications = ((_a = object.notifications) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Notification.fromPartial(e))) || [];
        message.cacheable_cursor = (_b = object.cacheable_cursor) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBasePromoteGroupUsersRequest() {
    return { group_id: "", user_ids: [] };
}
exports.PromoteGroupUsersRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.group_id !== "") {
            writer.uint32(10).string(message.group_id);
        }
        for (const v of message.user_ids) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePromoteGroupUsersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.group_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user_ids.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            group_id: isSet(object.group_id) ? globalThis.String(object.group_id) : "",
            user_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_ids) ? object.user_ids.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.group_id !== "") {
            obj.group_id = message.group_id;
        }
        if ((_a = message.user_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.user_ids = message.user_ids;
        }
        return obj;
    },
    create(base) {
        return exports.PromoteGroupUsersRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBasePromoteGroupUsersRequest();
        message.group_id = (_a = object.group_id) !== null && _a !== void 0 ? _a : "";
        message.user_ids = ((_b = object.user_ids) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseDemoteGroupUsersRequest() {
    return { group_id: "", user_ids: [] };
}
exports.DemoteGroupUsersRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.group_id !== "") {
            writer.uint32(10).string(message.group_id);
        }
        for (const v of message.user_ids) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDemoteGroupUsersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.group_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user_ids.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            group_id: isSet(object.group_id) ? globalThis.String(object.group_id) : "",
            user_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_ids) ? object.user_ids.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.group_id !== "") {
            obj.group_id = message.group_id;
        }
        if ((_a = message.user_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.user_ids = message.user_ids;
        }
        return obj;
    },
    create(base) {
        return exports.DemoteGroupUsersRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseDemoteGroupUsersRequest();
        message.group_id = (_a = object.group_id) !== null && _a !== void 0 ? _a : "";
        message.user_ids = ((_b = object.user_ids) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseRpc() {
    return { id: "", payload: "", http_key: "" };
}
exports.Rpc = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.payload !== "") {
            writer.uint32(18).string(message.payload);
        }
        if (message.http_key !== "") {
            writer.uint32(26).string(message.http_key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRpc();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.payload = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.http_key = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            payload: isSet(object.payload) ? globalThis.String(object.payload) : "",
            http_key: isSet(object.http_key) ? globalThis.String(object.http_key) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.payload !== "") {
            obj.payload = message.payload;
        }
        if (message.http_key !== "") {
            obj.http_key = message.http_key;
        }
        return obj;
    },
    create(base) {
        return exports.Rpc.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseRpc();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.payload = (_b = object.payload) !== null && _b !== void 0 ? _b : "";
        message.http_key = (_c = object.http_key) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseSession() {
    return { created: false, token: "", refresh_token: "", user_id: "", is_remember: false };
}
exports.Session = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.created !== false) {
            writer.uint32(8).bool(message.created);
        }
        if (message.token !== "") {
            writer.uint32(18).string(message.token);
        }
        if (message.refresh_token !== "") {
            writer.uint32(26).string(message.refresh_token);
        }
        if (message.user_id !== "") {
            writer.uint32(34).string(message.user_id);
        }
        if (message.is_remember !== false) {
            writer.uint32(40).bool(message.is_remember);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSession();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.created = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.refresh_token = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.is_remember = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            created: isSet(object.created) ? globalThis.Boolean(object.created) : false,
            token: isSet(object.token) ? globalThis.String(object.token) : "",
            refresh_token: isSet(object.refresh_token) ? globalThis.String(object.refresh_token) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            is_remember: isSet(object.is_remember) ? globalThis.Boolean(object.is_remember) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.created !== false) {
            obj.created = message.created;
        }
        if (message.token !== "") {
            obj.token = message.token;
        }
        if (message.refresh_token !== "") {
            obj.refresh_token = message.refresh_token;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.is_remember !== false) {
            obj.is_remember = message.is_remember;
        }
        return obj;
    },
    create(base) {
        return exports.Session.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseSession();
        message.created = (_a = object.created) !== null && _a !== void 0 ? _a : false;
        message.token = (_b = object.token) !== null && _b !== void 0 ? _b : "";
        message.refresh_token = (_c = object.refresh_token) !== null && _c !== void 0 ? _c : "";
        message.user_id = (_d = object.user_id) !== null && _d !== void 0 ? _d : "";
        message.is_remember = (_e = object.is_remember) !== null && _e !== void 0 ? _e : false;
        return message;
    },
};
function createBaseUpdateAccountRequest() {
    return {
        username: undefined,
        display_name: undefined,
        avatar_url: undefined,
        lang_tag: undefined,
        location: undefined,
        timezone: undefined,
        about_me: "",
        dob: undefined,
        logo: "",
        splash_screen: "",
        encrypt_private_key: "",
    };
}
exports.UpdateAccountRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.username !== undefined) {
            wrappers_1.StringValue.encode({ value: message.username }, writer.uint32(10).fork()).ldelim();
        }
        if (message.display_name !== undefined) {
            wrappers_1.StringValue.encode({ value: message.display_name }, writer.uint32(18).fork()).ldelim();
        }
        if (message.avatar_url !== undefined) {
            wrappers_1.StringValue.encode({ value: message.avatar_url }, writer.uint32(26).fork()).ldelim();
        }
        if (message.lang_tag !== undefined) {
            wrappers_1.StringValue.encode({ value: message.lang_tag }, writer.uint32(34).fork()).ldelim();
        }
        if (message.location !== undefined) {
            wrappers_1.StringValue.encode({ value: message.location }, writer.uint32(42).fork()).ldelim();
        }
        if (message.timezone !== undefined) {
            wrappers_1.StringValue.encode({ value: message.timezone }, writer.uint32(50).fork()).ldelim();
        }
        if (message.about_me !== "") {
            writer.uint32(58).string(message.about_me);
        }
        if (message.dob !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.dob), writer.uint32(66).fork()).ldelim();
        }
        if (message.logo !== "") {
            writer.uint32(74).string(message.logo);
        }
        if (message.splash_screen !== "") {
            writer.uint32(82).string(message.splash_screen);
        }
        if (message.encrypt_private_key !== "") {
            writer.uint32(90).string(message.encrypt_private_key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateAccountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.username = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.display_name = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.avatar_url = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.lang_tag = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.location = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.timezone = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.about_me = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.dob = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.logo = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.splash_screen = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.encrypt_private_key = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            username: isSet(object.username) ? String(object.username) : undefined,
            display_name: isSet(object.display_name) ? String(object.display_name) : undefined,
            avatar_url: isSet(object.avatar_url) ? String(object.avatar_url) : undefined,
            lang_tag: isSet(object.lang_tag) ? String(object.lang_tag) : undefined,
            location: isSet(object.location) ? String(object.location) : undefined,
            timezone: isSet(object.timezone) ? String(object.timezone) : undefined,
            about_me: isSet(object.about_me) ? globalThis.String(object.about_me) : "",
            dob: isSet(object.dob) ? fromJsonTimestamp(object.dob) : undefined,
            logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
            splash_screen: isSet(object.splash_screen) ? globalThis.String(object.splash_screen) : "",
            encrypt_private_key: isSet(object.encrypt_private_key) ? globalThis.String(object.encrypt_private_key) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.username !== undefined) {
            obj.username = message.username;
        }
        if (message.display_name !== undefined) {
            obj.display_name = message.display_name;
        }
        if (message.avatar_url !== undefined) {
            obj.avatar_url = message.avatar_url;
        }
        if (message.lang_tag !== undefined) {
            obj.lang_tag = message.lang_tag;
        }
        if (message.location !== undefined) {
            obj.location = message.location;
        }
        if (message.timezone !== undefined) {
            obj.timezone = message.timezone;
        }
        if (message.about_me !== "") {
            obj.about_me = message.about_me;
        }
        if (message.dob !== undefined) {
            obj.dob = message.dob.toISOString();
        }
        if (message.logo !== "") {
            obj.logo = message.logo;
        }
        if (message.splash_screen !== "") {
            obj.splash_screen = message.splash_screen;
        }
        if (message.encrypt_private_key !== "") {
            obj.encrypt_private_key = message.encrypt_private_key;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateAccountRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseUpdateAccountRequest();
        message.username = (_a = object.username) !== null && _a !== void 0 ? _a : undefined;
        message.display_name = (_b = object.display_name) !== null && _b !== void 0 ? _b : undefined;
        message.avatar_url = (_c = object.avatar_url) !== null && _c !== void 0 ? _c : undefined;
        message.lang_tag = (_d = object.lang_tag) !== null && _d !== void 0 ? _d : undefined;
        message.location = (_e = object.location) !== null && _e !== void 0 ? _e : undefined;
        message.timezone = (_f = object.timezone) !== null && _f !== void 0 ? _f : undefined;
        message.about_me = (_g = object.about_me) !== null && _g !== void 0 ? _g : "";
        message.dob = (_h = object.dob) !== null && _h !== void 0 ? _h : undefined;
        message.logo = (_j = object.logo) !== null && _j !== void 0 ? _j : "";
        message.splash_screen = (_k = object.splash_screen) !== null && _k !== void 0 ? _k : "";
        message.encrypt_private_key = (_l = object.encrypt_private_key) !== null && _l !== void 0 ? _l : "";
        return message;
    },
};
function createBaseUpdateGroupRequest() {
    return {
        group_id: "",
        name: undefined,
        description: undefined,
        lang_tag: undefined,
        avatar_url: undefined,
        open: undefined,
    };
}
exports.UpdateGroupRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.group_id !== "") {
            writer.uint32(10).string(message.group_id);
        }
        if (message.name !== undefined) {
            wrappers_1.StringValue.encode({ value: message.name }, writer.uint32(18).fork()).ldelim();
        }
        if (message.description !== undefined) {
            wrappers_1.StringValue.encode({ value: message.description }, writer.uint32(26).fork()).ldelim();
        }
        if (message.lang_tag !== undefined) {
            wrappers_1.StringValue.encode({ value: message.lang_tag }, writer.uint32(34).fork()).ldelim();
        }
        if (message.avatar_url !== undefined) {
            wrappers_1.StringValue.encode({ value: message.avatar_url }, writer.uint32(42).fork()).ldelim();
        }
        if (message.open !== undefined) {
            wrappers_1.BoolValue.encode({ value: message.open }, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGroupRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.group_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.lang_tag = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.avatar_url = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.open = wrappers_1.BoolValue.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            group_id: isSet(object.group_id) ? globalThis.String(object.group_id) : "",
            name: isSet(object.name) ? String(object.name) : undefined,
            description: isSet(object.description) ? String(object.description) : undefined,
            lang_tag: isSet(object.lang_tag) ? String(object.lang_tag) : undefined,
            avatar_url: isSet(object.avatar_url) ? String(object.avatar_url) : undefined,
            open: isSet(object.open) ? Boolean(object.open) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.group_id !== "") {
            obj.group_id = message.group_id;
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.description !== undefined) {
            obj.description = message.description;
        }
        if (message.lang_tag !== undefined) {
            obj.lang_tag = message.lang_tag;
        }
        if (message.avatar_url !== undefined) {
            obj.avatar_url = message.avatar_url;
        }
        if (message.open !== undefined) {
            obj.open = message.open;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateGroupRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseUpdateGroupRequest();
        message.group_id = (_a = object.group_id) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : undefined;
        message.description = (_c = object.description) !== null && _c !== void 0 ? _c : undefined;
        message.lang_tag = (_d = object.lang_tag) !== null && _d !== void 0 ? _d : undefined;
        message.avatar_url = (_e = object.avatar_url) !== null && _e !== void 0 ? _e : undefined;
        message.open = (_f = object.open) !== null && _f !== void 0 ? _f : undefined;
        return message;
    },
};
function createBaseUpdateCategoryDescRequest() {
    return { category_id: "", category_name: "", clan_id: "" };
}
exports.UpdateCategoryDescRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.category_id !== "") {
            writer.uint32(10).string(message.category_id);
        }
        if (message.category_name !== "") {
            writer.uint32(18).string(message.category_name);
        }
        if (message.clan_id !== "") {
            writer.uint32(26).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateCategoryDescRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.category_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.category_name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            category_id: isSet(object.category_id) ? globalThis.String(object.category_id) : "",
            category_name: isSet(object.category_name) ? globalThis.String(object.category_name) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.category_id !== "") {
            obj.category_id = message.category_id;
        }
        if (message.category_name !== "") {
            obj.category_name = message.category_name;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateCategoryDescRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseUpdateCategoryDescRequest();
        message.category_id = (_a = object.category_id) !== null && _a !== void 0 ? _a : "";
        message.category_name = (_b = object.category_name) !== null && _b !== void 0 ? _b : "";
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseUser() {
    return {
        id: "",
        username: "",
        display_name: "",
        avatar_url: "",
        lang_tag: "",
        location: "",
        timezone: "",
        metadata: "",
        facebook_id: "",
        google_id: "",
        gamecenter_id: "",
        steam_id: "",
        online: false,
        edge_count: 0,
        create_time: undefined,
        update_time: undefined,
        apple_id: "",
        about_me: "",
        join_time: undefined,
        is_mobile: false,
        dob: undefined,
        mezon_id: "",
    };
}
exports.User = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.username !== "") {
            writer.uint32(18).string(message.username);
        }
        if (message.display_name !== "") {
            writer.uint32(26).string(message.display_name);
        }
        if (message.avatar_url !== "") {
            writer.uint32(34).string(message.avatar_url);
        }
        if (message.lang_tag !== "") {
            writer.uint32(42).string(message.lang_tag);
        }
        if (message.location !== "") {
            writer.uint32(50).string(message.location);
        }
        if (message.timezone !== "") {
            writer.uint32(58).string(message.timezone);
        }
        if (message.metadata !== "") {
            writer.uint32(66).string(message.metadata);
        }
        if (message.facebook_id !== "") {
            writer.uint32(74).string(message.facebook_id);
        }
        if (message.google_id !== "") {
            writer.uint32(82).string(message.google_id);
        }
        if (message.gamecenter_id !== "") {
            writer.uint32(90).string(message.gamecenter_id);
        }
        if (message.steam_id !== "") {
            writer.uint32(98).string(message.steam_id);
        }
        if (message.online !== false) {
            writer.uint32(104).bool(message.online);
        }
        if (message.edge_count !== 0) {
            writer.uint32(112).int32(message.edge_count);
        }
        if (message.create_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.create_time), writer.uint32(122).fork()).ldelim();
        }
        if (message.update_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.update_time), writer.uint32(130).fork()).ldelim();
        }
        if (message.apple_id !== "") {
            writer.uint32(138).string(message.apple_id);
        }
        if (message.about_me !== "") {
            writer.uint32(146).string(message.about_me);
        }
        if (message.join_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.join_time), writer.uint32(154).fork()).ldelim();
        }
        if (message.is_mobile !== false) {
            writer.uint32(160).bool(message.is_mobile);
        }
        if (message.dob !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.dob), writer.uint32(170).fork()).ldelim();
        }
        if (message.mezon_id !== "") {
            writer.uint32(178).string(message.mezon_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.display_name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.avatar_url = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.lang_tag = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.location = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.timezone = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.metadata = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.facebook_id = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.google_id = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.gamecenter_id = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.steam_id = reader.string();
                    continue;
                case 13:
                    if (tag !== 104) {
                        break;
                    }
                    message.online = reader.bool();
                    continue;
                case 14:
                    if (tag !== 112) {
                        break;
                    }
                    message.edge_count = reader.int32();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.create_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.update_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 17:
                    if (tag !== 138) {
                        break;
                    }
                    message.apple_id = reader.string();
                    continue;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    message.about_me = reader.string();
                    continue;
                case 19:
                    if (tag !== 154) {
                        break;
                    }
                    message.join_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 20:
                    if (tag !== 160) {
                        break;
                    }
                    message.is_mobile = reader.bool();
                    continue;
                case 21:
                    if (tag !== 170) {
                        break;
                    }
                    message.dob = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 22:
                    if (tag !== 178) {
                        break;
                    }
                    message.mezon_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            display_name: isSet(object.display_name) ? globalThis.String(object.display_name) : "",
            avatar_url: isSet(object.avatar_url) ? globalThis.String(object.avatar_url) : "",
            lang_tag: isSet(object.lang_tag) ? globalThis.String(object.lang_tag) : "",
            location: isSet(object.location) ? globalThis.String(object.location) : "",
            timezone: isSet(object.timezone) ? globalThis.String(object.timezone) : "",
            metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
            facebook_id: isSet(object.facebook_id) ? globalThis.String(object.facebook_id) : "",
            google_id: isSet(object.google_id) ? globalThis.String(object.google_id) : "",
            gamecenter_id: isSet(object.gamecenter_id) ? globalThis.String(object.gamecenter_id) : "",
            steam_id: isSet(object.steam_id) ? globalThis.String(object.steam_id) : "",
            online: isSet(object.online) ? globalThis.Boolean(object.online) : false,
            edge_count: isSet(object.edge_count) ? globalThis.Number(object.edge_count) : 0,
            create_time: isSet(object.create_time) ? fromJsonTimestamp(object.create_time) : undefined,
            update_time: isSet(object.update_time) ? fromJsonTimestamp(object.update_time) : undefined,
            apple_id: isSet(object.apple_id) ? globalThis.String(object.apple_id) : "",
            about_me: isSet(object.about_me) ? globalThis.String(object.about_me) : "",
            join_time: isSet(object.join_time) ? fromJsonTimestamp(object.join_time) : undefined,
            is_mobile: isSet(object.is_mobile) ? globalThis.Boolean(object.is_mobile) : false,
            dob: isSet(object.dob) ? fromJsonTimestamp(object.dob) : undefined,
            mezon_id: isSet(object.mezon_id) ? globalThis.String(object.mezon_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.display_name !== "") {
            obj.display_name = message.display_name;
        }
        if (message.avatar_url !== "") {
            obj.avatar_url = message.avatar_url;
        }
        if (message.lang_tag !== "") {
            obj.lang_tag = message.lang_tag;
        }
        if (message.location !== "") {
            obj.location = message.location;
        }
        if (message.timezone !== "") {
            obj.timezone = message.timezone;
        }
        if (message.metadata !== "") {
            obj.metadata = message.metadata;
        }
        if (message.facebook_id !== "") {
            obj.facebook_id = message.facebook_id;
        }
        if (message.google_id !== "") {
            obj.google_id = message.google_id;
        }
        if (message.gamecenter_id !== "") {
            obj.gamecenter_id = message.gamecenter_id;
        }
        if (message.steam_id !== "") {
            obj.steam_id = message.steam_id;
        }
        if (message.online !== false) {
            obj.online = message.online;
        }
        if (message.edge_count !== 0) {
            obj.edge_count = Math.round(message.edge_count);
        }
        if (message.create_time !== undefined) {
            obj.create_time = message.create_time.toISOString();
        }
        if (message.update_time !== undefined) {
            obj.update_time = message.update_time.toISOString();
        }
        if (message.apple_id !== "") {
            obj.apple_id = message.apple_id;
        }
        if (message.about_me !== "") {
            obj.about_me = message.about_me;
        }
        if (message.join_time !== undefined) {
            obj.join_time = message.join_time.toISOString();
        }
        if (message.is_mobile !== false) {
            obj.is_mobile = message.is_mobile;
        }
        if (message.dob !== undefined) {
            obj.dob = message.dob.toISOString();
        }
        if (message.mezon_id !== "") {
            obj.mezon_id = message.mezon_id;
        }
        return obj;
    },
    create(base) {
        return exports.User.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
        const message = createBaseUser();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.username = (_b = object.username) !== null && _b !== void 0 ? _b : "";
        message.display_name = (_c = object.display_name) !== null && _c !== void 0 ? _c : "";
        message.avatar_url = (_d = object.avatar_url) !== null && _d !== void 0 ? _d : "";
        message.lang_tag = (_e = object.lang_tag) !== null && _e !== void 0 ? _e : "";
        message.location = (_f = object.location) !== null && _f !== void 0 ? _f : "";
        message.timezone = (_g = object.timezone) !== null && _g !== void 0 ? _g : "";
        message.metadata = (_h = object.metadata) !== null && _h !== void 0 ? _h : "";
        message.facebook_id = (_j = object.facebook_id) !== null && _j !== void 0 ? _j : "";
        message.google_id = (_k = object.google_id) !== null && _k !== void 0 ? _k : "";
        message.gamecenter_id = (_l = object.gamecenter_id) !== null && _l !== void 0 ? _l : "";
        message.steam_id = (_m = object.steam_id) !== null && _m !== void 0 ? _m : "";
        message.online = (_o = object.online) !== null && _o !== void 0 ? _o : false;
        message.edge_count = (_p = object.edge_count) !== null && _p !== void 0 ? _p : 0;
        message.create_time = (_q = object.create_time) !== null && _q !== void 0 ? _q : undefined;
        message.update_time = (_r = object.update_time) !== null && _r !== void 0 ? _r : undefined;
        message.apple_id = (_s = object.apple_id) !== null && _s !== void 0 ? _s : "";
        message.about_me = (_t = object.about_me) !== null && _t !== void 0 ? _t : "";
        message.join_time = (_u = object.join_time) !== null && _u !== void 0 ? _u : undefined;
        message.is_mobile = (_v = object.is_mobile) !== null && _v !== void 0 ? _v : false;
        message.dob = (_w = object.dob) !== null && _w !== void 0 ? _w : undefined;
        message.mezon_id = (_x = object.mezon_id) !== null && _x !== void 0 ? _x : "";
        return message;
    },
};
function createBaseUserGroupList() {
    return { user_groups: [], cursor: "" };
}
exports.UserGroupList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.user_groups) {
            exports.UserGroupList_UserGroup.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.cursor !== "") {
            writer.uint32(18).string(message.cursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserGroupList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user_groups.push(exports.UserGroupList_UserGroup.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user_groups: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_groups)
                ? object.user_groups.map((e) => exports.UserGroupList_UserGroup.fromJSON(e))
                : [],
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.user_groups) === null || _a === void 0 ? void 0 : _a.length) {
            obj.user_groups = message.user_groups.map((e) => exports.UserGroupList_UserGroup.toJSON(e));
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        return obj;
    },
    create(base) {
        return exports.UserGroupList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUserGroupList();
        message.user_groups = ((_a = object.user_groups) === null || _a === void 0 ? void 0 : _a.map((e) => exports.UserGroupList_UserGroup.fromPartial(e))) || [];
        message.cursor = (_b = object.cursor) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseUserGroupList_UserGroup() {
    return { group: undefined, state: undefined };
}
exports.UserGroupList_UserGroup = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.group !== undefined) {
            exports.Group.encode(message.group, writer.uint32(10).fork()).ldelim();
        }
        if (message.state !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.state }, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserGroupList_UserGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.group = exports.Group.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.state = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            group: isSet(object.group) ? exports.Group.fromJSON(object.group) : undefined,
            state: isSet(object.state) ? Number(object.state) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.group !== undefined) {
            obj.group = exports.Group.toJSON(message.group);
        }
        if (message.state !== undefined) {
            obj.state = message.state;
        }
        return obj;
    },
    create(base) {
        return exports.UserGroupList_UserGroup.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUserGroupList_UserGroup();
        message.group = (object.group !== undefined && object.group !== null) ? exports.Group.fromPartial(object.group) : undefined;
        message.state = (_a = object.state) !== null && _a !== void 0 ? _a : undefined;
        return message;
    },
};
function createBaseUsers() {
    return { users: [] };
}
exports.Users = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.users) {
            exports.User.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUsers();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.users.push(exports.User.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { users: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.users) ? object.users.map((e) => exports.User.fromJSON(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.users) === null || _a === void 0 ? void 0 : _a.length) {
            obj.users = message.users.map((e) => exports.User.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Users.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUsers();
        message.users = ((_a = object.users) === null || _a === void 0 ? void 0 : _a.map((e) => exports.User.fromPartial(e))) || [];
        return message;
    },
};
function createBaseClanDescProfile() {
    return { clan_id: "", creator_id: "", nick_name: "", profile_banner: "", profile_theme: "", avatar_url: "" };
}
exports.ClanDescProfile = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.creator_id !== "") {
            writer.uint32(18).string(message.creator_id);
        }
        if (message.nick_name !== "") {
            writer.uint32(26).string(message.nick_name);
        }
        if (message.profile_banner !== "") {
            writer.uint32(34).string(message.profile_banner);
        }
        if (message.profile_theme !== "") {
            writer.uint32(42).string(message.profile_theme);
        }
        if (message.avatar_url !== "") {
            writer.uint32(50).string(message.avatar_url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanDescProfile();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.nick_name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.profile_banner = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.profile_theme = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.avatar_url = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            nick_name: isSet(object.nick_name) ? globalThis.String(object.nick_name) : "",
            profile_banner: isSet(object.profile_banner) ? globalThis.String(object.profile_banner) : "",
            profile_theme: isSet(object.profile_theme) ? globalThis.String(object.profile_theme) : "",
            avatar_url: isSet(object.avatar_url) ? globalThis.String(object.avatar_url) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.nick_name !== "") {
            obj.nick_name = message.nick_name;
        }
        if (message.profile_banner !== "") {
            obj.profile_banner = message.profile_banner;
        }
        if (message.profile_theme !== "") {
            obj.profile_theme = message.profile_theme;
        }
        if (message.avatar_url !== "") {
            obj.avatar_url = message.avatar_url;
        }
        return obj;
    },
    create(base) {
        return exports.ClanDescProfile.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseClanDescProfile();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.creator_id = (_b = object.creator_id) !== null && _b !== void 0 ? _b : "";
        message.nick_name = (_c = object.nick_name) !== null && _c !== void 0 ? _c : "";
        message.profile_banner = (_d = object.profile_banner) !== null && _d !== void 0 ? _d : "";
        message.profile_theme = (_e = object.profile_theme) !== null && _e !== void 0 ? _e : "";
        message.avatar_url = (_f = object.avatar_url) !== null && _f !== void 0 ? _f : "";
        return message;
    },
};
function createBaseUpdateClanDescProfileRequest() {
    return { clan_id: "", nick_name: "", profile_banner: "", profile_theme: "", avatar_url: "" };
}
exports.UpdateClanDescProfileRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.nick_name !== "") {
            writer.uint32(18).string(message.nick_name);
        }
        if (message.profile_banner !== "") {
            writer.uint32(26).string(message.profile_banner);
        }
        if (message.profile_theme !== "") {
            writer.uint32(34).string(message.profile_theme);
        }
        if (message.avatar_url !== "") {
            writer.uint32(42).string(message.avatar_url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateClanDescProfileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.nick_name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.profile_banner = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.profile_theme = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.avatar_url = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            nick_name: isSet(object.nick_name) ? globalThis.String(object.nick_name) : "",
            profile_banner: isSet(object.profile_banner) ? globalThis.String(object.profile_banner) : "",
            profile_theme: isSet(object.profile_theme) ? globalThis.String(object.profile_theme) : "",
            avatar_url: isSet(object.avatar_url) ? globalThis.String(object.avatar_url) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.nick_name !== "") {
            obj.nick_name = message.nick_name;
        }
        if (message.profile_banner !== "") {
            obj.profile_banner = message.profile_banner;
        }
        if (message.profile_theme !== "") {
            obj.profile_theme = message.profile_theme;
        }
        if (message.avatar_url !== "") {
            obj.avatar_url = message.avatar_url;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateClanDescProfileRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseUpdateClanDescProfileRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.nick_name = (_b = object.nick_name) !== null && _b !== void 0 ? _b : "";
        message.profile_banner = (_c = object.profile_banner) !== null && _c !== void 0 ? _c : "";
        message.profile_theme = (_d = object.profile_theme) !== null && _d !== void 0 ? _d : "";
        message.avatar_url = (_e = object.avatar_url) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseClanDescProfileRequest() {
    return { clan_id: "" };
}
exports.ClanDescProfileRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanDescProfileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.ClanDescProfileRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseClanDescProfileRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseClanDesc() {
    return {
        creator_id: "",
        clan_name: "",
        logo: "",
        banner: "",
        clan_id: "",
        status: 0,
        badge_count: 0,
        is_onboarding: false,
        welcome_channel_id: "",
        onboarding_banner: "",
        clan_order: 0,
    };
}
exports.ClanDesc = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.creator_id !== "") {
            writer.uint32(10).string(message.creator_id);
        }
        if (message.clan_name !== "") {
            writer.uint32(18).string(message.clan_name);
        }
        if (message.logo !== "") {
            writer.uint32(26).string(message.logo);
        }
        if (message.banner !== "") {
            writer.uint32(34).string(message.banner);
        }
        if (message.clan_id !== "") {
            writer.uint32(42).string(message.clan_id);
        }
        if (message.status !== 0) {
            writer.uint32(48).int32(message.status);
        }
        if (message.badge_count !== 0) {
            writer.uint32(56).int32(message.badge_count);
        }
        if (message.is_onboarding !== false) {
            writer.uint32(64).bool(message.is_onboarding);
        }
        if (message.welcome_channel_id !== "") {
            writer.uint32(74).string(message.welcome_channel_id);
        }
        if (message.onboarding_banner !== "") {
            writer.uint32(82).string(message.onboarding_banner);
        }
        if (message.clan_order !== 0) {
            writer.uint32(88).int32(message.clan_order);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanDesc();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.logo = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.banner = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.badge_count = reader.int32();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.is_onboarding = reader.bool();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.welcome_channel_id = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.onboarding_banner = reader.string();
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.clan_order = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
            logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
            banner: isSet(object.banner) ? globalThis.String(object.banner) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            status: isSet(object.status) ? globalThis.Number(object.status) : 0,
            badge_count: isSet(object.badge_count) ? globalThis.Number(object.badge_count) : 0,
            is_onboarding: isSet(object.is_onboarding) ? globalThis.Boolean(object.is_onboarding) : false,
            welcome_channel_id: isSet(object.welcome_channel_id) ? globalThis.String(object.welcome_channel_id) : "",
            onboarding_banner: isSet(object.onboarding_banner) ? globalThis.String(object.onboarding_banner) : "",
            clan_order: isSet(object.clan_order) ? globalThis.Number(object.clan_order) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.clan_name !== "") {
            obj.clan_name = message.clan_name;
        }
        if (message.logo !== "") {
            obj.logo = message.logo;
        }
        if (message.banner !== "") {
            obj.banner = message.banner;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.status !== 0) {
            obj.status = Math.round(message.status);
        }
        if (message.badge_count !== 0) {
            obj.badge_count = Math.round(message.badge_count);
        }
        if (message.is_onboarding !== false) {
            obj.is_onboarding = message.is_onboarding;
        }
        if (message.welcome_channel_id !== "") {
            obj.welcome_channel_id = message.welcome_channel_id;
        }
        if (message.onboarding_banner !== "") {
            obj.onboarding_banner = message.onboarding_banner;
        }
        if (message.clan_order !== 0) {
            obj.clan_order = Math.round(message.clan_order);
        }
        return obj;
    },
    create(base) {
        return exports.ClanDesc.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseClanDesc();
        message.creator_id = (_a = object.creator_id) !== null && _a !== void 0 ? _a : "";
        message.clan_name = (_b = object.clan_name) !== null && _b !== void 0 ? _b : "";
        message.logo = (_c = object.logo) !== null && _c !== void 0 ? _c : "";
        message.banner = (_d = object.banner) !== null && _d !== void 0 ? _d : "";
        message.clan_id = (_e = object.clan_id) !== null && _e !== void 0 ? _e : "";
        message.status = (_f = object.status) !== null && _f !== void 0 ? _f : 0;
        message.badge_count = (_g = object.badge_count) !== null && _g !== void 0 ? _g : 0;
        message.is_onboarding = (_h = object.is_onboarding) !== null && _h !== void 0 ? _h : false;
        message.welcome_channel_id = (_j = object.welcome_channel_id) !== null && _j !== void 0 ? _j : "";
        message.onboarding_banner = (_k = object.onboarding_banner) !== null && _k !== void 0 ? _k : "";
        message.clan_order = (_l = object.clan_order) !== null && _l !== void 0 ? _l : 0;
        return message;
    },
};
function createBaseCreateClanDescRequest() {
    return { clan_name: "", logo: "", banner: "" };
}
exports.CreateClanDescRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_name !== "") {
            writer.uint32(10).string(message.clan_name);
        }
        if (message.logo !== "") {
            writer.uint32(18).string(message.logo);
        }
        if (message.banner !== "") {
            writer.uint32(26).string(message.banner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateClanDescRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.logo = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.banner = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
            logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
            banner: isSet(object.banner) ? globalThis.String(object.banner) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_name !== "") {
            obj.clan_name = message.clan_name;
        }
        if (message.logo !== "") {
            obj.logo = message.logo;
        }
        if (message.banner !== "") {
            obj.banner = message.banner;
        }
        return obj;
    },
    create(base) {
        return exports.CreateClanDescRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseCreateClanDescRequest();
        message.clan_name = (_a = object.clan_name) !== null && _a !== void 0 ? _a : "";
        message.logo = (_b = object.logo) !== null && _b !== void 0 ? _b : "";
        message.banner = (_c = object.banner) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseUpdateClanDescRequest() {
    return {
        clan_id: "",
        clan_name: "",
        logo: "",
        banner: "",
        status: 0,
        is_onboarding: undefined,
        welcome_channel_id: "",
        onboarding_banner: "",
    };
}
exports.UpdateClanDescRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.clan_name !== "") {
            writer.uint32(18).string(message.clan_name);
        }
        if (message.logo !== "") {
            writer.uint32(26).string(message.logo);
        }
        if (message.banner !== "") {
            writer.uint32(34).string(message.banner);
        }
        if (message.status !== 0) {
            writer.uint32(40).int32(message.status);
        }
        if (message.is_onboarding !== undefined) {
            wrappers_1.BoolValue.encode({ value: message.is_onboarding }, writer.uint32(50).fork()).ldelim();
        }
        if (message.welcome_channel_id !== "") {
            writer.uint32(58).string(message.welcome_channel_id);
        }
        if (message.onboarding_banner !== "") {
            writer.uint32(66).string(message.onboarding_banner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateClanDescRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.logo = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.banner = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.is_onboarding = wrappers_1.BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.welcome_channel_id = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.onboarding_banner = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
            logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
            banner: isSet(object.banner) ? globalThis.String(object.banner) : "",
            status: isSet(object.status) ? globalThis.Number(object.status) : 0,
            is_onboarding: isSet(object.is_onboarding) ? Boolean(object.is_onboarding) : undefined,
            welcome_channel_id: isSet(object.welcome_channel_id) ? globalThis.String(object.welcome_channel_id) : "",
            onboarding_banner: isSet(object.onboarding_banner) ? globalThis.String(object.onboarding_banner) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.clan_name !== "") {
            obj.clan_name = message.clan_name;
        }
        if (message.logo !== "") {
            obj.logo = message.logo;
        }
        if (message.banner !== "") {
            obj.banner = message.banner;
        }
        if (message.status !== 0) {
            obj.status = Math.round(message.status);
        }
        if (message.is_onboarding !== undefined) {
            obj.is_onboarding = message.is_onboarding;
        }
        if (message.welcome_channel_id !== "") {
            obj.welcome_channel_id = message.welcome_channel_id;
        }
        if (message.onboarding_banner !== "") {
            obj.onboarding_banner = message.onboarding_banner;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateClanDescRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseUpdateClanDescRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.clan_name = (_b = object.clan_name) !== null && _b !== void 0 ? _b : "";
        message.logo = (_c = object.logo) !== null && _c !== void 0 ? _c : "";
        message.banner = (_d = object.banner) !== null && _d !== void 0 ? _d : "";
        message.status = (_e = object.status) !== null && _e !== void 0 ? _e : 0;
        message.is_onboarding = (_f = object.is_onboarding) !== null && _f !== void 0 ? _f : undefined;
        message.welcome_channel_id = (_g = object.welcome_channel_id) !== null && _g !== void 0 ? _g : "";
        message.onboarding_banner = (_h = object.onboarding_banner) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseDeleteClanDescRequest() {
    return { clan_desc_id: "" };
}
exports.DeleteClanDescRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_desc_id !== "") {
            writer.uint32(10).string(message.clan_desc_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteClanDescRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_desc_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clan_desc_id: isSet(object.clan_desc_id) ? globalThis.String(object.clan_desc_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_desc_id !== "") {
            obj.clan_desc_id = message.clan_desc_id;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteClanDescRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDeleteClanDescRequest();
        message.clan_desc_id = (_a = object.clan_desc_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseListClanDescRequest() {
    return { limit: undefined, state: undefined, cursor: "" };
}
exports.ListClanDescRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.limit !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.limit }, writer.uint32(10).fork()).ldelim();
        }
        if (message.state !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.state }, writer.uint32(18).fork()).ldelim();
        }
        if (message.cursor !== "") {
            writer.uint32(26).string(message.cursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListClanDescRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.limit = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.state = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
            state: isSet(object.state) ? Number(object.state) : undefined,
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        if (message.state !== undefined) {
            obj.state = message.state;
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        return obj;
    },
    create(base) {
        return exports.ListClanDescRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseListClanDescRequest();
        message.limit = (_a = object.limit) !== null && _a !== void 0 ? _a : undefined;
        message.state = (_b = object.state) !== null && _b !== void 0 ? _b : undefined;
        message.cursor = (_c = object.cursor) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseClanDescList() {
    return { clandesc: [] };
}
exports.ClanDescList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.clandesc) {
            exports.ClanDesc.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanDescList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clandesc.push(exports.ClanDesc.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clandesc: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.clandesc) ? object.clandesc.map((e) => exports.ClanDesc.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.clandesc) === null || _a === void 0 ? void 0 : _a.length) {
            obj.clandesc = message.clandesc.map((e) => exports.ClanDesc.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ClanDescList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseClanDescList();
        message.clandesc = ((_a = object.clandesc) === null || _a === void 0 ? void 0 : _a.map((e) => exports.ClanDesc.fromPartial(e))) || [];
        return message;
    },
};
function createBaseLinkInviteUserRequest() {
    return { clan_id: "", channel_id: "", expiry_time: 0 };
}
exports.LinkInviteUserRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.expiry_time !== 0) {
            writer.uint32(24).int32(message.expiry_time);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkInviteUserRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.expiry_time = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            expiry_time: isSet(object.expiry_time) ? globalThis.Number(object.expiry_time) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.expiry_time !== 0) {
            obj.expiry_time = Math.round(message.expiry_time);
        }
        return obj;
    },
    create(base) {
        return exports.LinkInviteUserRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseLinkInviteUserRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.expiry_time = (_c = object.expiry_time) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseInviteUserRequest() {
    return { invite_id: "" };
}
exports.InviteUserRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.invite_id !== "") {
            writer.uint32(10).string(message.invite_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInviteUserRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.invite_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { invite_id: isSet(object.invite_id) ? globalThis.String(object.invite_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.invite_id !== "") {
            obj.invite_id = message.invite_id;
        }
        return obj;
    },
    create(base) {
        return exports.InviteUserRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseInviteUserRequest();
        message.invite_id = (_a = object.invite_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseInviteUserRes() {
    return {
        clan_id: "",
        channel_id: "",
        clan_name: "",
        channel_label: "",
        user_joined: false,
        expiry_time: undefined,
        channel_desc: undefined,
        clan_logo: "",
        member_count: 0,
    };
}
exports.InviteUserRes = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.clan_name !== "") {
            writer.uint32(26).string(message.clan_name);
        }
        if (message.channel_label !== "") {
            writer.uint32(34).string(message.channel_label);
        }
        if (message.user_joined !== false) {
            writer.uint32(40).bool(message.user_joined);
        }
        if (message.expiry_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.expiry_time), writer.uint32(50).fork()).ldelim();
        }
        if (message.channel_desc !== undefined) {
            exports.ChannelDescription.encode(message.channel_desc, writer.uint32(58).fork()).ldelim();
        }
        if (message.clan_logo !== "") {
            writer.uint32(66).string(message.clan_logo);
        }
        if (message.member_count !== 0) {
            writer.uint32(72).int32(message.member_count);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInviteUserRes();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.channel_label = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.user_joined = reader.bool();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.expiry_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.channel_desc = exports.ChannelDescription.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.clan_logo = reader.string();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.member_count = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
            channel_label: isSet(object.channel_label) ? globalThis.String(object.channel_label) : "",
            user_joined: isSet(object.user_joined) ? globalThis.Boolean(object.user_joined) : false,
            expiry_time: isSet(object.expiry_time) ? fromJsonTimestamp(object.expiry_time) : undefined,
            channel_desc: isSet(object.channel_desc) ? exports.ChannelDescription.fromJSON(object.channel_desc) : undefined,
            clan_logo: isSet(object.clan_logo) ? globalThis.String(object.clan_logo) : "",
            member_count: isSet(object.member_count) ? globalThis.Number(object.member_count) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.clan_name !== "") {
            obj.clan_name = message.clan_name;
        }
        if (message.channel_label !== "") {
            obj.channel_label = message.channel_label;
        }
        if (message.user_joined !== false) {
            obj.user_joined = message.user_joined;
        }
        if (message.expiry_time !== undefined) {
            obj.expiry_time = message.expiry_time.toISOString();
        }
        if (message.channel_desc !== undefined) {
            obj.channel_desc = exports.ChannelDescription.toJSON(message.channel_desc);
        }
        if (message.clan_logo !== "") {
            obj.clan_logo = message.clan_logo;
        }
        if (message.member_count !== 0) {
            obj.member_count = Math.round(message.member_count);
        }
        return obj;
    },
    create(base) {
        return exports.InviteUserRes.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseInviteUserRes();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.clan_name = (_c = object.clan_name) !== null && _c !== void 0 ? _c : "";
        message.channel_label = (_d = object.channel_label) !== null && _d !== void 0 ? _d : "";
        message.user_joined = (_e = object.user_joined) !== null && _e !== void 0 ? _e : false;
        message.expiry_time = (_f = object.expiry_time) !== null && _f !== void 0 ? _f : undefined;
        message.channel_desc = (object.channel_desc !== undefined && object.channel_desc !== null)
            ? exports.ChannelDescription.fromPartial(object.channel_desc)
            : undefined;
        message.clan_logo = (_g = object.clan_logo) !== null && _g !== void 0 ? _g : "";
        message.member_count = (_h = object.member_count) !== null && _h !== void 0 ? _h : 0;
        return message;
    },
};
function createBaseJoinClanChannelRequest() {
    return { clan_id: "", channel_id: "" };
}
exports.JoinClanChannelRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseJoinClanChannelRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.JoinClanChannelRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseJoinClanChannelRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseLinkInviteUser() {
    return {
        clan_id: "",
        creator_id: "",
        channel_id: "",
        invite_link: "",
        create_time: undefined,
        expiry_time: undefined,
        id: "",
    };
}
exports.LinkInviteUser = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.creator_id !== "") {
            writer.uint32(18).string(message.creator_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(26).string(message.channel_id);
        }
        if (message.invite_link !== "") {
            writer.uint32(34).string(message.invite_link);
        }
        if (message.create_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.create_time), writer.uint32(42).fork()).ldelim();
        }
        if (message.expiry_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.expiry_time), writer.uint32(50).fork()).ldelim();
        }
        if (message.id !== "") {
            writer.uint32(58).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkInviteUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.invite_link = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.create_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.expiry_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            invite_link: isSet(object.invite_link) ? globalThis.String(object.invite_link) : "",
            create_time: isSet(object.create_time) ? fromJsonTimestamp(object.create_time) : undefined,
            expiry_time: isSet(object.expiry_time) ? fromJsonTimestamp(object.expiry_time) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.invite_link !== "") {
            obj.invite_link = message.invite_link;
        }
        if (message.create_time !== undefined) {
            obj.create_time = message.create_time.toISOString();
        }
        if (message.expiry_time !== undefined) {
            obj.expiry_time = message.expiry_time.toISOString();
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.LinkInviteUser.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseLinkInviteUser();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.creator_id = (_b = object.creator_id) !== null && _b !== void 0 ? _b : "";
        message.channel_id = (_c = object.channel_id) !== null && _c !== void 0 ? _c : "";
        message.invite_link = (_d = object.invite_link) !== null && _d !== void 0 ? _d : "";
        message.create_time = (_e = object.create_time) !== null && _e !== void 0 ? _e : undefined;
        message.expiry_time = (_f = object.expiry_time) !== null && _f !== void 0 ? _f : undefined;
        message.id = (_g = object.id) !== null && _g !== void 0 ? _g : "";
        return message;
    },
};
function createBaseClanProfile() {
    return { user_id: "", nick_name: "", avatar: "", clan_id: "" };
}
exports.ClanProfile = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user_id !== "") {
            writer.uint32(10).string(message.user_id);
        }
        if (message.nick_name !== "") {
            writer.uint32(18).string(message.nick_name);
        }
        if (message.avatar !== "") {
            writer.uint32(26).string(message.avatar);
        }
        if (message.clan_id !== "") {
            writer.uint32(34).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanProfile();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.nick_name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.avatar = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            nick_name: isSet(object.nick_name) ? globalThis.String(object.nick_name) : "",
            avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.nick_name !== "") {
            obj.nick_name = message.nick_name;
        }
        if (message.avatar !== "") {
            obj.avatar = message.avatar;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.ClanProfile.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseClanProfile();
        message.user_id = (_a = object.user_id) !== null && _a !== void 0 ? _a : "";
        message.nick_name = (_b = object.nick_name) !== null && _b !== void 0 ? _b : "";
        message.avatar = (_c = object.avatar) !== null && _c !== void 0 ? _c : "";
        message.clan_id = (_d = object.clan_id) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseClanProfileRequest() {
    return { clan_id: "" };
}
exports.ClanProfileRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanProfileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.ClanProfileRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseClanProfileRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUpdateClanProfileRequest() {
    return { clan_id: "", nick_name: "", avatar: "" };
}
exports.UpdateClanProfileRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.nick_name !== "") {
            writer.uint32(18).string(message.nick_name);
        }
        if (message.avatar !== "") {
            writer.uint32(26).string(message.avatar);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateClanProfileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.nick_name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.avatar = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            nick_name: isSet(object.nick_name) ? globalThis.String(object.nick_name) : "",
            avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.nick_name !== "") {
            obj.nick_name = message.nick_name;
        }
        if (message.avatar !== "") {
            obj.avatar = message.avatar;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateClanProfileRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseUpdateClanProfileRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.nick_name = (_b = object.nick_name) !== null && _b !== void 0 ? _b : "";
        message.avatar = (_c = object.avatar) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseUpdateClanOrderRequest() {
    return { clans_order: [] };
}
exports.UpdateClanOrderRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.clans_order) {
            exports.UpdateClanOrderRequest_ClanOrder.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateClanOrderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clans_order.push(exports.UpdateClanOrderRequest_ClanOrder.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clans_order: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.clans_order)
                ? object.clans_order.map((e) => exports.UpdateClanOrderRequest_ClanOrder.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.clans_order) === null || _a === void 0 ? void 0 : _a.length) {
            obj.clans_order = message.clans_order.map((e) => exports.UpdateClanOrderRequest_ClanOrder.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.UpdateClanOrderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUpdateClanOrderRequest();
        message.clans_order = ((_a = object.clans_order) === null || _a === void 0 ? void 0 : _a.map((e) => exports.UpdateClanOrderRequest_ClanOrder.fromPartial(e))) || [];
        return message;
    },
};
function createBaseUpdateClanOrderRequest_ClanOrder() {
    return { order: 0, clan_id: "" };
}
exports.UpdateClanOrderRequest_ClanOrder = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.order !== 0) {
            writer.uint32(8).int32(message.order);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateClanOrderRequest_ClanOrder();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.order = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            order: isSet(object.order) ? globalThis.Number(object.order) : 0,
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.order !== 0) {
            obj.order = Math.round(message.order);
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateClanOrderRequest_ClanOrder.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUpdateClanOrderRequest_ClanOrder();
        message.order = (_a = object.order) !== null && _a !== void 0 ? _a : 0;
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseCategoryDesc() {
    return { creator_id: "", clan_id: "", category_name: "", category_id: "", category_order: 0 };
}
exports.CategoryDesc = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.creator_id !== "") {
            writer.uint32(10).string(message.creator_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        if (message.category_name !== "") {
            writer.uint32(26).string(message.category_name);
        }
        if (message.category_id !== "") {
            writer.uint32(34).string(message.category_id);
        }
        if (message.category_order !== 0) {
            writer.uint32(40).int32(message.category_order);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCategoryDesc();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.category_name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.category_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.category_order = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            category_name: isSet(object.category_name) ? globalThis.String(object.category_name) : "",
            category_id: isSet(object.category_id) ? globalThis.String(object.category_id) : "",
            category_order: isSet(object.category_order) ? globalThis.Number(object.category_order) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.category_name !== "") {
            obj.category_name = message.category_name;
        }
        if (message.category_id !== "") {
            obj.category_id = message.category_id;
        }
        if (message.category_order !== 0) {
            obj.category_order = Math.round(message.category_order);
        }
        return obj;
    },
    create(base) {
        return exports.CategoryDesc.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseCategoryDesc();
        message.creator_id = (_a = object.creator_id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        message.category_name = (_c = object.category_name) !== null && _c !== void 0 ? _c : "";
        message.category_id = (_d = object.category_id) !== null && _d !== void 0 ? _d : "";
        message.category_order = (_e = object.category_order) !== null && _e !== void 0 ? _e : 0;
        return message;
    },
};
function createBaseUpdateCategoryOrderRequest() {
    return { clan_id: "", categories: [] };
}
exports.UpdateCategoryOrderRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        for (const v of message.categories) {
            exports.CategoryOrderUpdate.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateCategoryOrderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.categories.push(exports.CategoryOrderUpdate.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            categories: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.categories)
                ? object.categories.map((e) => exports.CategoryOrderUpdate.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if ((_a = message.categories) === null || _a === void 0 ? void 0 : _a.length) {
            obj.categories = message.categories.map((e) => exports.CategoryOrderUpdate.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.UpdateCategoryOrderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUpdateCategoryOrderRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.categories = ((_b = object.categories) === null || _b === void 0 ? void 0 : _b.map((e) => exports.CategoryOrderUpdate.fromPartial(e))) || [];
        return message;
    },
};
function createBaseUpdateRoleOrderRequest() {
    return { clan_id: "", roles: [] };
}
exports.UpdateRoleOrderRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        for (const v of message.roles) {
            exports.RoleOrderUpdate.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateRoleOrderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.roles.push(exports.RoleOrderUpdate.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            roles: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.roles) ? object.roles.map((e) => exports.RoleOrderUpdate.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if ((_a = message.roles) === null || _a === void 0 ? void 0 : _a.length) {
            obj.roles = message.roles.map((e) => exports.RoleOrderUpdate.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.UpdateRoleOrderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUpdateRoleOrderRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.roles = ((_b = object.roles) === null || _b === void 0 ? void 0 : _b.map((e) => exports.RoleOrderUpdate.fromPartial(e))) || [];
        return message;
    },
};
function createBaseRoleOrderUpdate() {
    return { role_id: "", order: 0 };
}
exports.RoleOrderUpdate = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.role_id !== "") {
            writer.uint32(10).string(message.role_id);
        }
        if (message.order !== 0) {
            writer.uint32(16).int32(message.order);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRoleOrderUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.role_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.order = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            role_id: isSet(object.role_id) ? globalThis.String(object.role_id) : "",
            order: isSet(object.order) ? globalThis.Number(object.order) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.role_id !== "") {
            obj.role_id = message.role_id;
        }
        if (message.order !== 0) {
            obj.order = Math.round(message.order);
        }
        return obj;
    },
    create(base) {
        return exports.RoleOrderUpdate.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRoleOrderUpdate();
        message.role_id = (_a = object.role_id) !== null && _a !== void 0 ? _a : "";
        message.order = (_b = object.order) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseCategoryOrderUpdate() {
    return { category_id: "", order: 0 };
}
exports.CategoryOrderUpdate = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.category_id !== "") {
            writer.uint32(10).string(message.category_id);
        }
        if (message.order !== 0) {
            writer.uint32(16).int32(message.order);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCategoryOrderUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.category_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.order = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            category_id: isSet(object.category_id) ? globalThis.String(object.category_id) : "",
            order: isSet(object.order) ? globalThis.Number(object.order) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.category_id !== "") {
            obj.category_id = message.category_id;
        }
        if (message.order !== 0) {
            obj.order = Math.round(message.order);
        }
        return obj;
    },
    create(base) {
        return exports.CategoryOrderUpdate.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCategoryOrderUpdate();
        message.category_id = (_a = object.category_id) !== null && _a !== void 0 ? _a : "";
        message.order = (_b = object.order) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseCreateCategoryDescRequest() {
    return { category_name: "", clan_id: "" };
}
exports.CreateCategoryDescRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.category_name !== "") {
            writer.uint32(10).string(message.category_name);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateCategoryDescRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.category_name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            category_name: isSet(object.category_name) ? globalThis.String(object.category_name) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.category_name !== "") {
            obj.category_name = message.category_name;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.CreateCategoryDescRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCreateCategoryDescRequest();
        message.category_name = (_a = object.category_name) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseDeleteCategoryDescRequest() {
    return { category_id: "", clan_id: "", category_label: "" };
}
exports.DeleteCategoryDescRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.category_id !== "") {
            writer.uint32(10).string(message.category_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        if (message.category_label !== "") {
            writer.uint32(26).string(message.category_label);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteCategoryDescRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.category_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.category_label = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            category_id: isSet(object.category_id) ? globalThis.String(object.category_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            category_label: isSet(object.category_label) ? globalThis.String(object.category_label) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.category_id !== "") {
            obj.category_id = message.category_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.category_label !== "") {
            obj.category_label = message.category_label;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteCategoryDescRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseDeleteCategoryDescRequest();
        message.category_id = (_a = object.category_id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        message.category_label = (_c = object.category_label) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseCategoryDescList() {
    return { categorydesc: [] };
}
exports.CategoryDescList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.categorydesc) {
            exports.CategoryDesc.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCategoryDescList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.categorydesc.push(exports.CategoryDesc.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            categorydesc: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.categorydesc)
                ? object.categorydesc.map((e) => exports.CategoryDesc.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.categorydesc) === null || _a === void 0 ? void 0 : _a.length) {
            obj.categorydesc = message.categorydesc.map((e) => exports.CategoryDesc.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CategoryDescList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseCategoryDescList();
        message.categorydesc = ((_a = object.categorydesc) === null || _a === void 0 ? void 0 : _a.map((e) => exports.CategoryDesc.fromPartial(e))) || [];
        return message;
    },
};
function createBaseListCategoryDescsRequest() {
    return { limit: undefined, state: undefined, cursor: "" };
}
exports.ListCategoryDescsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.limit !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.limit }, writer.uint32(10).fork()).ldelim();
        }
        if (message.state !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.state }, writer.uint32(18).fork()).ldelim();
        }
        if (message.cursor !== "") {
            writer.uint32(26).string(message.cursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListCategoryDescsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.limit = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.state = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
            state: isSet(object.state) ? Number(object.state) : undefined,
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        if (message.state !== undefined) {
            obj.state = message.state;
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        return obj;
    },
    create(base) {
        return exports.ListCategoryDescsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseListCategoryDescsRequest();
        message.limit = (_a = object.limit) !== null && _a !== void 0 ? _a : undefined;
        message.state = (_b = object.state) !== null && _b !== void 0 ? _b : undefined;
        message.cursor = (_c = object.cursor) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseChannelMessageHeader() {
    return {
        id: "",
        timestamp_seconds: 0,
        sender_id: "",
        content: "",
        attachment: "",
        reference: "",
        mention: "",
        reaction: "",
        repliers: [],
    };
}
exports.ChannelMessageHeader = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.timestamp_seconds !== 0) {
            writer.uint32(16).uint32(message.timestamp_seconds);
        }
        if (message.sender_id !== "") {
            writer.uint32(26).string(message.sender_id);
        }
        if (message.content !== "") {
            writer.uint32(34).string(message.content);
        }
        if (message.attachment !== "") {
            writer.uint32(42).string(message.attachment);
        }
        if (message.reference !== "") {
            writer.uint32(50).string(message.reference);
        }
        if (message.mention !== "") {
            writer.uint32(58).string(message.mention);
        }
        if (message.reaction !== "") {
            writer.uint32(66).string(message.reaction);
        }
        for (const v of message.repliers) {
            writer.uint32(74).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelMessageHeader();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.timestamp_seconds = reader.uint32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.sender_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.attachment = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.reference = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.mention = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.reaction = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.repliers.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            timestamp_seconds: isSet(object.timestamp_seconds) ? globalThis.Number(object.timestamp_seconds) : 0,
            sender_id: isSet(object.sender_id) ? globalThis.String(object.sender_id) : "",
            content: isSet(object.content) ? globalThis.String(object.content) : "",
            attachment: isSet(object.attachment) ? globalThis.String(object.attachment) : "",
            reference: isSet(object.reference) ? globalThis.String(object.reference) : "",
            mention: isSet(object.mention) ? globalThis.String(object.mention) : "",
            reaction: isSet(object.reaction) ? globalThis.String(object.reaction) : "",
            repliers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.repliers) ? object.repliers.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.timestamp_seconds !== 0) {
            obj.timestamp_seconds = Math.round(message.timestamp_seconds);
        }
        if (message.sender_id !== "") {
            obj.sender_id = message.sender_id;
        }
        if (message.content !== "") {
            obj.content = message.content;
        }
        if (message.attachment !== "") {
            obj.attachment = message.attachment;
        }
        if (message.reference !== "") {
            obj.reference = message.reference;
        }
        if (message.mention !== "") {
            obj.mention = message.mention;
        }
        if (message.reaction !== "") {
            obj.reaction = message.reaction;
        }
        if ((_a = message.repliers) === null || _a === void 0 ? void 0 : _a.length) {
            obj.repliers = message.repliers;
        }
        return obj;
    },
    create(base) {
        return exports.ChannelMessageHeader.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseChannelMessageHeader();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.timestamp_seconds = (_b = object.timestamp_seconds) !== null && _b !== void 0 ? _b : 0;
        message.sender_id = (_c = object.sender_id) !== null && _c !== void 0 ? _c : "";
        message.content = (_d = object.content) !== null && _d !== void 0 ? _d : "";
        message.attachment = (_e = object.attachment) !== null && _e !== void 0 ? _e : "";
        message.reference = (_f = object.reference) !== null && _f !== void 0 ? _f : "";
        message.mention = (_g = object.mention) !== null && _g !== void 0 ? _g : "";
        message.reaction = (_h = object.reaction) !== null && _h !== void 0 ? _h : "";
        message.repliers = ((_j = object.repliers) === null || _j === void 0 ? void 0 : _j.map((e) => e)) || [];
        return message;
    },
};
function createBaseChannelDescription() {
    return {
        clan_id: "",
        parent_id: "",
        channel_id: "",
        category_id: "",
        category_name: "",
        type: undefined,
        creator_id: "",
        channel_label: "",
        channel_private: 0,
        channel_avatar: [],
        user_id: [],
        last_sent_message: undefined,
        last_seen_message: undefined,
        is_online: [],
        meeting_code: "",
        count_mess_unread: 0,
        active: 0,
        last_pin_message: "",
        usernames: [],
        creator_name: "",
        create_time_seconds: 0,
        update_time_seconds: 0,
        metadata: [],
        about_me: [],
        clan_name: "",
        app_id: "",
        is_mute: false,
        age_restricted: 0,
        topic: "",
        e2ee: 0,
        display_names: [],
    };
}
exports.ChannelDescription = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.parent_id !== "") {
            writer.uint32(18).string(message.parent_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(26).string(message.channel_id);
        }
        if (message.category_id !== "") {
            writer.uint32(34).string(message.category_id);
        }
        if (message.category_name !== "") {
            writer.uint32(42).string(message.category_name);
        }
        if (message.type !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.type }, writer.uint32(50).fork()).ldelim();
        }
        if (message.creator_id !== "") {
            writer.uint32(58).string(message.creator_id);
        }
        if (message.channel_label !== "") {
            writer.uint32(66).string(message.channel_label);
        }
        if (message.channel_private !== 0) {
            writer.uint32(72).int32(message.channel_private);
        }
        for (const v of message.channel_avatar) {
            writer.uint32(82).string(v);
        }
        for (const v of message.user_id) {
            writer.uint32(90).string(v);
        }
        if (message.last_sent_message !== undefined) {
            exports.ChannelMessageHeader.encode(message.last_sent_message, writer.uint32(98).fork()).ldelim();
        }
        if (message.last_seen_message !== undefined) {
            exports.ChannelMessageHeader.encode(message.last_seen_message, writer.uint32(106).fork()).ldelim();
        }
        writer.uint32(114).fork();
        for (const v of message.is_online) {
            writer.bool(v);
        }
        writer.ldelim();
        if (message.meeting_code !== "") {
            writer.uint32(122).string(message.meeting_code);
        }
        if (message.count_mess_unread !== 0) {
            writer.uint32(128).int32(message.count_mess_unread);
        }
        if (message.active !== 0) {
            writer.uint32(136).int32(message.active);
        }
        if (message.last_pin_message !== "") {
            writer.uint32(146).string(message.last_pin_message);
        }
        for (const v of message.usernames) {
            writer.uint32(154).string(v);
        }
        if (message.creator_name !== "") {
            writer.uint32(162).string(message.creator_name);
        }
        if (message.create_time_seconds !== 0) {
            writer.uint32(168).uint32(message.create_time_seconds);
        }
        if (message.update_time_seconds !== 0) {
            writer.uint32(176).uint32(message.update_time_seconds);
        }
        for (const v of message.metadata) {
            writer.uint32(186).string(v);
        }
        for (const v of message.about_me) {
            writer.uint32(194).string(v);
        }
        if (message.clan_name !== "") {
            writer.uint32(202).string(message.clan_name);
        }
        if (message.app_id !== "") {
            writer.uint32(210).string(message.app_id);
        }
        if (message.is_mute !== false) {
            writer.uint32(216).bool(message.is_mute);
        }
        if (message.age_restricted !== 0) {
            writer.uint32(224).int32(message.age_restricted);
        }
        if (message.topic !== "") {
            writer.uint32(234).string(message.topic);
        }
        if (message.e2ee !== 0) {
            writer.uint32(240).int32(message.e2ee);
        }
        for (const v of message.display_names) {
            writer.uint32(250).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelDescription();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.parent_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.category_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.category_name = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.type = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.channel_label = reader.string();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.channel_private = reader.int32();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.channel_avatar.push(reader.string());
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.user_id.push(reader.string());
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.last_sent_message = exports.ChannelMessageHeader.decode(reader, reader.uint32());
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.last_seen_message = exports.ChannelMessageHeader.decode(reader, reader.uint32());
                    continue;
                case 14:
                    if (tag === 112) {
                        message.is_online.push(reader.bool());
                        continue;
                    }
                    if (tag === 114) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.is_online.push(reader.bool());
                        }
                        continue;
                    }
                    break;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.meeting_code = reader.string();
                    continue;
                case 16:
                    if (tag !== 128) {
                        break;
                    }
                    message.count_mess_unread = reader.int32();
                    continue;
                case 17:
                    if (tag !== 136) {
                        break;
                    }
                    message.active = reader.int32();
                    continue;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    message.last_pin_message = reader.string();
                    continue;
                case 19:
                    if (tag !== 154) {
                        break;
                    }
                    message.usernames.push(reader.string());
                    continue;
                case 20:
                    if (tag !== 162) {
                        break;
                    }
                    message.creator_name = reader.string();
                    continue;
                case 21:
                    if (tag !== 168) {
                        break;
                    }
                    message.create_time_seconds = reader.uint32();
                    continue;
                case 22:
                    if (tag !== 176) {
                        break;
                    }
                    message.update_time_seconds = reader.uint32();
                    continue;
                case 23:
                    if (tag !== 186) {
                        break;
                    }
                    message.metadata.push(reader.string());
                    continue;
                case 24:
                    if (tag !== 194) {
                        break;
                    }
                    message.about_me.push(reader.string());
                    continue;
                case 25:
                    if (tag !== 202) {
                        break;
                    }
                    message.clan_name = reader.string();
                    continue;
                case 26:
                    if (tag !== 210) {
                        break;
                    }
                    message.app_id = reader.string();
                    continue;
                case 27:
                    if (tag !== 216) {
                        break;
                    }
                    message.is_mute = reader.bool();
                    continue;
                case 28:
                    if (tag !== 224) {
                        break;
                    }
                    message.age_restricted = reader.int32();
                    continue;
                case 29:
                    if (tag !== 234) {
                        break;
                    }
                    message.topic = reader.string();
                    continue;
                case 30:
                    if (tag !== 240) {
                        break;
                    }
                    message.e2ee = reader.int32();
                    continue;
                case 31:
                    if (tag !== 250) {
                        break;
                    }
                    message.display_names.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            parent_id: isSet(object.parent_id) ? globalThis.String(object.parent_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            category_id: isSet(object.category_id) ? globalThis.String(object.category_id) : "",
            category_name: isSet(object.category_name) ? globalThis.String(object.category_name) : "",
            type: isSet(object.type) ? Number(object.type) : undefined,
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            channel_label: isSet(object.channel_label) ? globalThis.String(object.channel_label) : "",
            channel_private: isSet(object.channel_private) ? globalThis.Number(object.channel_private) : 0,
            channel_avatar: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.channel_avatar)
                ? object.channel_avatar.map((e) => globalThis.String(e))
                : [],
            user_id: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_id) ? object.user_id.map((e) => globalThis.String(e)) : [],
            last_sent_message: isSet(object.last_sent_message)
                ? exports.ChannelMessageHeader.fromJSON(object.last_sent_message)
                : undefined,
            last_seen_message: isSet(object.last_seen_message)
                ? exports.ChannelMessageHeader.fromJSON(object.last_seen_message)
                : undefined,
            is_online: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.is_online)
                ? object.is_online.map((e) => globalThis.Boolean(e))
                : [],
            meeting_code: isSet(object.meeting_code) ? globalThis.String(object.meeting_code) : "",
            count_mess_unread: isSet(object.count_mess_unread) ? globalThis.Number(object.count_mess_unread) : 0,
            active: isSet(object.active) ? globalThis.Number(object.active) : 0,
            last_pin_message: isSet(object.last_pin_message) ? globalThis.String(object.last_pin_message) : "",
            usernames: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.usernames)
                ? object.usernames.map((e) => globalThis.String(e))
                : [],
            creator_name: isSet(object.creator_name) ? globalThis.String(object.creator_name) : "",
            create_time_seconds: isSet(object.create_time_seconds) ? globalThis.Number(object.create_time_seconds) : 0,
            update_time_seconds: isSet(object.update_time_seconds) ? globalThis.Number(object.update_time_seconds) : 0,
            metadata: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.metadata)
                ? object.metadata.map((e) => globalThis.String(e))
                : [],
            about_me: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.about_me) ? object.about_me.map((e) => globalThis.String(e)) : [],
            clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
            app_id: isSet(object.app_id) ? globalThis.String(object.app_id) : "",
            is_mute: isSet(object.is_mute) ? globalThis.Boolean(object.is_mute) : false,
            age_restricted: isSet(object.age_restricted) ? globalThis.Number(object.age_restricted) : 0,
            topic: isSet(object.topic) ? globalThis.String(object.topic) : "",
            e2ee: isSet(object.e2ee) ? globalThis.Number(object.e2ee) : 0,
            display_names: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.display_names)
                ? object.display_names.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g;
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.parent_id !== "") {
            obj.parent_id = message.parent_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.category_id !== "") {
            obj.category_id = message.category_id;
        }
        if (message.category_name !== "") {
            obj.category_name = message.category_name;
        }
        if (message.type !== undefined) {
            obj.type = message.type;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.channel_label !== "") {
            obj.channel_label = message.channel_label;
        }
        if (message.channel_private !== 0) {
            obj.channel_private = Math.round(message.channel_private);
        }
        if ((_a = message.channel_avatar) === null || _a === void 0 ? void 0 : _a.length) {
            obj.channel_avatar = message.channel_avatar;
        }
        if ((_b = message.user_id) === null || _b === void 0 ? void 0 : _b.length) {
            obj.user_id = message.user_id;
        }
        if (message.last_sent_message !== undefined) {
            obj.last_sent_message = exports.ChannelMessageHeader.toJSON(message.last_sent_message);
        }
        if (message.last_seen_message !== undefined) {
            obj.last_seen_message = exports.ChannelMessageHeader.toJSON(message.last_seen_message);
        }
        if ((_c = message.is_online) === null || _c === void 0 ? void 0 : _c.length) {
            obj.is_online = message.is_online;
        }
        if (message.meeting_code !== "") {
            obj.meeting_code = message.meeting_code;
        }
        if (message.count_mess_unread !== 0) {
            obj.count_mess_unread = Math.round(message.count_mess_unread);
        }
        if (message.active !== 0) {
            obj.active = Math.round(message.active);
        }
        if (message.last_pin_message !== "") {
            obj.last_pin_message = message.last_pin_message;
        }
        if ((_d = message.usernames) === null || _d === void 0 ? void 0 : _d.length) {
            obj.usernames = message.usernames;
        }
        if (message.creator_name !== "") {
            obj.creator_name = message.creator_name;
        }
        if (message.create_time_seconds !== 0) {
            obj.create_time_seconds = Math.round(message.create_time_seconds);
        }
        if (message.update_time_seconds !== 0) {
            obj.update_time_seconds = Math.round(message.update_time_seconds);
        }
        if ((_e = message.metadata) === null || _e === void 0 ? void 0 : _e.length) {
            obj.metadata = message.metadata;
        }
        if ((_f = message.about_me) === null || _f === void 0 ? void 0 : _f.length) {
            obj.about_me = message.about_me;
        }
        if (message.clan_name !== "") {
            obj.clan_name = message.clan_name;
        }
        if (message.app_id !== "") {
            obj.app_id = message.app_id;
        }
        if (message.is_mute !== false) {
            obj.is_mute = message.is_mute;
        }
        if (message.age_restricted !== 0) {
            obj.age_restricted = Math.round(message.age_restricted);
        }
        if (message.topic !== "") {
            obj.topic = message.topic;
        }
        if (message.e2ee !== 0) {
            obj.e2ee = Math.round(message.e2ee);
        }
        if ((_g = message.display_names) === null || _g === void 0 ? void 0 : _g.length) {
            obj.display_names = message.display_names;
        }
        return obj;
    },
    create(base) {
        return exports.ChannelDescription.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4;
        const message = createBaseChannelDescription();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.parent_id = (_b = object.parent_id) !== null && _b !== void 0 ? _b : "";
        message.channel_id = (_c = object.channel_id) !== null && _c !== void 0 ? _c : "";
        message.category_id = (_d = object.category_id) !== null && _d !== void 0 ? _d : "";
        message.category_name = (_e = object.category_name) !== null && _e !== void 0 ? _e : "";
        message.type = (_f = object.type) !== null && _f !== void 0 ? _f : undefined;
        message.creator_id = (_g = object.creator_id) !== null && _g !== void 0 ? _g : "";
        message.channel_label = (_h = object.channel_label) !== null && _h !== void 0 ? _h : "";
        message.channel_private = (_j = object.channel_private) !== null && _j !== void 0 ? _j : 0;
        message.channel_avatar = ((_k = object.channel_avatar) === null || _k === void 0 ? void 0 : _k.map((e) => e)) || [];
        message.user_id = ((_l = object.user_id) === null || _l === void 0 ? void 0 : _l.map((e) => e)) || [];
        message.last_sent_message = (object.last_sent_message !== undefined && object.last_sent_message !== null)
            ? exports.ChannelMessageHeader.fromPartial(object.last_sent_message)
            : undefined;
        message.last_seen_message = (object.last_seen_message !== undefined && object.last_seen_message !== null)
            ? exports.ChannelMessageHeader.fromPartial(object.last_seen_message)
            : undefined;
        message.is_online = ((_m = object.is_online) === null || _m === void 0 ? void 0 : _m.map((e) => e)) || [];
        message.meeting_code = (_o = object.meeting_code) !== null && _o !== void 0 ? _o : "";
        message.count_mess_unread = (_p = object.count_mess_unread) !== null && _p !== void 0 ? _p : 0;
        message.active = (_q = object.active) !== null && _q !== void 0 ? _q : 0;
        message.last_pin_message = (_r = object.last_pin_message) !== null && _r !== void 0 ? _r : "";
        message.usernames = ((_s = object.usernames) === null || _s === void 0 ? void 0 : _s.map((e) => e)) || [];
        message.creator_name = (_t = object.creator_name) !== null && _t !== void 0 ? _t : "";
        message.create_time_seconds = (_u = object.create_time_seconds) !== null && _u !== void 0 ? _u : 0;
        message.update_time_seconds = (_v = object.update_time_seconds) !== null && _v !== void 0 ? _v : 0;
        message.metadata = ((_w = object.metadata) === null || _w === void 0 ? void 0 : _w.map((e) => e)) || [];
        message.about_me = ((_x = object.about_me) === null || _x === void 0 ? void 0 : _x.map((e) => e)) || [];
        message.clan_name = (_y = object.clan_name) !== null && _y !== void 0 ? _y : "";
        message.app_id = (_z = object.app_id) !== null && _z !== void 0 ? _z : "";
        message.is_mute = (_0 = object.is_mute) !== null && _0 !== void 0 ? _0 : false;
        message.age_restricted = (_1 = object.age_restricted) !== null && _1 !== void 0 ? _1 : 0;
        message.topic = (_2 = object.topic) !== null && _2 !== void 0 ? _2 : "";
        message.e2ee = (_3 = object.e2ee) !== null && _3 !== void 0 ? _3 : 0;
        message.display_names = ((_4 = object.display_names) === null || _4 === void 0 ? void 0 : _4.map((e) => e)) || [];
        return message;
    },
};
function createBaseChannelDescList() {
    return { channeldesc: [], next_cursor: "", prev_cursor: "", cacheable_cursor: "", page: 0 };
}
exports.ChannelDescList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.channeldesc) {
            exports.ChannelDescription.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.next_cursor !== "") {
            writer.uint32(18).string(message.next_cursor);
        }
        if (message.prev_cursor !== "") {
            writer.uint32(26).string(message.prev_cursor);
        }
        if (message.cacheable_cursor !== "") {
            writer.uint32(34).string(message.cacheable_cursor);
        }
        if (message.page !== 0) {
            writer.uint32(40).int32(message.page);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelDescList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channeldesc.push(exports.ChannelDescription.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.next_cursor = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.prev_cursor = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.cacheable_cursor = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.page = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channeldesc: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.channeldesc)
                ? object.channeldesc.map((e) => exports.ChannelDescription.fromJSON(e))
                : [],
            next_cursor: isSet(object.next_cursor) ? globalThis.String(object.next_cursor) : "",
            prev_cursor: isSet(object.prev_cursor) ? globalThis.String(object.prev_cursor) : "",
            cacheable_cursor: isSet(object.cacheable_cursor) ? globalThis.String(object.cacheable_cursor) : "",
            page: isSet(object.page) ? globalThis.Number(object.page) : 0,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.channeldesc) === null || _a === void 0 ? void 0 : _a.length) {
            obj.channeldesc = message.channeldesc.map((e) => exports.ChannelDescription.toJSON(e));
        }
        if (message.next_cursor !== "") {
            obj.next_cursor = message.next_cursor;
        }
        if (message.prev_cursor !== "") {
            obj.prev_cursor = message.prev_cursor;
        }
        if (message.cacheable_cursor !== "") {
            obj.cacheable_cursor = message.cacheable_cursor;
        }
        if (message.page !== 0) {
            obj.page = Math.round(message.page);
        }
        return obj;
    },
    create(base) {
        return exports.ChannelDescList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseChannelDescList();
        message.channeldesc = ((_a = object.channeldesc) === null || _a === void 0 ? void 0 : _a.map((e) => exports.ChannelDescription.fromPartial(e))) || [];
        message.next_cursor = (_b = object.next_cursor) !== null && _b !== void 0 ? _b : "";
        message.prev_cursor = (_c = object.prev_cursor) !== null && _c !== void 0 ? _c : "";
        message.cacheable_cursor = (_d = object.cacheable_cursor) !== null && _d !== void 0 ? _d : "";
        message.page = (_e = object.page) !== null && _e !== void 0 ? _e : 0;
        return message;
    },
};
function createBaseListThreadRequest() {
    return { limit: undefined, state: undefined, clan_id: "", channel_id: "", thread_id: "", page: undefined };
}
exports.ListThreadRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.limit !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.limit }, writer.uint32(10).fork()).ldelim();
        }
        if (message.state !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.state }, writer.uint32(18).fork()).ldelim();
        }
        if (message.clan_id !== "") {
            writer.uint32(26).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(34).string(message.channel_id);
        }
        if (message.thread_id !== "") {
            writer.uint32(42).string(message.thread_id);
        }
        if (message.page !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.page }, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListThreadRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.limit = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.state = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.thread_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.page = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
            state: isSet(object.state) ? Number(object.state) : undefined,
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            thread_id: isSet(object.thread_id) ? globalThis.String(object.thread_id) : "",
            page: isSet(object.page) ? Number(object.page) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        if (message.state !== undefined) {
            obj.state = message.state;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.thread_id !== "") {
            obj.thread_id = message.thread_id;
        }
        if (message.page !== undefined) {
            obj.page = message.page;
        }
        return obj;
    },
    create(base) {
        return exports.ListThreadRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseListThreadRequest();
        message.limit = (_a = object.limit) !== null && _a !== void 0 ? _a : undefined;
        message.state = (_b = object.state) !== null && _b !== void 0 ? _b : undefined;
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : "";
        message.channel_id = (_d = object.channel_id) !== null && _d !== void 0 ? _d : "";
        message.thread_id = (_e = object.thread_id) !== null && _e !== void 0 ? _e : "";
        message.page = (_f = object.page) !== null && _f !== void 0 ? _f : undefined;
        return message;
    },
};
function createBaseListChannelDescsRequest() {
    return { limit: undefined, state: undefined, cursor: "", clan_id: "", channel_type: 0 };
}
exports.ListChannelDescsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.limit !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.limit }, writer.uint32(10).fork()).ldelim();
        }
        if (message.state !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.state }, writer.uint32(18).fork()).ldelim();
        }
        if (message.cursor !== "") {
            writer.uint32(26).string(message.cursor);
        }
        if (message.clan_id !== "") {
            writer.uint32(34).string(message.clan_id);
        }
        if (message.channel_type !== 0) {
            writer.uint32(40).int32(message.channel_type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListChannelDescsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.limit = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.state = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.channel_type = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
            state: isSet(object.state) ? Number(object.state) : undefined,
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_type: isSet(object.channel_type) ? globalThis.Number(object.channel_type) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        if (message.state !== undefined) {
            obj.state = message.state;
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_type !== 0) {
            obj.channel_type = Math.round(message.channel_type);
        }
        return obj;
    },
    create(base) {
        return exports.ListChannelDescsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseListChannelDescsRequest();
        message.limit = (_a = object.limit) !== null && _a !== void 0 ? _a : undefined;
        message.state = (_b = object.state) !== null && _b !== void 0 ? _b : undefined;
        message.cursor = (_c = object.cursor) !== null && _c !== void 0 ? _c : "";
        message.clan_id = (_d = object.clan_id) !== null && _d !== void 0 ? _d : "";
        message.channel_type = (_e = object.channel_type) !== null && _e !== void 0 ? _e : 0;
        return message;
    },
};
function createBaseListChannelDetailRequest() {
    return { channel_id: "" };
}
exports.ListChannelDetailRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListChannelDetailRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.ListChannelDetailRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListChannelDetailRequest();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseAddRoleChannelDescRequest() {
    return { role_ids: [], channel_id: "" };
}
exports.AddRoleChannelDescRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.role_ids) {
            writer.uint32(10).string(v);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddRoleChannelDescRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.role_ids.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            role_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.role_ids) ? object.role_ids.map((e) => globalThis.String(e)) : [],
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.role_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.role_ids = message.role_ids;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.AddRoleChannelDescRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAddRoleChannelDescRequest();
        message.role_ids = ((_a = object.role_ids) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseCreateChannelDescRequest() {
    return {
        clan_id: "",
        parent_id: "",
        channel_id: "",
        category_id: "",
        type: undefined,
        channel_label: "",
        channel_private: 0,
        user_ids: [],
        app_id: "",
    };
}
exports.CreateChannelDescRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.parent_id !== "") {
            writer.uint32(18).string(message.parent_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(26).string(message.channel_id);
        }
        if (message.category_id !== "") {
            writer.uint32(34).string(message.category_id);
        }
        if (message.type !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.type }, writer.uint32(42).fork()).ldelim();
        }
        if (message.channel_label !== "") {
            writer.uint32(50).string(message.channel_label);
        }
        if (message.channel_private !== 0) {
            writer.uint32(56).int32(message.channel_private);
        }
        for (const v of message.user_ids) {
            writer.uint32(66).string(v);
        }
        if (message.app_id !== "") {
            writer.uint32(74).string(message.app_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateChannelDescRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.parent_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.category_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.type = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.channel_label = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.channel_private = reader.int32();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.user_ids.push(reader.string());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.app_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            parent_id: isSet(object.parent_id) ? globalThis.String(object.parent_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            category_id: isSet(object.category_id) ? globalThis.String(object.category_id) : "",
            type: isSet(object.type) ? Number(object.type) : undefined,
            channel_label: isSet(object.channel_label) ? globalThis.String(object.channel_label) : "",
            channel_private: isSet(object.channel_private) ? globalThis.Number(object.channel_private) : 0,
            user_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_ids) ? object.user_ids.map((e) => globalThis.String(e)) : [],
            app_id: isSet(object.app_id) ? globalThis.String(object.app_id) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.parent_id !== "") {
            obj.parent_id = message.parent_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.category_id !== "") {
            obj.category_id = message.category_id;
        }
        if (message.type !== undefined) {
            obj.type = message.type;
        }
        if (message.channel_label !== "") {
            obj.channel_label = message.channel_label;
        }
        if (message.channel_private !== 0) {
            obj.channel_private = Math.round(message.channel_private);
        }
        if ((_a = message.user_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.user_ids = message.user_ids;
        }
        if (message.app_id !== "") {
            obj.app_id = message.app_id;
        }
        return obj;
    },
    create(base) {
        return exports.CreateChannelDescRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseCreateChannelDescRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.parent_id = (_b = object.parent_id) !== null && _b !== void 0 ? _b : "";
        message.channel_id = (_c = object.channel_id) !== null && _c !== void 0 ? _c : "";
        message.category_id = (_d = object.category_id) !== null && _d !== void 0 ? _d : "";
        message.type = (_e = object.type) !== null && _e !== void 0 ? _e : undefined;
        message.channel_label = (_f = object.channel_label) !== null && _f !== void 0 ? _f : "";
        message.channel_private = (_g = object.channel_private) !== null && _g !== void 0 ? _g : 0;
        message.user_ids = ((_h = object.user_ids) === null || _h === void 0 ? void 0 : _h.map((e) => e)) || [];
        message.app_id = (_j = object.app_id) !== null && _j !== void 0 ? _j : "";
        return message;
    },
};
function createBaseDeleteChannelDescRequest() {
    return { channel_id: "" };
}
exports.DeleteChannelDescRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteChannelDescRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteChannelDescRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDeleteChannelDescRequest();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUpdateChannelDescRequest() {
    return {
        channel_id: "",
        channel_label: undefined,
        category_id: undefined,
        app_id: "",
        topic: "",
        age_restricted: 0,
        e2ee: 0,
    };
}
exports.UpdateChannelDescRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        if (message.channel_label !== undefined) {
            wrappers_1.StringValue.encode({ value: message.channel_label }, writer.uint32(18).fork()).ldelim();
        }
        if (message.category_id !== undefined) {
            wrappers_1.StringValue.encode({ value: message.category_id }, writer.uint32(26).fork()).ldelim();
        }
        if (message.app_id !== "") {
            writer.uint32(34).string(message.app_id);
        }
        if (message.topic !== "") {
            writer.uint32(42).string(message.topic);
        }
        if (message.age_restricted !== 0) {
            writer.uint32(48).int32(message.age_restricted);
        }
        if (message.e2ee !== 0) {
            writer.uint32(56).int32(message.e2ee);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateChannelDescRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_label = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.category_id = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.app_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.topic = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.age_restricted = reader.int32();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.e2ee = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            channel_label: isSet(object.channel_label) ? String(object.channel_label) : undefined,
            category_id: isSet(object.category_id) ? String(object.category_id) : undefined,
            app_id: isSet(object.app_id) ? globalThis.String(object.app_id) : "",
            topic: isSet(object.topic) ? globalThis.String(object.topic) : "",
            age_restricted: isSet(object.age_restricted) ? globalThis.Number(object.age_restricted) : 0,
            e2ee: isSet(object.e2ee) ? globalThis.Number(object.e2ee) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.channel_label !== undefined) {
            obj.channel_label = message.channel_label;
        }
        if (message.category_id !== undefined) {
            obj.category_id = message.category_id;
        }
        if (message.app_id !== "") {
            obj.app_id = message.app_id;
        }
        if (message.topic !== "") {
            obj.topic = message.topic;
        }
        if (message.age_restricted !== 0) {
            obj.age_restricted = Math.round(message.age_restricted);
        }
        if (message.e2ee !== 0) {
            obj.e2ee = Math.round(message.e2ee);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateChannelDescRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseUpdateChannelDescRequest();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        message.channel_label = (_b = object.channel_label) !== null && _b !== void 0 ? _b : undefined;
        message.category_id = (_c = object.category_id) !== null && _c !== void 0 ? _c : undefined;
        message.app_id = (_d = object.app_id) !== null && _d !== void 0 ? _d : "";
        message.topic = (_e = object.topic) !== null && _e !== void 0 ? _e : "";
        message.age_restricted = (_f = object.age_restricted) !== null && _f !== void 0 ? _f : 0;
        message.e2ee = (_g = object.e2ee) !== null && _g !== void 0 ? _g : 0;
        return message;
    },
};
function createBaseChangeChannelPrivateRequest() {
    return { channel_id: "", channel_private: 0, user_ids: [], role_ids: [] };
}
exports.ChangeChannelPrivateRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        if (message.channel_private !== 0) {
            writer.uint32(16).int32(message.channel_private);
        }
        for (const v of message.user_ids) {
            writer.uint32(26).string(v);
        }
        for (const v of message.role_ids) {
            writer.uint32(34).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChangeChannelPrivateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.channel_private = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.user_ids.push(reader.string());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.role_ids.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            channel_private: isSet(object.channel_private) ? globalThis.Number(object.channel_private) : 0,
            user_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_ids) ? object.user_ids.map((e) => globalThis.String(e)) : [],
            role_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.role_ids) ? object.role_ids.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.channel_private !== 0) {
            obj.channel_private = Math.round(message.channel_private);
        }
        if ((_a = message.user_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.user_ids = message.user_ids;
        }
        if ((_b = message.role_ids) === null || _b === void 0 ? void 0 : _b.length) {
            obj.role_ids = message.role_ids;
        }
        return obj;
    },
    create(base) {
        return exports.ChangeChannelPrivateRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseChangeChannelPrivateRequest();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        message.channel_private = (_b = object.channel_private) !== null && _b !== void 0 ? _b : 0;
        message.user_ids = ((_c = object.user_ids) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.role_ids = ((_d = object.role_ids) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        return message;
    },
};
function createBaseAddChannelUsersRequest() {
    return { channel_id: "", user_ids: [] };
}
exports.AddChannelUsersRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        for (const v of message.user_ids) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddChannelUsersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user_ids.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            user_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_ids) ? object.user_ids.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if ((_a = message.user_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.user_ids = message.user_ids;
        }
        return obj;
    },
    create(base) {
        return exports.AddChannelUsersRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAddChannelUsersRequest();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        message.user_ids = ((_b = object.user_ids) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseRemoveChannelUsersRequest() {
    return { channel_id: "", user_ids: [] };
}
exports.RemoveChannelUsersRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        for (const v of message.user_ids) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveChannelUsersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user_ids.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            user_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_ids) ? object.user_ids.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if ((_a = message.user_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.user_ids = message.user_ids;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveChannelUsersRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRemoveChannelUsersRequest();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        message.user_ids = ((_b = object.user_ids) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseRemoveClanUsersRequest() {
    return { clan_id: "", user_ids: [] };
}
exports.RemoveClanUsersRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        for (const v of message.user_ids) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveClanUsersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user_ids.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            user_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_ids) ? object.user_ids.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if ((_a = message.user_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.user_ids = message.user_ids;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveClanUsersRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRemoveClanUsersRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.user_ids = ((_b = object.user_ids) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseLeaveThreadRequest() {
    return { channel_id: "" };
}
exports.LeaveThreadRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLeaveThreadRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.LeaveThreadRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseLeaveThreadRequest();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseRole() {
    return {
        id: "",
        title: "",
        color: "",
        role_icon: "",
        slug: "",
        description: "",
        creator_id: "",
        clan_id: "",
        active: 0,
        display_online: 0,
        allow_mention: 0,
        role_user_list: undefined,
        permission_list: undefined,
        role_channel_active: 0,
        channel_ids: [],
        max_level_permission: 0,
        order_role: 0,
    };
}
exports.Role = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.color !== "") {
            writer.uint32(26).string(message.color);
        }
        if (message.role_icon !== "") {
            writer.uint32(34).string(message.role_icon);
        }
        if (message.slug !== "") {
            writer.uint32(42).string(message.slug);
        }
        if (message.description !== "") {
            writer.uint32(50).string(message.description);
        }
        if (message.creator_id !== "") {
            writer.uint32(58).string(message.creator_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(66).string(message.clan_id);
        }
        if (message.active !== 0) {
            writer.uint32(72).int32(message.active);
        }
        if (message.display_online !== 0) {
            writer.uint32(80).int32(message.display_online);
        }
        if (message.allow_mention !== 0) {
            writer.uint32(88).int32(message.allow_mention);
        }
        if (message.role_user_list !== undefined) {
            exports.RoleUserList.encode(message.role_user_list, writer.uint32(98).fork()).ldelim();
        }
        if (message.permission_list !== undefined) {
            exports.PermissionList.encode(message.permission_list, writer.uint32(106).fork()).ldelim();
        }
        if (message.role_channel_active !== 0) {
            writer.uint32(112).int32(message.role_channel_active);
        }
        for (const v of message.channel_ids) {
            writer.uint32(122).string(v);
        }
        if (message.max_level_permission !== 0) {
            writer.uint32(128).int32(message.max_level_permission);
        }
        if (message.order_role !== 0) {
            writer.uint32(136).int32(message.order_role);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRole();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.color = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.role_icon = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.slug = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.active = reader.int32();
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.display_online = reader.int32();
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.allow_mention = reader.int32();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.role_user_list = exports.RoleUserList.decode(reader, reader.uint32());
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.permission_list = exports.PermissionList.decode(reader, reader.uint32());
                    continue;
                case 14:
                    if (tag !== 112) {
                        break;
                    }
                    message.role_channel_active = reader.int32();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.channel_ids.push(reader.string());
                    continue;
                case 16:
                    if (tag !== 128) {
                        break;
                    }
                    message.max_level_permission = reader.int32();
                    continue;
                case 17:
                    if (tag !== 136) {
                        break;
                    }
                    message.order_role = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            color: isSet(object.color) ? globalThis.String(object.color) : "",
            role_icon: isSet(object.role_icon) ? globalThis.String(object.role_icon) : "",
            slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            active: isSet(object.active) ? globalThis.Number(object.active) : 0,
            display_online: isSet(object.display_online) ? globalThis.Number(object.display_online) : 0,
            allow_mention: isSet(object.allow_mention) ? globalThis.Number(object.allow_mention) : 0,
            role_user_list: isSet(object.role_user_list) ? exports.RoleUserList.fromJSON(object.role_user_list) : undefined,
            permission_list: isSet(object.permission_list) ? exports.PermissionList.fromJSON(object.permission_list) : undefined,
            role_channel_active: isSet(object.role_channel_active) ? globalThis.Number(object.role_channel_active) : 0,
            channel_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.channel_ids)
                ? object.channel_ids.map((e) => globalThis.String(e))
                : [],
            max_level_permission: isSet(object.max_level_permission) ? globalThis.Number(object.max_level_permission) : 0,
            order_role: isSet(object.order_role) ? globalThis.Number(object.order_role) : 0,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.color !== "") {
            obj.color = message.color;
        }
        if (message.role_icon !== "") {
            obj.role_icon = message.role_icon;
        }
        if (message.slug !== "") {
            obj.slug = message.slug;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.active !== 0) {
            obj.active = Math.round(message.active);
        }
        if (message.display_online !== 0) {
            obj.display_online = Math.round(message.display_online);
        }
        if (message.allow_mention !== 0) {
            obj.allow_mention = Math.round(message.allow_mention);
        }
        if (message.role_user_list !== undefined) {
            obj.role_user_list = exports.RoleUserList.toJSON(message.role_user_list);
        }
        if (message.permission_list !== undefined) {
            obj.permission_list = exports.PermissionList.toJSON(message.permission_list);
        }
        if (message.role_channel_active !== 0) {
            obj.role_channel_active = Math.round(message.role_channel_active);
        }
        if ((_a = message.channel_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.channel_ids = message.channel_ids;
        }
        if (message.max_level_permission !== 0) {
            obj.max_level_permission = Math.round(message.max_level_permission);
        }
        if (message.order_role !== 0) {
            obj.order_role = Math.round(message.order_role);
        }
        return obj;
    },
    create(base) {
        return exports.Role.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const message = createBaseRole();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.title = (_b = object.title) !== null && _b !== void 0 ? _b : "";
        message.color = (_c = object.color) !== null && _c !== void 0 ? _c : "";
        message.role_icon = (_d = object.role_icon) !== null && _d !== void 0 ? _d : "";
        message.slug = (_e = object.slug) !== null && _e !== void 0 ? _e : "";
        message.description = (_f = object.description) !== null && _f !== void 0 ? _f : "";
        message.creator_id = (_g = object.creator_id) !== null && _g !== void 0 ? _g : "";
        message.clan_id = (_h = object.clan_id) !== null && _h !== void 0 ? _h : "";
        message.active = (_j = object.active) !== null && _j !== void 0 ? _j : 0;
        message.display_online = (_k = object.display_online) !== null && _k !== void 0 ? _k : 0;
        message.allow_mention = (_l = object.allow_mention) !== null && _l !== void 0 ? _l : 0;
        message.role_user_list = (object.role_user_list !== undefined && object.role_user_list !== null)
            ? exports.RoleUserList.fromPartial(object.role_user_list)
            : undefined;
        message.permission_list = (object.permission_list !== undefined && object.permission_list !== null)
            ? exports.PermissionList.fromPartial(object.permission_list)
            : undefined;
        message.role_channel_active = (_m = object.role_channel_active) !== null && _m !== void 0 ? _m : 0;
        message.channel_ids = ((_o = object.channel_ids) === null || _o === void 0 ? void 0 : _o.map((e) => e)) || [];
        message.max_level_permission = (_p = object.max_level_permission) !== null && _p !== void 0 ? _p : 0;
        message.order_role = (_q = object.order_role) !== null && _q !== void 0 ? _q : 0;
        return message;
    },
};
function createBaseEventManagement() {
    return {
        id: "",
        title: "",
        logo: "",
        description: "",
        active: 0,
        start_event: 0,
        creator_id: "",
        clan_id: "",
        channel_voice_id: "",
        address: "",
        start_time: undefined,
        end_time: undefined,
        user_ids: [],
        create_time: undefined,
        max_permission: 0,
        channel_id: "",
        event_status: 0,
        repeat_type: 0,
        is_private: false,
        meet_room: undefined,
    };
}
exports.EventManagement = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.logo !== "") {
            writer.uint32(26).string(message.logo);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        if (message.active !== 0) {
            writer.uint32(40).int32(message.active);
        }
        if (message.start_event !== 0) {
            writer.uint32(48).int32(message.start_event);
        }
        if (message.creator_id !== "") {
            writer.uint32(58).string(message.creator_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(66).string(message.clan_id);
        }
        if (message.channel_voice_id !== "") {
            writer.uint32(74).string(message.channel_voice_id);
        }
        if (message.address !== "") {
            writer.uint32(82).string(message.address);
        }
        if (message.start_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.start_time), writer.uint32(90).fork()).ldelim();
        }
        if (message.end_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.end_time), writer.uint32(98).fork()).ldelim();
        }
        for (const v of message.user_ids) {
            writer.uint32(106).string(v);
        }
        if (message.create_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.create_time), writer.uint32(114).fork()).ldelim();
        }
        if (message.max_permission !== 0) {
            writer.uint32(120).int32(message.max_permission);
        }
        if (message.channel_id !== "") {
            writer.uint32(130).string(message.channel_id);
        }
        if (message.event_status !== 0) {
            writer.uint32(136).int32(message.event_status);
        }
        if (message.repeat_type !== 0) {
            writer.uint32(144).int32(message.repeat_type);
        }
        if (message.is_private !== false) {
            writer.uint32(152).bool(message.is_private);
        }
        if (message.meet_room !== undefined) {
            exports.GenerateMezonMeetResponse.encode(message.meet_room, writer.uint32(162).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventManagement();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.logo = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.active = reader.int32();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.start_event = reader.int32();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.channel_voice_id = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.start_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.end_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.user_ids.push(reader.string());
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.create_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 15:
                    if (tag !== 120) {
                        break;
                    }
                    message.max_permission = reader.int32();
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 17:
                    if (tag !== 136) {
                        break;
                    }
                    message.event_status = reader.int32();
                    continue;
                case 18:
                    if (tag !== 144) {
                        break;
                    }
                    message.repeat_type = reader.int32();
                    continue;
                case 19:
                    if (tag !== 152) {
                        break;
                    }
                    message.is_private = reader.bool();
                    continue;
                case 20:
                    if (tag !== 162) {
                        break;
                    }
                    message.meet_room = exports.GenerateMezonMeetResponse.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            active: isSet(object.active) ? globalThis.Number(object.active) : 0,
            start_event: isSet(object.start_event) ? globalThis.Number(object.start_event) : 0,
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_voice_id: isSet(object.channel_voice_id) ? globalThis.String(object.channel_voice_id) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            start_time: isSet(object.start_time) ? fromJsonTimestamp(object.start_time) : undefined,
            end_time: isSet(object.end_time) ? fromJsonTimestamp(object.end_time) : undefined,
            user_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_ids) ? object.user_ids.map((e) => globalThis.String(e)) : [],
            create_time: isSet(object.create_time) ? fromJsonTimestamp(object.create_time) : undefined,
            max_permission: isSet(object.max_permission) ? globalThis.Number(object.max_permission) : 0,
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            event_status: isSet(object.event_status) ? globalThis.Number(object.event_status) : 0,
            repeat_type: isSet(object.repeat_type) ? globalThis.Number(object.repeat_type) : 0,
            is_private: isSet(object.is_private) ? globalThis.Boolean(object.is_private) : false,
            meet_room: isSet(object.meet_room) ? exports.GenerateMezonMeetResponse.fromJSON(object.meet_room) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.logo !== "") {
            obj.logo = message.logo;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.active !== 0) {
            obj.active = Math.round(message.active);
        }
        if (message.start_event !== 0) {
            obj.start_event = Math.round(message.start_event);
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_voice_id !== "") {
            obj.channel_voice_id = message.channel_voice_id;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.start_time !== undefined) {
            obj.start_time = message.start_time.toISOString();
        }
        if (message.end_time !== undefined) {
            obj.end_time = message.end_time.toISOString();
        }
        if ((_a = message.user_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.user_ids = message.user_ids;
        }
        if (message.create_time !== undefined) {
            obj.create_time = message.create_time.toISOString();
        }
        if (message.max_permission !== 0) {
            obj.max_permission = Math.round(message.max_permission);
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.event_status !== 0) {
            obj.event_status = Math.round(message.event_status);
        }
        if (message.repeat_type !== 0) {
            obj.repeat_type = Math.round(message.repeat_type);
        }
        if (message.is_private !== false) {
            obj.is_private = message.is_private;
        }
        if (message.meet_room !== undefined) {
            obj.meet_room = exports.GenerateMezonMeetResponse.toJSON(message.meet_room);
        }
        return obj;
    },
    create(base) {
        return exports.EventManagement.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
        const message = createBaseEventManagement();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.title = (_b = object.title) !== null && _b !== void 0 ? _b : "";
        message.logo = (_c = object.logo) !== null && _c !== void 0 ? _c : "";
        message.description = (_d = object.description) !== null && _d !== void 0 ? _d : "";
        message.active = (_e = object.active) !== null && _e !== void 0 ? _e : 0;
        message.start_event = (_f = object.start_event) !== null && _f !== void 0 ? _f : 0;
        message.creator_id = (_g = object.creator_id) !== null && _g !== void 0 ? _g : "";
        message.clan_id = (_h = object.clan_id) !== null && _h !== void 0 ? _h : "";
        message.channel_voice_id = (_j = object.channel_voice_id) !== null && _j !== void 0 ? _j : "";
        message.address = (_k = object.address) !== null && _k !== void 0 ? _k : "";
        message.start_time = (_l = object.start_time) !== null && _l !== void 0 ? _l : undefined;
        message.end_time = (_m = object.end_time) !== null && _m !== void 0 ? _m : undefined;
        message.user_ids = ((_o = object.user_ids) === null || _o === void 0 ? void 0 : _o.map((e) => e)) || [];
        message.create_time = (_p = object.create_time) !== null && _p !== void 0 ? _p : undefined;
        message.max_permission = (_q = object.max_permission) !== null && _q !== void 0 ? _q : 0;
        message.channel_id = (_r = object.channel_id) !== null && _r !== void 0 ? _r : "";
        message.event_status = (_s = object.event_status) !== null && _s !== void 0 ? _s : 0;
        message.repeat_type = (_t = object.repeat_type) !== null && _t !== void 0 ? _t : 0;
        message.is_private = (_u = object.is_private) !== null && _u !== void 0 ? _u : false;
        message.meet_room = (object.meet_room !== undefined && object.meet_room !== null)
            ? exports.GenerateMezonMeetResponse.fromPartial(object.meet_room)
            : undefined;
        return message;
    },
};
function createBasePermission() {
    return { id: "", title: "", slug: "", description: "", active: 0, scope: 0, level: 0 };
}
exports.Permission = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.slug !== "") {
            writer.uint32(26).string(message.slug);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        if (message.active !== 0) {
            writer.uint32(40).int32(message.active);
        }
        if (message.scope !== 0) {
            writer.uint32(48).int32(message.scope);
        }
        if (message.level !== 0) {
            writer.uint32(56).int32(message.level);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePermission();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.slug = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.active = reader.int32();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.scope = reader.int32();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.level = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            active: isSet(object.active) ? globalThis.Number(object.active) : 0,
            scope: isSet(object.scope) ? globalThis.Number(object.scope) : 0,
            level: isSet(object.level) ? globalThis.Number(object.level) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.slug !== "") {
            obj.slug = message.slug;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.active !== 0) {
            obj.active = Math.round(message.active);
        }
        if (message.scope !== 0) {
            obj.scope = Math.round(message.scope);
        }
        if (message.level !== 0) {
            obj.level = Math.round(message.level);
        }
        return obj;
    },
    create(base) {
        return exports.Permission.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBasePermission();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.title = (_b = object.title) !== null && _b !== void 0 ? _b : "";
        message.slug = (_c = object.slug) !== null && _c !== void 0 ? _c : "";
        message.description = (_d = object.description) !== null && _d !== void 0 ? _d : "";
        message.active = (_e = object.active) !== null && _e !== void 0 ? _e : 0;
        message.scope = (_f = object.scope) !== null && _f !== void 0 ? _f : 0;
        message.level = (_g = object.level) !== null && _g !== void 0 ? _g : 0;
        return message;
    },
};
function createBaseNotificationSetting() {
    return { id: "", notification_setting_type: 0 };
}
exports.NotificationSetting = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.notification_setting_type !== 0) {
            writer.uint32(16).int32(message.notification_setting_type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNotificationSetting();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.notification_setting_type = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            notification_setting_type: isSet(object.notification_setting_type)
                ? globalThis.Number(object.notification_setting_type)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.notification_setting_type !== 0) {
            obj.notification_setting_type = Math.round(message.notification_setting_type);
        }
        return obj;
    },
    create(base) {
        return exports.NotificationSetting.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseNotificationSetting();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.notification_setting_type = (_b = object.notification_setting_type) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseDeletePinMessage() {
    return { message_id: "" };
}
exports.DeletePinMessage = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.message_id !== "") {
            writer.uint32(10).string(message.message_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeletePinMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.message_id !== "") {
            obj.message_id = message.message_id;
        }
        return obj;
    },
    create(base) {
        return exports.DeletePinMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDeletePinMessage();
        message.message_id = (_a = object.message_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBasePinMessage() {
    return {
        id: "",
        message_id: "",
        channel_id: "",
        sender_id: "",
        content: "",
        username: "",
        avatar: "",
        create_time: undefined,
        create_time_seconds: 0,
        attachment: "",
    };
}
exports.PinMessage = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.message_id !== "") {
            writer.uint32(18).string(message.message_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(26).string(message.channel_id);
        }
        if (message.sender_id !== "") {
            writer.uint32(34).string(message.sender_id);
        }
        if (message.content !== "") {
            writer.uint32(42).string(message.content);
        }
        if (message.username !== "") {
            writer.uint32(50).string(message.username);
        }
        if (message.avatar !== "") {
            writer.uint32(58).string(message.avatar);
        }
        if (message.create_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.create_time), writer.uint32(66).fork()).ldelim();
        }
        if (message.create_time_seconds !== 0) {
            writer.uint32(72).uint32(message.create_time_seconds);
        }
        if (message.attachment !== "") {
            writer.uint32(82).string(message.attachment);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePinMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.sender_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.avatar = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.create_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.create_time_seconds = reader.uint32();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.attachment = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            sender_id: isSet(object.sender_id) ? globalThis.String(object.sender_id) : "",
            content: isSet(object.content) ? globalThis.String(object.content) : "",
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
            create_time: isSet(object.create_time) ? fromJsonTimestamp(object.create_time) : undefined,
            create_time_seconds: isSet(object.create_time_seconds) ? globalThis.Number(object.create_time_seconds) : 0,
            attachment: isSet(object.attachment) ? globalThis.String(object.attachment) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.message_id !== "") {
            obj.message_id = message.message_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.sender_id !== "") {
            obj.sender_id = message.sender_id;
        }
        if (message.content !== "") {
            obj.content = message.content;
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.avatar !== "") {
            obj.avatar = message.avatar;
        }
        if (message.create_time !== undefined) {
            obj.create_time = message.create_time.toISOString();
        }
        if (message.create_time_seconds !== 0) {
            obj.create_time_seconds = Math.round(message.create_time_seconds);
        }
        if (message.attachment !== "") {
            obj.attachment = message.attachment;
        }
        return obj;
    },
    create(base) {
        return exports.PinMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const message = createBasePinMessage();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.message_id = (_b = object.message_id) !== null && _b !== void 0 ? _b : "";
        message.channel_id = (_c = object.channel_id) !== null && _c !== void 0 ? _c : "";
        message.sender_id = (_d = object.sender_id) !== null && _d !== void 0 ? _d : "";
        message.content = (_e = object.content) !== null && _e !== void 0 ? _e : "";
        message.username = (_f = object.username) !== null && _f !== void 0 ? _f : "";
        message.avatar = (_g = object.avatar) !== null && _g !== void 0 ? _g : "";
        message.create_time = (_h = object.create_time) !== null && _h !== void 0 ? _h : undefined;
        message.create_time_seconds = (_j = object.create_time_seconds) !== null && _j !== void 0 ? _j : 0;
        message.attachment = (_k = object.attachment) !== null && _k !== void 0 ? _k : "";
        return message;
    },
};
function createBasePinMessagesList() {
    return { pin_messages_list: [] };
}
exports.PinMessagesList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.pin_messages_list) {
            exports.PinMessage.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePinMessagesList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.pin_messages_list.push(exports.PinMessage.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pin_messages_list: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.pin_messages_list)
                ? object.pin_messages_list.map((e) => exports.PinMessage.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.pin_messages_list) === null || _a === void 0 ? void 0 : _a.length) {
            obj.pin_messages_list = message.pin_messages_list.map((e) => exports.PinMessage.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.PinMessagesList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBasePinMessagesList();
        message.pin_messages_list = ((_a = object.pin_messages_list) === null || _a === void 0 ? void 0 : _a.map((e) => exports.PinMessage.fromPartial(e))) || [];
        return message;
    },
};
function createBaseNotificationUserChannel() {
    return { id: "", notification_setting_type: 0, time_mute: undefined, active: 0, channel_id: "" };
}
exports.NotificationUserChannel = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.notification_setting_type !== 0) {
            writer.uint32(16).int32(message.notification_setting_type);
        }
        if (message.time_mute !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.time_mute), writer.uint32(26).fork()).ldelim();
        }
        if (message.active !== 0) {
            writer.uint32(32).int32(message.active);
        }
        if (message.channel_id !== "") {
            writer.uint32(42).string(message.channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNotificationUserChannel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.notification_setting_type = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.time_mute = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.active = reader.int32();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            notification_setting_type: isSet(object.notification_setting_type)
                ? globalThis.Number(object.notification_setting_type)
                : 0,
            time_mute: isSet(object.time_mute) ? fromJsonTimestamp(object.time_mute) : undefined,
            active: isSet(object.active) ? globalThis.Number(object.active) : 0,
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.notification_setting_type !== 0) {
            obj.notification_setting_type = Math.round(message.notification_setting_type);
        }
        if (message.time_mute !== undefined) {
            obj.time_mute = message.time_mute.toISOString();
        }
        if (message.active !== 0) {
            obj.active = Math.round(message.active);
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.NotificationUserChannel.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseNotificationUserChannel();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.notification_setting_type = (_b = object.notification_setting_type) !== null && _b !== void 0 ? _b : 0;
        message.time_mute = (_c = object.time_mute) !== null && _c !== void 0 ? _c : undefined;
        message.active = (_d = object.active) !== null && _d !== void 0 ? _d : 0;
        message.channel_id = (_e = object.channel_id) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseNotifiReactMessage() {
    return { id: "", user_id: "", channel_id: "" };
}
exports.NotifiReactMessage = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.user_id !== "") {
            writer.uint32(18).string(message.user_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(26).string(message.channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNotifiReactMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.NotifiReactMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseNotifiReactMessage();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.user_id = (_b = object.user_id) !== null && _b !== void 0 ? _b : "";
        message.channel_id = (_c = object.channel_id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseDefaultNotificationClan() {
    return { clan_id: "" };
}
exports.DefaultNotificationClan = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDefaultNotificationClan();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.DefaultNotificationClan.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDefaultNotificationClan();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseDefaultNotificationCategory() {
    return { category_id: "" };
}
exports.DefaultNotificationCategory = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.category_id !== "") {
            writer.uint32(10).string(message.category_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDefaultNotificationCategory();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.category_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { category_id: isSet(object.category_id) ? globalThis.String(object.category_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.category_id !== "") {
            obj.category_id = message.category_id;
        }
        return obj;
    },
    create(base) {
        return exports.DefaultNotificationCategory.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDefaultNotificationCategory();
        message.category_id = (_a = object.category_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseNotificationChannel() {
    return { channel_id: "" };
}
exports.NotificationChannel = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNotificationChannel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.NotificationChannel.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseNotificationChannel();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseNotificationClan() {
    return { clan_id: "" };
}
exports.NotificationClan = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNotificationClan();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.NotificationClan.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseNotificationClan();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseNotificationSettingList() {
    return { notification_setting: [] };
}
exports.NotificationSettingList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.notification_setting) {
            exports.NotificationSetting.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNotificationSettingList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.notification_setting.push(exports.NotificationSetting.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            notification_setting: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.notification_setting)
                ? object.notification_setting.map((e) => exports.NotificationSetting.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.notification_setting) === null || _a === void 0 ? void 0 : _a.length) {
            obj.notification_setting = message.notification_setting.map((e) => exports.NotificationSetting.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.NotificationSettingList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseNotificationSettingList();
        message.notification_setting = ((_a = object.notification_setting) === null || _a === void 0 ? void 0 : _a.map((e) => exports.NotificationSetting.fromPartial(e))) || [];
        return message;
    },
};
function createBaseSetNotificationRequest() {
    return { channel_category_id: "", notification_type: 0, time_mute: undefined, clan_id: "" };
}
exports.SetNotificationRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_category_id !== "") {
            writer.uint32(10).string(message.channel_category_id);
        }
        if (message.notification_type !== 0) {
            writer.uint32(16).int32(message.notification_type);
        }
        if (message.time_mute !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.time_mute), writer.uint32(26).fork()).ldelim();
        }
        if (message.clan_id !== "") {
            writer.uint32(34).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetNotificationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_category_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.notification_type = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.time_mute = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_category_id: isSet(object.channel_category_id) ? globalThis.String(object.channel_category_id) : "",
            notification_type: isSet(object.notification_type) ? globalThis.Number(object.notification_type) : 0,
            time_mute: isSet(object.time_mute) ? fromJsonTimestamp(object.time_mute) : undefined,
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel_category_id !== "") {
            obj.channel_category_id = message.channel_category_id;
        }
        if (message.notification_type !== 0) {
            obj.notification_type = Math.round(message.notification_type);
        }
        if (message.time_mute !== undefined) {
            obj.time_mute = message.time_mute.toISOString();
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.SetNotificationRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseSetNotificationRequest();
        message.channel_category_id = (_a = object.channel_category_id) !== null && _a !== void 0 ? _a : "";
        message.notification_type = (_b = object.notification_type) !== null && _b !== void 0 ? _b : 0;
        message.time_mute = (_c = object.time_mute) !== null && _c !== void 0 ? _c : undefined;
        message.clan_id = (_d = object.clan_id) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBasePinMessageRequest() {
    return { message_id: "", channel_id: "", clan_id: "" };
}
exports.PinMessageRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.message_id !== "") {
            writer.uint32(10).string(message.message_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(26).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePinMessageRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.message_id !== "") {
            obj.message_id = message.message_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.PinMessageRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePinMessageRequest();
        message.message_id = (_a = object.message_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseSetMuteNotificationRequest() {
    return { id: "", notification_type: 0, active: 0 };
}
exports.SetMuteNotificationRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.notification_type !== 0) {
            writer.uint32(16).int32(message.notification_type);
        }
        if (message.active !== 0) {
            writer.uint32(24).int32(message.active);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetMuteNotificationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.notification_type = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.active = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            notification_type: isSet(object.notification_type) ? globalThis.Number(object.notification_type) : 0,
            active: isSet(object.active) ? globalThis.Number(object.active) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.notification_type !== 0) {
            obj.notification_type = Math.round(message.notification_type);
        }
        if (message.active !== 0) {
            obj.active = Math.round(message.active);
        }
        return obj;
    },
    create(base) {
        return exports.SetMuteNotificationRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSetMuteNotificationRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.notification_type = (_b = object.notification_type) !== null && _b !== void 0 ? _b : 0;
        message.active = (_c = object.active) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseHashtagDmListRequest() {
    return { user_id: [], limit: undefined };
}
exports.HashtagDmListRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.user_id) {
            writer.uint32(10).string(v);
        }
        if (message.limit !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.limit }, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHashtagDmListRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user_id.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.limit = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user_id: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_id) ? object.user_id.map((e) => globalThis.String(e)) : [],
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.user_id) === null || _a === void 0 ? void 0 : _a.length) {
            obj.user_id = message.user_id;
        }
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        return obj;
    },
    create(base) {
        return exports.HashtagDmListRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseHashtagDmListRequest();
        message.user_id = ((_a = object.user_id) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.limit = (_b = object.limit) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
function createBaseHashtagDmList() {
    return { hashtag_dm: [] };
}
exports.HashtagDmList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.hashtag_dm) {
            exports.HashtagDm.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHashtagDmList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.hashtag_dm.push(exports.HashtagDm.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            hashtag_dm: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.hashtag_dm)
                ? object.hashtag_dm.map((e) => exports.HashtagDm.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.hashtag_dm) === null || _a === void 0 ? void 0 : _a.length) {
            obj.hashtag_dm = message.hashtag_dm.map((e) => exports.HashtagDm.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.HashtagDmList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseHashtagDmList();
        message.hashtag_dm = ((_a = object.hashtag_dm) === null || _a === void 0 ? void 0 : _a.map((e) => exports.HashtagDm.fromPartial(e))) || [];
        return message;
    },
};
function createBaseHashtagDm() {
    return {
        channel_id: "",
        channel_label: "",
        clan_id: "",
        clan_name: "",
        meeting_code: "",
        type: 0,
        channel_private: 0,
        parent_id: "",
    };
}
exports.HashtagDm = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        if (message.channel_label !== "") {
            writer.uint32(18).string(message.channel_label);
        }
        if (message.clan_id !== "") {
            writer.uint32(26).string(message.clan_id);
        }
        if (message.clan_name !== "") {
            writer.uint32(34).string(message.clan_name);
        }
        if (message.meeting_code !== "") {
            writer.uint32(42).string(message.meeting_code);
        }
        if (message.type !== 0) {
            writer.uint32(48).int32(message.type);
        }
        if (message.channel_private !== 0) {
            writer.uint32(56).int32(message.channel_private);
        }
        if (message.parent_id !== "") {
            writer.uint32(66).string(message.parent_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHashtagDm();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_label = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clan_name = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.meeting_code = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.channel_private = reader.int32();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.parent_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            channel_label: isSet(object.channel_label) ? globalThis.String(object.channel_label) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
            meeting_code: isSet(object.meeting_code) ? globalThis.String(object.meeting_code) : "",
            type: isSet(object.type) ? globalThis.Number(object.type) : 0,
            channel_private: isSet(object.channel_private) ? globalThis.Number(object.channel_private) : 0,
            parent_id: isSet(object.parent_id) ? globalThis.String(object.parent_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.channel_label !== "") {
            obj.channel_label = message.channel_label;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.clan_name !== "") {
            obj.clan_name = message.clan_name;
        }
        if (message.meeting_code !== "") {
            obj.meeting_code = message.meeting_code;
        }
        if (message.type !== 0) {
            obj.type = Math.round(message.type);
        }
        if (message.channel_private !== 0) {
            obj.channel_private = Math.round(message.channel_private);
        }
        if (message.parent_id !== "") {
            obj.parent_id = message.parent_id;
        }
        return obj;
    },
    create(base) {
        return exports.HashtagDm.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseHashtagDm();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        message.channel_label = (_b = object.channel_label) !== null && _b !== void 0 ? _b : "";
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : "";
        message.clan_name = (_d = object.clan_name) !== null && _d !== void 0 ? _d : "";
        message.meeting_code = (_e = object.meeting_code) !== null && _e !== void 0 ? _e : "";
        message.type = (_f = object.type) !== null && _f !== void 0 ? _f : 0;
        message.channel_private = (_g = object.channel_private) !== null && _g !== void 0 ? _g : 0;
        message.parent_id = (_h = object.parent_id) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseNotificationChannelCategorySettingList() {
    return { notification_channel_category_settings_list: [] };
}
exports.NotificationChannelCategorySettingList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.notification_channel_category_settings_list) {
            exports.NotificationChannelCategorySetting.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNotificationChannelCategorySettingList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.notification_channel_category_settings_list.push(exports.NotificationChannelCategorySetting.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            notification_channel_category_settings_list: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.notification_channel_category_settings_list)
                ? object.notification_channel_category_settings_list.map((e) => exports.NotificationChannelCategorySetting.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.notification_channel_category_settings_list) === null || _a === void 0 ? void 0 : _a.length) {
            obj.notification_channel_category_settings_list = message.notification_channel_category_settings_list.map((e) => exports.NotificationChannelCategorySetting.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.NotificationChannelCategorySettingList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseNotificationChannelCategorySettingList();
        message.notification_channel_category_settings_list =
            ((_a = object.notification_channel_category_settings_list) === null || _a === void 0 ? void 0 : _a.map((e) => exports.NotificationChannelCategorySetting.fromPartial(e))) || [];
        return message;
    },
};
function createBaseNotificationChannelCategorySetting() {
    return { id: "", channel_category_label: "", notification_setting_type: 0, channel_category_title: "", action: 0 };
}
exports.NotificationChannelCategorySetting = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.channel_category_label !== "") {
            writer.uint32(18).string(message.channel_category_label);
        }
        if (message.notification_setting_type !== 0) {
            writer.uint32(24).int32(message.notification_setting_type);
        }
        if (message.channel_category_title !== "") {
            writer.uint32(34).string(message.channel_category_title);
        }
        if (message.action !== 0) {
            writer.uint32(40).int32(message.action);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNotificationChannelCategorySetting();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_category_label = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.notification_setting_type = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.channel_category_title = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.action = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            channel_category_label: isSet(object.channel_category_label)
                ? globalThis.String(object.channel_category_label)
                : "",
            notification_setting_type: isSet(object.notification_setting_type)
                ? globalThis.Number(object.notification_setting_type)
                : 0,
            channel_category_title: isSet(object.channel_category_title)
                ? globalThis.String(object.channel_category_title)
                : "",
            action: isSet(object.action) ? globalThis.Number(object.action) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.channel_category_label !== "") {
            obj.channel_category_label = message.channel_category_label;
        }
        if (message.notification_setting_type !== 0) {
            obj.notification_setting_type = Math.round(message.notification_setting_type);
        }
        if (message.channel_category_title !== "") {
            obj.channel_category_title = message.channel_category_title;
        }
        if (message.action !== 0) {
            obj.action = Math.round(message.action);
        }
        return obj;
    },
    create(base) {
        return exports.NotificationChannelCategorySetting.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseNotificationChannelCategorySetting();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.channel_category_label = (_b = object.channel_category_label) !== null && _b !== void 0 ? _b : "";
        message.notification_setting_type = (_c = object.notification_setting_type) !== null && _c !== void 0 ? _c : 0;
        message.channel_category_title = (_d = object.channel_category_title) !== null && _d !== void 0 ? _d : "";
        message.action = (_e = object.action) !== null && _e !== void 0 ? _e : 0;
        return message;
    },
};
function createBaseSetDefaultNotificationRequest() {
    return { clan_id: "", notification_type: 0, category_id: "" };
}
exports.SetDefaultNotificationRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.notification_type !== 0) {
            writer.uint32(16).int32(message.notification_type);
        }
        if (message.category_id !== "") {
            writer.uint32(26).string(message.category_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultNotificationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.notification_type = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.category_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            notification_type: isSet(object.notification_type) ? globalThis.Number(object.notification_type) : 0,
            category_id: isSet(object.category_id) ? globalThis.String(object.category_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.notification_type !== 0) {
            obj.notification_type = Math.round(message.notification_type);
        }
        if (message.category_id !== "") {
            obj.category_id = message.category_id;
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultNotificationRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSetDefaultNotificationRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.notification_type = (_b = object.notification_type) !== null && _b !== void 0 ? _b : 0;
        message.category_id = (_c = object.category_id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseRoleList() {
    return { roles: [], next_cursor: "", prev_cursor: "", cacheable_cursor: "" };
}
exports.RoleList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.roles) {
            exports.Role.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.next_cursor !== "") {
            writer.uint32(18).string(message.next_cursor);
        }
        if (message.prev_cursor !== "") {
            writer.uint32(26).string(message.prev_cursor);
        }
        if (message.cacheable_cursor !== "") {
            writer.uint32(34).string(message.cacheable_cursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRoleList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.roles.push(exports.Role.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.next_cursor = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.prev_cursor = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.cacheable_cursor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            roles: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.roles) ? object.roles.map((e) => exports.Role.fromJSON(e)) : [],
            next_cursor: isSet(object.next_cursor) ? globalThis.String(object.next_cursor) : "",
            prev_cursor: isSet(object.prev_cursor) ? globalThis.String(object.prev_cursor) : "",
            cacheable_cursor: isSet(object.cacheable_cursor) ? globalThis.String(object.cacheable_cursor) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.roles) === null || _a === void 0 ? void 0 : _a.length) {
            obj.roles = message.roles.map((e) => exports.Role.toJSON(e));
        }
        if (message.next_cursor !== "") {
            obj.next_cursor = message.next_cursor;
        }
        if (message.prev_cursor !== "") {
            obj.prev_cursor = message.prev_cursor;
        }
        if (message.cacheable_cursor !== "") {
            obj.cacheable_cursor = message.cacheable_cursor;
        }
        return obj;
    },
    create(base) {
        return exports.RoleList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseRoleList();
        message.roles = ((_a = object.roles) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Role.fromPartial(e))) || [];
        message.next_cursor = (_b = object.next_cursor) !== null && _b !== void 0 ? _b : "";
        message.prev_cursor = (_c = object.prev_cursor) !== null && _c !== void 0 ? _c : "";
        message.cacheable_cursor = (_d = object.cacheable_cursor) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseEventList() {
    return { events: [] };
}
exports.EventList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.events) {
            exports.EventManagement.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.events.push(exports.EventManagement.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            events: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.events)
                ? object.events.map((e) => exports.EventManagement.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.events) === null || _a === void 0 ? void 0 : _a.length) {
            obj.events = message.events.map((e) => exports.EventManagement.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.EventList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEventList();
        message.events = ((_a = object.events) === null || _a === void 0 ? void 0 : _a.map((e) => exports.EventManagement.fromPartial(e))) || [];
        return message;
    },
};
function createBasePermissionList() {
    return { permissions: [], max_level_permission: 0 };
}
exports.PermissionList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.permissions) {
            exports.Permission.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.max_level_permission !== 0) {
            writer.uint32(16).int32(message.max_level_permission);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePermissionList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.permissions.push(exports.Permission.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.max_level_permission = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            permissions: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.permissions)
                ? object.permissions.map((e) => exports.Permission.fromJSON(e))
                : [],
            max_level_permission: isSet(object.max_level_permission) ? globalThis.Number(object.max_level_permission) : 0,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.permissions) === null || _a === void 0 ? void 0 : _a.length) {
            obj.permissions = message.permissions.map((e) => exports.Permission.toJSON(e));
        }
        if (message.max_level_permission !== 0) {
            obj.max_level_permission = Math.round(message.max_level_permission);
        }
        return obj;
    },
    create(base) {
        return exports.PermissionList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBasePermissionList();
        message.permissions = ((_a = object.permissions) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Permission.fromPartial(e))) || [];
        message.max_level_permission = (_b = object.max_level_permission) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseListPermissionsRequest() {
    return { role_id: "" };
}
exports.ListPermissionsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.role_id !== "") {
            writer.uint32(10).string(message.role_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListPermissionsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.role_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { role_id: isSet(object.role_id) ? globalThis.String(object.role_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.role_id !== "") {
            obj.role_id = message.role_id;
        }
        return obj;
    },
    create(base) {
        return exports.ListPermissionsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListPermissionsRequest();
        message.role_id = (_a = object.role_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseListRoleUsersRequest() {
    return { role_id: "", limit: undefined, cursor: "" };
}
exports.ListRoleUsersRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.role_id !== "") {
            writer.uint32(10).string(message.role_id);
        }
        if (message.limit !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.limit }, writer.uint32(18).fork()).ldelim();
        }
        if (message.cursor !== "") {
            writer.uint32(26).string(message.cursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListRoleUsersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.role_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.limit = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            role_id: isSet(object.role_id) ? globalThis.String(object.role_id) : "",
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.role_id !== "") {
            obj.role_id = message.role_id;
        }
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        return obj;
    },
    create(base) {
        return exports.ListRoleUsersRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseListRoleUsersRequest();
        message.role_id = (_a = object.role_id) !== null && _a !== void 0 ? _a : "";
        message.limit = (_b = object.limit) !== null && _b !== void 0 ? _b : undefined;
        message.cursor = (_c = object.cursor) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseListPermissionOfUsersRequest() {
    return { clan_id: "", channel_id: "" };
}
exports.ListPermissionOfUsersRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListPermissionOfUsersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.ListPermissionOfUsersRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseListPermissionOfUsersRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseRoleUserList() {
    return { role_users: [], cursor: "" };
}
exports.RoleUserList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.role_users) {
            exports.RoleUserList_RoleUser.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.cursor !== "") {
            writer.uint32(18).string(message.cursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRoleUserList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.role_users.push(exports.RoleUserList_RoleUser.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            role_users: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.role_users)
                ? object.role_users.map((e) => exports.RoleUserList_RoleUser.fromJSON(e))
                : [],
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.role_users) === null || _a === void 0 ? void 0 : _a.length) {
            obj.role_users = message.role_users.map((e) => exports.RoleUserList_RoleUser.toJSON(e));
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        return obj;
    },
    create(base) {
        return exports.RoleUserList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRoleUserList();
        message.role_users = ((_a = object.role_users) === null || _a === void 0 ? void 0 : _a.map((e) => exports.RoleUserList_RoleUser.fromPartial(e))) || [];
        message.cursor = (_b = object.cursor) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseRoleUserList_RoleUser() {
    return { id: "", username: "", display_name: "", avatar_url: "", lang_tag: "", location: "", online: false };
}
exports.RoleUserList_RoleUser = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.username !== "") {
            writer.uint32(18).string(message.username);
        }
        if (message.display_name !== "") {
            writer.uint32(26).string(message.display_name);
        }
        if (message.avatar_url !== "") {
            writer.uint32(34).string(message.avatar_url);
        }
        if (message.lang_tag !== "") {
            writer.uint32(42).string(message.lang_tag);
        }
        if (message.location !== "") {
            writer.uint32(50).string(message.location);
        }
        if (message.online !== false) {
            writer.uint32(56).bool(message.online);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRoleUserList_RoleUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.display_name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.avatar_url = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.lang_tag = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.location = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.online = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            display_name: isSet(object.display_name) ? globalThis.String(object.display_name) : "",
            avatar_url: isSet(object.avatar_url) ? globalThis.String(object.avatar_url) : "",
            lang_tag: isSet(object.lang_tag) ? globalThis.String(object.lang_tag) : "",
            location: isSet(object.location) ? globalThis.String(object.location) : "",
            online: isSet(object.online) ? globalThis.Boolean(object.online) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.display_name !== "") {
            obj.display_name = message.display_name;
        }
        if (message.avatar_url !== "") {
            obj.avatar_url = message.avatar_url;
        }
        if (message.lang_tag !== "") {
            obj.lang_tag = message.lang_tag;
        }
        if (message.location !== "") {
            obj.location = message.location;
        }
        if (message.online !== false) {
            obj.online = message.online;
        }
        return obj;
    },
    create(base) {
        return exports.RoleUserList_RoleUser.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseRoleUserList_RoleUser();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.username = (_b = object.username) !== null && _b !== void 0 ? _b : "";
        message.display_name = (_c = object.display_name) !== null && _c !== void 0 ? _c : "";
        message.avatar_url = (_d = object.avatar_url) !== null && _d !== void 0 ? _d : "";
        message.lang_tag = (_e = object.lang_tag) !== null && _e !== void 0 ? _e : "";
        message.location = (_f = object.location) !== null && _f !== void 0 ? _f : "";
        message.online = (_g = object.online) !== null && _g !== void 0 ? _g : false;
        return message;
    },
};
function createBaseUserEventRequest() {
    return { clan_id: "", event_id: "" };
}
exports.UserEventRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.event_id !== "") {
            writer.uint32(18).string(message.event_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserEventRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.event_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            event_id: isSet(object.event_id) ? globalThis.String(object.event_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.event_id !== "") {
            obj.event_id = message.event_id;
        }
        return obj;
    },
    create(base) {
        return exports.UserEventRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUserEventRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.event_id = (_b = object.event_id) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseListEventsRequest() {
    return { clan_id: "" };
}
exports.ListEventsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListEventsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.ListEventsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListEventsRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseCreateRoleRequest() {
    return {
        title: "",
        color: "",
        role_icon: "",
        description: "",
        clan_id: "",
        display_online: 0,
        allow_mention: 0,
        max_permission_id: "",
        add_user_ids: [],
        active_permission_ids: [],
        order_role: 0,
    };
}
exports.CreateRoleRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.color !== "") {
            writer.uint32(18).string(message.color);
        }
        if (message.role_icon !== "") {
            writer.uint32(26).string(message.role_icon);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        if (message.clan_id !== "") {
            writer.uint32(42).string(message.clan_id);
        }
        if (message.display_online !== 0) {
            writer.uint32(48).int32(message.display_online);
        }
        if (message.allow_mention !== 0) {
            writer.uint32(56).int32(message.allow_mention);
        }
        if (message.max_permission_id !== "") {
            writer.uint32(66).string(message.max_permission_id);
        }
        for (const v of message.add_user_ids) {
            writer.uint32(74).string(v);
        }
        for (const v of message.active_permission_ids) {
            writer.uint32(82).string(v);
        }
        if (message.order_role !== 0) {
            writer.uint32(88).int32(message.order_role);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateRoleRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.color = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.role_icon = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.display_online = reader.int32();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.allow_mention = reader.int32();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.max_permission_id = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.add_user_ids.push(reader.string());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.active_permission_ids.push(reader.string());
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.order_role = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            color: isSet(object.color) ? globalThis.String(object.color) : "",
            role_icon: isSet(object.role_icon) ? globalThis.String(object.role_icon) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            display_online: isSet(object.display_online) ? globalThis.Number(object.display_online) : 0,
            allow_mention: isSet(object.allow_mention) ? globalThis.Number(object.allow_mention) : 0,
            max_permission_id: isSet(object.max_permission_id) ? globalThis.String(object.max_permission_id) : "",
            add_user_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.add_user_ids)
                ? object.add_user_ids.map((e) => globalThis.String(e))
                : [],
            active_permission_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.active_permission_ids)
                ? object.active_permission_ids.map((e) => globalThis.String(e))
                : [],
            order_role: isSet(object.order_role) ? globalThis.Number(object.order_role) : 0,
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.color !== "") {
            obj.color = message.color;
        }
        if (message.role_icon !== "") {
            obj.role_icon = message.role_icon;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.display_online !== 0) {
            obj.display_online = Math.round(message.display_online);
        }
        if (message.allow_mention !== 0) {
            obj.allow_mention = Math.round(message.allow_mention);
        }
        if (message.max_permission_id !== "") {
            obj.max_permission_id = message.max_permission_id;
        }
        if ((_a = message.add_user_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.add_user_ids = message.add_user_ids;
        }
        if ((_b = message.active_permission_ids) === null || _b === void 0 ? void 0 : _b.length) {
            obj.active_permission_ids = message.active_permission_ids;
        }
        if (message.order_role !== 0) {
            obj.order_role = Math.round(message.order_role);
        }
        return obj;
    },
    create(base) {
        return exports.CreateRoleRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseCreateRoleRequest();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.color = (_b = object.color) !== null && _b !== void 0 ? _b : "";
        message.role_icon = (_c = object.role_icon) !== null && _c !== void 0 ? _c : "";
        message.description = (_d = object.description) !== null && _d !== void 0 ? _d : "";
        message.clan_id = (_e = object.clan_id) !== null && _e !== void 0 ? _e : "";
        message.display_online = (_f = object.display_online) !== null && _f !== void 0 ? _f : 0;
        message.allow_mention = (_g = object.allow_mention) !== null && _g !== void 0 ? _g : 0;
        message.max_permission_id = (_h = object.max_permission_id) !== null && _h !== void 0 ? _h : "";
        message.add_user_ids = ((_j = object.add_user_ids) === null || _j === void 0 ? void 0 : _j.map((e) => e)) || [];
        message.active_permission_ids = ((_k = object.active_permission_ids) === null || _k === void 0 ? void 0 : _k.map((e) => e)) || [];
        message.order_role = (_l = object.order_role) !== null && _l !== void 0 ? _l : 0;
        return message;
    },
};
function createBaseCreateEventRequest() {
    return {
        title: "",
        logo: "",
        description: "",
        clan_id: "",
        channel_voice_id: "",
        address: "",
        start_time: undefined,
        end_time: undefined,
        event_id: "",
        event_status: 0,
        channel_id: "",
        action: 0,
        repeat_type: 0,
        creator_id: "",
        user_id: "",
        is_private: undefined,
        meet_room: undefined,
    };
}
exports.CreateEventRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.logo !== "") {
            writer.uint32(18).string(message.logo);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        if (message.clan_id !== "") {
            writer.uint32(34).string(message.clan_id);
        }
        if (message.channel_voice_id !== "") {
            writer.uint32(42).string(message.channel_voice_id);
        }
        if (message.address !== "") {
            writer.uint32(50).string(message.address);
        }
        if (message.start_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.start_time), writer.uint32(58).fork()).ldelim();
        }
        if (message.end_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.end_time), writer.uint32(66).fork()).ldelim();
        }
        if (message.event_id !== "") {
            writer.uint32(74).string(message.event_id);
        }
        if (message.event_status !== 0) {
            writer.uint32(80).int32(message.event_status);
        }
        if (message.channel_id !== "") {
            writer.uint32(90).string(message.channel_id);
        }
        if (message.action !== 0) {
            writer.uint32(96).int32(message.action);
        }
        if (message.repeat_type !== 0) {
            writer.uint32(104).int32(message.repeat_type);
        }
        if (message.creator_id !== "") {
            writer.uint32(114).string(message.creator_id);
        }
        if (message.user_id !== "") {
            writer.uint32(122).string(message.user_id);
        }
        if (message.is_private !== undefined) {
            wrappers_1.BoolValue.encode({ value: message.is_private }, writer.uint32(130).fork()).ldelim();
        }
        if (message.meet_room !== undefined) {
            exports.GenerateMezonMeetResponse.encode(message.meet_room, writer.uint32(138).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateEventRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.logo = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.channel_voice_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.start_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.end_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.event_id = reader.string();
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.event_status = reader.int32();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 12:
                    if (tag !== 96) {
                        break;
                    }
                    message.action = reader.int32();
                    continue;
                case 13:
                    if (tag !== 104) {
                        break;
                    }
                    message.repeat_type = reader.int32();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.is_private = wrappers_1.BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 17:
                    if (tag !== 138) {
                        break;
                    }
                    message.meet_room = exports.GenerateMezonMeetResponse.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_voice_id: isSet(object.channel_voice_id) ? globalThis.String(object.channel_voice_id) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            start_time: isSet(object.start_time) ? fromJsonTimestamp(object.start_time) : undefined,
            end_time: isSet(object.end_time) ? fromJsonTimestamp(object.end_time) : undefined,
            event_id: isSet(object.event_id) ? globalThis.String(object.event_id) : "",
            event_status: isSet(object.event_status) ? globalThis.Number(object.event_status) : 0,
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            action: isSet(object.action) ? globalThis.Number(object.action) : 0,
            repeat_type: isSet(object.repeat_type) ? globalThis.Number(object.repeat_type) : 0,
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            is_private: isSet(object.is_private) ? Boolean(object.is_private) : undefined,
            meet_room: isSet(object.meet_room) ? exports.GenerateMezonMeetResponse.fromJSON(object.meet_room) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.logo !== "") {
            obj.logo = message.logo;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_voice_id !== "") {
            obj.channel_voice_id = message.channel_voice_id;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.start_time !== undefined) {
            obj.start_time = message.start_time.toISOString();
        }
        if (message.end_time !== undefined) {
            obj.end_time = message.end_time.toISOString();
        }
        if (message.event_id !== "") {
            obj.event_id = message.event_id;
        }
        if (message.event_status !== 0) {
            obj.event_status = Math.round(message.event_status);
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.action !== 0) {
            obj.action = Math.round(message.action);
        }
        if (message.repeat_type !== 0) {
            obj.repeat_type = Math.round(message.repeat_type);
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.is_private !== undefined) {
            obj.is_private = message.is_private;
        }
        if (message.meet_room !== undefined) {
            obj.meet_room = exports.GenerateMezonMeetResponse.toJSON(message.meet_room);
        }
        return obj;
    },
    create(base) {
        return exports.CreateEventRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
        const message = createBaseCreateEventRequest();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.logo = (_b = object.logo) !== null && _b !== void 0 ? _b : "";
        message.description = (_c = object.description) !== null && _c !== void 0 ? _c : "";
        message.clan_id = (_d = object.clan_id) !== null && _d !== void 0 ? _d : "";
        message.channel_voice_id = (_e = object.channel_voice_id) !== null && _e !== void 0 ? _e : "";
        message.address = (_f = object.address) !== null && _f !== void 0 ? _f : "";
        message.start_time = (_g = object.start_time) !== null && _g !== void 0 ? _g : undefined;
        message.end_time = (_h = object.end_time) !== null && _h !== void 0 ? _h : undefined;
        message.event_id = (_j = object.event_id) !== null && _j !== void 0 ? _j : "";
        message.event_status = (_k = object.event_status) !== null && _k !== void 0 ? _k : 0;
        message.channel_id = (_l = object.channel_id) !== null && _l !== void 0 ? _l : "";
        message.action = (_m = object.action) !== null && _m !== void 0 ? _m : 0;
        message.repeat_type = (_o = object.repeat_type) !== null && _o !== void 0 ? _o : 0;
        message.creator_id = (_p = object.creator_id) !== null && _p !== void 0 ? _p : "";
        message.user_id = (_q = object.user_id) !== null && _q !== void 0 ? _q : "";
        message.is_private = (_r = object.is_private) !== null && _r !== void 0 ? _r : undefined;
        message.meet_room = (object.meet_room !== undefined && object.meet_room !== null)
            ? exports.GenerateMezonMeetResponse.fromPartial(object.meet_room)
            : undefined;
        return message;
    },
};
function createBaseUpdateEventRequest() {
    return {
        title: "",
        logo: "",
        description: "",
        event_id: "",
        channel_id: "",
        address: "",
        start_time: undefined,
        end_time: undefined,
        clan_id: "",
        creator_id: "",
        channel_voice_id: "",
        channel_id_old: "",
        repeat_type: 0,
    };
}
exports.UpdateEventRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.logo !== "") {
            writer.uint32(18).string(message.logo);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        if (message.event_id !== "") {
            writer.uint32(34).string(message.event_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(42).string(message.channel_id);
        }
        if (message.address !== "") {
            writer.uint32(50).string(message.address);
        }
        if (message.start_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.start_time), writer.uint32(58).fork()).ldelim();
        }
        if (message.end_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.end_time), writer.uint32(66).fork()).ldelim();
        }
        if (message.clan_id !== "") {
            writer.uint32(74).string(message.clan_id);
        }
        if (message.creator_id !== "") {
            writer.uint32(82).string(message.creator_id);
        }
        if (message.channel_voice_id !== "") {
            writer.uint32(90).string(message.channel_voice_id);
        }
        if (message.channel_id_old !== "") {
            writer.uint32(98).string(message.channel_id_old);
        }
        if (message.repeat_type !== 0) {
            writer.uint32(104).int32(message.repeat_type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateEventRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.logo = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.event_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.start_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.end_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.channel_voice_id = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.channel_id_old = reader.string();
                    continue;
                case 13:
                    if (tag !== 104) {
                        break;
                    }
                    message.repeat_type = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            event_id: isSet(object.event_id) ? globalThis.String(object.event_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            start_time: isSet(object.start_time) ? fromJsonTimestamp(object.start_time) : undefined,
            end_time: isSet(object.end_time) ? fromJsonTimestamp(object.end_time) : undefined,
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            channel_voice_id: isSet(object.channel_voice_id) ? globalThis.String(object.channel_voice_id) : "",
            channel_id_old: isSet(object.channel_id_old) ? globalThis.String(object.channel_id_old) : "",
            repeat_type: isSet(object.repeat_type) ? globalThis.Number(object.repeat_type) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.logo !== "") {
            obj.logo = message.logo;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.event_id !== "") {
            obj.event_id = message.event_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.start_time !== undefined) {
            obj.start_time = message.start_time.toISOString();
        }
        if (message.end_time !== undefined) {
            obj.end_time = message.end_time.toISOString();
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.channel_voice_id !== "") {
            obj.channel_voice_id = message.channel_voice_id;
        }
        if (message.channel_id_old !== "") {
            obj.channel_id_old = message.channel_id_old;
        }
        if (message.repeat_type !== 0) {
            obj.repeat_type = Math.round(message.repeat_type);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateEventRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = createBaseUpdateEventRequest();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.logo = (_b = object.logo) !== null && _b !== void 0 ? _b : "";
        message.description = (_c = object.description) !== null && _c !== void 0 ? _c : "";
        message.event_id = (_d = object.event_id) !== null && _d !== void 0 ? _d : "";
        message.channel_id = (_e = object.channel_id) !== null && _e !== void 0 ? _e : "";
        message.address = (_f = object.address) !== null && _f !== void 0 ? _f : "";
        message.start_time = (_g = object.start_time) !== null && _g !== void 0 ? _g : undefined;
        message.end_time = (_h = object.end_time) !== null && _h !== void 0 ? _h : undefined;
        message.clan_id = (_j = object.clan_id) !== null && _j !== void 0 ? _j : "";
        message.creator_id = (_k = object.creator_id) !== null && _k !== void 0 ? _k : "";
        message.channel_voice_id = (_l = object.channel_voice_id) !== null && _l !== void 0 ? _l : "";
        message.channel_id_old = (_m = object.channel_id_old) !== null && _m !== void 0 ? _m : "";
        message.repeat_type = (_o = object.repeat_type) !== null && _o !== void 0 ? _o : 0;
        return message;
    },
};
function createBaseDeleteRoleRequest() {
    return { role_id: "", channel_id: "", clan_id: "", role_label: "" };
}
exports.DeleteRoleRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.role_id !== "") {
            writer.uint32(10).string(message.role_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(26).string(message.clan_id);
        }
        if (message.role_label !== "") {
            writer.uint32(34).string(message.role_label);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteRoleRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.role_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.role_label = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            role_id: isSet(object.role_id) ? globalThis.String(object.role_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            role_label: isSet(object.role_label) ? globalThis.String(object.role_label) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.role_id !== "") {
            obj.role_id = message.role_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.role_label !== "") {
            obj.role_label = message.role_label;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteRoleRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseDeleteRoleRequest();
        message.role_id = (_a = object.role_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : "";
        message.role_label = (_d = object.role_label) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseDeleteEventRequest() {
    return { event_id: "", clan_id: "", creator_id: "", event_label: "", channel_id: "" };
}
exports.DeleteEventRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.event_id !== "") {
            writer.uint32(10).string(message.event_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        if (message.creator_id !== "") {
            writer.uint32(26).string(message.creator_id);
        }
        if (message.event_label !== "") {
            writer.uint32(34).string(message.event_label);
        }
        if (message.channel_id !== "") {
            writer.uint32(42).string(message.channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteEventRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.event_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.event_label = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            event_id: isSet(object.event_id) ? globalThis.String(object.event_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            event_label: isSet(object.event_label) ? globalThis.String(object.event_label) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.event_id !== "") {
            obj.event_id = message.event_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.event_label !== "") {
            obj.event_label = message.event_label;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteEventRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseDeleteEventRequest();
        message.event_id = (_a = object.event_id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        message.creator_id = (_c = object.creator_id) !== null && _c !== void 0 ? _c : "";
        message.event_label = (_d = object.event_label) !== null && _d !== void 0 ? _d : "";
        message.channel_id = (_e = object.channel_id) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseUpdateRoleRequest() {
    return {
        role_id: "",
        title: undefined,
        color: undefined,
        role_icon: undefined,
        description: undefined,
        display_online: undefined,
        allow_mention: undefined,
        add_user_ids: [],
        active_permission_ids: [],
        remove_user_ids: [],
        remove_permission_ids: [],
        clan_id: "",
        max_permission_id: "",
    };
}
exports.UpdateRoleRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.role_id !== "") {
            writer.uint32(10).string(message.role_id);
        }
        if (message.title !== undefined) {
            wrappers_1.StringValue.encode({ value: message.title }, writer.uint32(18).fork()).ldelim();
        }
        if (message.color !== undefined) {
            wrappers_1.StringValue.encode({ value: message.color }, writer.uint32(26).fork()).ldelim();
        }
        if (message.role_icon !== undefined) {
            wrappers_1.StringValue.encode({ value: message.role_icon }, writer.uint32(34).fork()).ldelim();
        }
        if (message.description !== undefined) {
            wrappers_1.StringValue.encode({ value: message.description }, writer.uint32(42).fork()).ldelim();
        }
        if (message.display_online !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.display_online }, writer.uint32(50).fork()).ldelim();
        }
        if (message.allow_mention !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.allow_mention }, writer.uint32(58).fork()).ldelim();
        }
        for (const v of message.add_user_ids) {
            writer.uint32(66).string(v);
        }
        for (const v of message.active_permission_ids) {
            writer.uint32(74).string(v);
        }
        for (const v of message.remove_user_ids) {
            writer.uint32(82).string(v);
        }
        for (const v of message.remove_permission_ids) {
            writer.uint32(90).string(v);
        }
        if (message.clan_id !== "") {
            writer.uint32(98).string(message.clan_id);
        }
        if (message.max_permission_id !== "") {
            writer.uint32(106).string(message.max_permission_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateRoleRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.role_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.color = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.role_icon = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.description = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.display_online = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.allow_mention = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.add_user_ids.push(reader.string());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.active_permission_ids.push(reader.string());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.remove_user_ids.push(reader.string());
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.remove_permission_ids.push(reader.string());
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.max_permission_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            role_id: isSet(object.role_id) ? globalThis.String(object.role_id) : "",
            title: isSet(object.title) ? String(object.title) : undefined,
            color: isSet(object.color) ? String(object.color) : undefined,
            role_icon: isSet(object.role_icon) ? String(object.role_icon) : undefined,
            description: isSet(object.description) ? String(object.description) : undefined,
            display_online: isSet(object.display_online) ? Number(object.display_online) : undefined,
            allow_mention: isSet(object.allow_mention) ? Number(object.allow_mention) : undefined,
            add_user_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.add_user_ids)
                ? object.add_user_ids.map((e) => globalThis.String(e))
                : [],
            active_permission_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.active_permission_ids)
                ? object.active_permission_ids.map((e) => globalThis.String(e))
                : [],
            remove_user_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.remove_user_ids)
                ? object.remove_user_ids.map((e) => globalThis.String(e))
                : [],
            remove_permission_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.remove_permission_ids)
                ? object.remove_permission_ids.map((e) => globalThis.String(e))
                : [],
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            max_permission_id: isSet(object.max_permission_id) ? globalThis.String(object.max_permission_id) : "",
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d;
        const obj = {};
        if (message.role_id !== "") {
            obj.role_id = message.role_id;
        }
        if (message.title !== undefined) {
            obj.title = message.title;
        }
        if (message.color !== undefined) {
            obj.color = message.color;
        }
        if (message.role_icon !== undefined) {
            obj.role_icon = message.role_icon;
        }
        if (message.description !== undefined) {
            obj.description = message.description;
        }
        if (message.display_online !== undefined) {
            obj.display_online = message.display_online;
        }
        if (message.allow_mention !== undefined) {
            obj.allow_mention = message.allow_mention;
        }
        if ((_a = message.add_user_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.add_user_ids = message.add_user_ids;
        }
        if ((_b = message.active_permission_ids) === null || _b === void 0 ? void 0 : _b.length) {
            obj.active_permission_ids = message.active_permission_ids;
        }
        if ((_c = message.remove_user_ids) === null || _c === void 0 ? void 0 : _c.length) {
            obj.remove_user_ids = message.remove_user_ids;
        }
        if ((_d = message.remove_permission_ids) === null || _d === void 0 ? void 0 : _d.length) {
            obj.remove_permission_ids = message.remove_permission_ids;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.max_permission_id !== "") {
            obj.max_permission_id = message.max_permission_id;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateRoleRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = createBaseUpdateRoleRequest();
        message.role_id = (_a = object.role_id) !== null && _a !== void 0 ? _a : "";
        message.title = (_b = object.title) !== null && _b !== void 0 ? _b : undefined;
        message.color = (_c = object.color) !== null && _c !== void 0 ? _c : undefined;
        message.role_icon = (_d = object.role_icon) !== null && _d !== void 0 ? _d : undefined;
        message.description = (_e = object.description) !== null && _e !== void 0 ? _e : undefined;
        message.display_online = (_f = object.display_online) !== null && _f !== void 0 ? _f : undefined;
        message.allow_mention = (_g = object.allow_mention) !== null && _g !== void 0 ? _g : undefined;
        message.add_user_ids = ((_h = object.add_user_ids) === null || _h === void 0 ? void 0 : _h.map((e) => e)) || [];
        message.active_permission_ids = ((_j = object.active_permission_ids) === null || _j === void 0 ? void 0 : _j.map((e) => e)) || [];
        message.remove_user_ids = ((_k = object.remove_user_ids) === null || _k === void 0 ? void 0 : _k.map((e) => e)) || [];
        message.remove_permission_ids = ((_l = object.remove_permission_ids) === null || _l === void 0 ? void 0 : _l.map((e) => e)) || [];
        message.clan_id = (_m = object.clan_id) !== null && _m !== void 0 ? _m : "";
        message.max_permission_id = (_o = object.max_permission_id) !== null && _o !== void 0 ? _o : "";
        return message;
    },
};
function createBaseUpdateRoleChannelRequest() {
    return { role_id: "", permission_update: [], max_permission_id: "", channel_id: "", user_id: "", role_label: "" };
}
exports.UpdateRoleChannelRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.role_id !== "") {
            writer.uint32(10).string(message.role_id);
        }
        for (const v of message.permission_update) {
            exports.PermissionUpdate.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.max_permission_id !== "") {
            writer.uint32(26).string(message.max_permission_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(34).string(message.channel_id);
        }
        if (message.user_id !== "") {
            writer.uint32(42).string(message.user_id);
        }
        if (message.role_label !== "") {
            writer.uint32(50).string(message.role_label);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateRoleChannelRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.role_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.permission_update.push(exports.PermissionUpdate.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.max_permission_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.role_label = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            role_id: isSet(object.role_id) ? globalThis.String(object.role_id) : "",
            permission_update: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.permission_update)
                ? object.permission_update.map((e) => exports.PermissionUpdate.fromJSON(e))
                : [],
            max_permission_id: isSet(object.max_permission_id) ? globalThis.String(object.max_permission_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            role_label: isSet(object.role_label) ? globalThis.String(object.role_label) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.role_id !== "") {
            obj.role_id = message.role_id;
        }
        if ((_a = message.permission_update) === null || _a === void 0 ? void 0 : _a.length) {
            obj.permission_update = message.permission_update.map((e) => exports.PermissionUpdate.toJSON(e));
        }
        if (message.max_permission_id !== "") {
            obj.max_permission_id = message.max_permission_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.role_label !== "") {
            obj.role_label = message.role_label;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateRoleChannelRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseUpdateRoleChannelRequest();
        message.role_id = (_a = object.role_id) !== null && _a !== void 0 ? _a : "";
        message.permission_update = ((_b = object.permission_update) === null || _b === void 0 ? void 0 : _b.map((e) => exports.PermissionUpdate.fromPartial(e))) || [];
        message.max_permission_id = (_c = object.max_permission_id) !== null && _c !== void 0 ? _c : "";
        message.channel_id = (_d = object.channel_id) !== null && _d !== void 0 ? _d : "";
        message.user_id = (_e = object.user_id) !== null && _e !== void 0 ? _e : "";
        message.role_label = (_f = object.role_label) !== null && _f !== void 0 ? _f : "";
        return message;
    },
};
function createBasePermissionUpdate() {
    return { permission_id: "", slug: "", type: 0 };
}
exports.PermissionUpdate = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.permission_id !== "") {
            writer.uint32(10).string(message.permission_id);
        }
        if (message.slug !== "") {
            writer.uint32(18).string(message.slug);
        }
        if (message.type !== 0) {
            writer.uint32(24).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePermissionUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.permission_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.slug = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            permission_id: isSet(object.permission_id) ? globalThis.String(object.permission_id) : "",
            slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
            type: isSet(object.type) ? globalThis.Number(object.type) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.permission_id !== "") {
            obj.permission_id = message.permission_id;
        }
        if (message.slug !== "") {
            obj.slug = message.slug;
        }
        if (message.type !== 0) {
            obj.type = Math.round(message.type);
        }
        return obj;
    },
    create(base) {
        return exports.PermissionUpdate.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePermissionUpdate();
        message.permission_id = (_a = object.permission_id) !== null && _a !== void 0 ? _a : "";
        message.slug = (_b = object.slug) !== null && _b !== void 0 ? _b : "";
        message.type = (_c = object.type) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseUploadAttachmentRequest() {
    return { filename: "", filetype: "", size: 0, width: 0, height: 0 };
}
exports.UploadAttachmentRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.filename !== "") {
            writer.uint32(10).string(message.filename);
        }
        if (message.filetype !== "") {
            writer.uint32(18).string(message.filetype);
        }
        if (message.size !== 0) {
            writer.uint32(24).int32(message.size);
        }
        if (message.width !== 0) {
            writer.uint32(32).int32(message.width);
        }
        if (message.height !== 0) {
            writer.uint32(40).int32(message.height);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUploadAttachmentRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.filename = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.filetype = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.size = reader.int32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.width = reader.int32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.height = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
            filetype: isSet(object.filetype) ? globalThis.String(object.filetype) : "",
            size: isSet(object.size) ? globalThis.Number(object.size) : 0,
            width: isSet(object.width) ? globalThis.Number(object.width) : 0,
            height: isSet(object.height) ? globalThis.Number(object.height) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.filename !== "") {
            obj.filename = message.filename;
        }
        if (message.filetype !== "") {
            obj.filetype = message.filetype;
        }
        if (message.size !== 0) {
            obj.size = Math.round(message.size);
        }
        if (message.width !== 0) {
            obj.width = Math.round(message.width);
        }
        if (message.height !== 0) {
            obj.height = Math.round(message.height);
        }
        return obj;
    },
    create(base) {
        return exports.UploadAttachmentRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseUploadAttachmentRequest();
        message.filename = (_a = object.filename) !== null && _a !== void 0 ? _a : "";
        message.filetype = (_b = object.filetype) !== null && _b !== void 0 ? _b : "";
        message.size = (_c = object.size) !== null && _c !== void 0 ? _c : 0;
        message.width = (_d = object.width) !== null && _d !== void 0 ? _d : 0;
        message.height = (_e = object.height) !== null && _e !== void 0 ? _e : 0;
        return message;
    },
};
function createBaseListMessageMentionRequest() {
    return { limit: undefined, forward: undefined, cursor: "" };
}
exports.ListMessageMentionRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.limit !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.limit }, writer.uint32(10).fork()).ldelim();
        }
        if (message.forward !== undefined) {
            wrappers_1.BoolValue.encode({ value: message.forward }, writer.uint32(18).fork()).ldelim();
        }
        if (message.cursor !== "") {
            writer.uint32(26).string(message.cursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMessageMentionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.limit = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.forward = wrappers_1.BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
            forward: isSet(object.forward) ? Boolean(object.forward) : undefined,
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        if (message.forward !== undefined) {
            obj.forward = message.forward;
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        return obj;
    },
    create(base) {
        return exports.ListMessageMentionRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseListMessageMentionRequest();
        message.limit = (_a = object.limit) !== null && _a !== void 0 ? _a : undefined;
        message.forward = (_b = object.forward) !== null && _b !== void 0 ? _b : undefined;
        message.cursor = (_c = object.cursor) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseUploadAttachment() {
    return { filename: "", url: "" };
}
exports.UploadAttachment = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.filename !== "") {
            writer.uint32(10).string(message.filename);
        }
        if (message.url !== "") {
            writer.uint32(18).string(message.url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUploadAttachment();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.filename = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
            url: isSet(object.url) ? globalThis.String(object.url) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.filename !== "") {
            obj.filename = message.filename;
        }
        if (message.url !== "") {
            obj.url = message.url;
        }
        return obj;
    },
    create(base) {
        return exports.UploadAttachment.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUploadAttachment();
        message.filename = (_a = object.filename) !== null && _a !== void 0 ? _a : "";
        message.url = (_b = object.url) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseSearchMessageRequest() {
    return { filters: [], from: undefined, size: undefined, sorts: [] };
}
exports.SearchMessageRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.filters) {
            exports.FilterParam.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.from !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.from }, writer.uint32(26).fork()).ldelim();
        }
        if (message.size !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.size }, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.sorts) {
            exports.SortParam.encode(v, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSearchMessageRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.filters.push(exports.FilterParam.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.from = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.size = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.sorts.push(exports.SortParam.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            filters: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.filters) ? object.filters.map((e) => exports.FilterParam.fromJSON(e)) : [],
            from: isSet(object.from) ? Number(object.from) : undefined,
            size: isSet(object.size) ? Number(object.size) : undefined,
            sorts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.sorts) ? object.sorts.map((e) => exports.SortParam.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if ((_a = message.filters) === null || _a === void 0 ? void 0 : _a.length) {
            obj.filters = message.filters.map((e) => exports.FilterParam.toJSON(e));
        }
        if (message.from !== undefined) {
            obj.from = message.from;
        }
        if (message.size !== undefined) {
            obj.size = message.size;
        }
        if ((_b = message.sorts) === null || _b === void 0 ? void 0 : _b.length) {
            obj.sorts = message.sorts.map((e) => exports.SortParam.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.SearchMessageRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseSearchMessageRequest();
        message.filters = ((_a = object.filters) === null || _a === void 0 ? void 0 : _a.map((e) => exports.FilterParam.fromPartial(e))) || [];
        message.from = (_b = object.from) !== null && _b !== void 0 ? _b : undefined;
        message.size = (_c = object.size) !== null && _c !== void 0 ? _c : undefined;
        message.sorts = ((_d = object.sorts) === null || _d === void 0 ? void 0 : _d.map((e) => exports.SortParam.fromPartial(e))) || [];
        return message;
    },
};
function createBaseSortParam() {
    return { field_name: "", order: "" };
}
exports.SortParam = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.field_name !== "") {
            writer.uint32(10).string(message.field_name);
        }
        if (message.order !== "") {
            writer.uint32(18).string(message.order);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSortParam();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.field_name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.order = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            field_name: isSet(object.field_name) ? globalThis.String(object.field_name) : "",
            order: isSet(object.order) ? globalThis.String(object.order) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.field_name !== "") {
            obj.field_name = message.field_name;
        }
        if (message.order !== "") {
            obj.order = message.order;
        }
        return obj;
    },
    create(base) {
        return exports.SortParam.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSortParam();
        message.field_name = (_a = object.field_name) !== null && _a !== void 0 ? _a : "";
        message.order = (_b = object.order) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseFilterParam() {
    return { field_name: "", field_value: "" };
}
exports.FilterParam = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.field_name !== "") {
            writer.uint32(10).string(message.field_name);
        }
        if (message.field_value !== "") {
            writer.uint32(18).string(message.field_value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFilterParam();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.field_name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.field_value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            field_name: isSet(object.field_name) ? globalThis.String(object.field_name) : "",
            field_value: isSet(object.field_value) ? globalThis.String(object.field_value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.field_name !== "") {
            obj.field_name = message.field_name;
        }
        if (message.field_value !== "") {
            obj.field_value = message.field_value;
        }
        return obj;
    },
    create(base) {
        return exports.FilterParam.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseFilterParam();
        message.field_name = (_a = object.field_name) !== null && _a !== void 0 ? _a : "";
        message.field_value = (_b = object.field_value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseSearchMessageDocument() {
    return {
        message_id: "",
        channel_id: 0,
        clan_id: 0,
        sender_id: 0,
        content: "",
        mentions: "",
        reactions: "",
        attachments: [],
        references: "",
        create_time: "",
        update_time: "",
        channel_label: "",
        channel_type: 0,
        clan_name: "",
        username: "",
        display_name: "",
        avatar_url: "",
    };
}
exports.SearchMessageDocument = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.message_id !== "") {
            writer.uint32(10).string(message.message_id);
        }
        if (message.channel_id !== 0) {
            writer.uint32(16).int64(message.channel_id);
        }
        if (message.clan_id !== 0) {
            writer.uint32(24).int64(message.clan_id);
        }
        if (message.sender_id !== 0) {
            writer.uint32(32).int64(message.sender_id);
        }
        if (message.content !== "") {
            writer.uint32(42).string(message.content);
        }
        if (message.mentions !== "") {
            writer.uint32(50).string(message.mentions);
        }
        if (message.reactions !== "") {
            writer.uint32(58).string(message.reactions);
        }
        for (const v of message.attachments) {
            exports.MessageAttachment.encode(v, writer.uint32(66).fork()).ldelim();
        }
        if (message.references !== "") {
            writer.uint32(74).string(message.references);
        }
        if (message.create_time !== "") {
            writer.uint32(82).string(message.create_time);
        }
        if (message.update_time !== "") {
            writer.uint32(90).string(message.update_time);
        }
        if (message.channel_label !== "") {
            writer.uint32(98).string(message.channel_label);
        }
        if (message.channel_type !== 0) {
            writer.uint32(104).int32(message.channel_type);
        }
        if (message.clan_name !== "") {
            writer.uint32(114).string(message.clan_name);
        }
        if (message.username !== "") {
            writer.uint32(122).string(message.username);
        }
        if (message.display_name !== "") {
            writer.uint32(130).string(message.display_name);
        }
        if (message.avatar_url !== "") {
            writer.uint32(138).string(message.avatar_url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSearchMessageDocument();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.channel_id = longToNumber(reader.int64());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.clan_id = longToNumber(reader.int64());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.sender_id = longToNumber(reader.int64());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.mentions = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.reactions = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.attachments.push(exports.MessageAttachment.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.references = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.create_time = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.update_time = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.channel_label = reader.string();
                    continue;
                case 13:
                    if (tag !== 104) {
                        break;
                    }
                    message.channel_type = reader.int32();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.clan_name = reader.string();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.display_name = reader.string();
                    continue;
                case 17:
                    if (tag !== 138) {
                        break;
                    }
                    message.avatar_url = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.Number(object.channel_id) : 0,
            clan_id: isSet(object.clan_id) ? globalThis.Number(object.clan_id) : 0,
            sender_id: isSet(object.sender_id) ? globalThis.Number(object.sender_id) : 0,
            content: isSet(object.content) ? globalThis.String(object.content) : "",
            mentions: isSet(object.mentions) ? globalThis.String(object.mentions) : "",
            reactions: isSet(object.reactions) ? globalThis.String(object.reactions) : "",
            attachments: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.attachments)
                ? object.attachments.map((e) => exports.MessageAttachment.fromJSON(e))
                : [],
            references: isSet(object.references) ? globalThis.String(object.references) : "",
            create_time: isSet(object.create_time) ? globalThis.String(object.create_time) : "",
            update_time: isSet(object.update_time) ? globalThis.String(object.update_time) : "",
            channel_label: isSet(object.channel_label) ? globalThis.String(object.channel_label) : "",
            channel_type: isSet(object.channel_type) ? globalThis.Number(object.channel_type) : 0,
            clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            display_name: isSet(object.display_name) ? globalThis.String(object.display_name) : "",
            avatar_url: isSet(object.avatar_url) ? globalThis.String(object.avatar_url) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.message_id !== "") {
            obj.message_id = message.message_id;
        }
        if (message.channel_id !== 0) {
            obj.channel_id = Math.round(message.channel_id);
        }
        if (message.clan_id !== 0) {
            obj.clan_id = Math.round(message.clan_id);
        }
        if (message.sender_id !== 0) {
            obj.sender_id = Math.round(message.sender_id);
        }
        if (message.content !== "") {
            obj.content = message.content;
        }
        if (message.mentions !== "") {
            obj.mentions = message.mentions;
        }
        if (message.reactions !== "") {
            obj.reactions = message.reactions;
        }
        if ((_a = message.attachments) === null || _a === void 0 ? void 0 : _a.length) {
            obj.attachments = message.attachments.map((e) => exports.MessageAttachment.toJSON(e));
        }
        if (message.references !== "") {
            obj.references = message.references;
        }
        if (message.create_time !== "") {
            obj.create_time = message.create_time;
        }
        if (message.update_time !== "") {
            obj.update_time = message.update_time;
        }
        if (message.channel_label !== "") {
            obj.channel_label = message.channel_label;
        }
        if (message.channel_type !== 0) {
            obj.channel_type = Math.round(message.channel_type);
        }
        if (message.clan_name !== "") {
            obj.clan_name = message.clan_name;
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.display_name !== "") {
            obj.display_name = message.display_name;
        }
        if (message.avatar_url !== "") {
            obj.avatar_url = message.avatar_url;
        }
        return obj;
    },
    create(base) {
        return exports.SearchMessageDocument.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
        const message = createBaseSearchMessageDocument();
        message.message_id = (_a = object.message_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : 0;
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : 0;
        message.sender_id = (_d = object.sender_id) !== null && _d !== void 0 ? _d : 0;
        message.content = (_e = object.content) !== null && _e !== void 0 ? _e : "";
        message.mentions = (_f = object.mentions) !== null && _f !== void 0 ? _f : "";
        message.reactions = (_g = object.reactions) !== null && _g !== void 0 ? _g : "";
        message.attachments = ((_h = object.attachments) === null || _h === void 0 ? void 0 : _h.map((e) => exports.MessageAttachment.fromPartial(e))) || [];
        message.references = (_j = object.references) !== null && _j !== void 0 ? _j : "";
        message.create_time = (_k = object.create_time) !== null && _k !== void 0 ? _k : "";
        message.update_time = (_l = object.update_time) !== null && _l !== void 0 ? _l : "";
        message.channel_label = (_m = object.channel_label) !== null && _m !== void 0 ? _m : "";
        message.channel_type = (_o = object.channel_type) !== null && _o !== void 0 ? _o : 0;
        message.clan_name = (_p = object.clan_name) !== null && _p !== void 0 ? _p : "";
        message.username = (_q = object.username) !== null && _q !== void 0 ? _q : "";
        message.display_name = (_r = object.display_name) !== null && _r !== void 0 ? _r : "";
        message.avatar_url = (_s = object.avatar_url) !== null && _s !== void 0 ? _s : "";
        return message;
    },
};
function createBaseSearchMessageResponse() {
    return { messages: [], total: 0 };
}
exports.SearchMessageResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.messages) {
            exports.SearchMessageDocument.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.total !== 0) {
            writer.uint32(16).int32(message.total);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSearchMessageResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.messages.push(exports.SearchMessageDocument.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.total = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            messages: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.messages)
                ? object.messages.map((e) => exports.SearchMessageDocument.fromJSON(e))
                : [],
            total: isSet(object.total) ? globalThis.Number(object.total) : 0,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.messages) === null || _a === void 0 ? void 0 : _a.length) {
            obj.messages = message.messages.map((e) => exports.SearchMessageDocument.toJSON(e));
        }
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        return obj;
    },
    create(base) {
        return exports.SearchMessageResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSearchMessageResponse();
        message.messages = ((_a = object.messages) === null || _a === void 0 ? void 0 : _a.map((e) => exports.SearchMessageDocument.fromPartial(e))) || [];
        message.total = (_b = object.total) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseRegistrationEmailRequest() {
    return { email: "", password: "", username: "", display_name: "", avatar_url: "", dob: "", vars: {} };
}
exports.RegistrationEmailRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.email !== "") {
            writer.uint32(10).string(message.email);
        }
        if (message.password !== "") {
            writer.uint32(18).string(message.password);
        }
        if (message.username !== "") {
            writer.uint32(26).string(message.username);
        }
        if (message.display_name !== "") {
            writer.uint32(34).string(message.display_name);
        }
        if (message.avatar_url !== "") {
            writer.uint32(42).string(message.avatar_url);
        }
        if (message.dob !== "") {
            writer.uint32(50).string(message.dob);
        }
        Object.entries(message.vars).forEach(([key, value]) => {
            exports.RegistrationEmailRequest_VarsEntry.encode({ key: key, value }, writer.uint32(58).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegistrationEmailRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.display_name = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.avatar_url = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.dob = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    const entry7 = exports.RegistrationEmailRequest_VarsEntry.decode(reader, reader.uint32());
                    if (entry7.value !== undefined) {
                        message.vars[entry7.key] = entry7.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            display_name: isSet(object.display_name) ? globalThis.String(object.display_name) : "",
            avatar_url: isSet(object.avatar_url) ? globalThis.String(object.avatar_url) : "",
            dob: isSet(object.dob) ? globalThis.String(object.dob) : "",
            vars: isObject(object.vars)
                ? Object.entries(object.vars).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.display_name !== "") {
            obj.display_name = message.display_name;
        }
        if (message.avatar_url !== "") {
            obj.avatar_url = message.avatar_url;
        }
        if (message.dob !== "") {
            obj.dob = message.dob;
        }
        if (message.vars) {
            const entries = Object.entries(message.vars);
            if (entries.length > 0) {
                obj.vars = {};
                entries.forEach(([k, v]) => {
                    obj.vars[k] = v;
                });
            }
        }
        return obj;
    },
    create(base) {
        return exports.RegistrationEmailRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseRegistrationEmailRequest();
        message.email = (_a = object.email) !== null && _a !== void 0 ? _a : "";
        message.password = (_b = object.password) !== null && _b !== void 0 ? _b : "";
        message.username = (_c = object.username) !== null && _c !== void 0 ? _c : "";
        message.display_name = (_d = object.display_name) !== null && _d !== void 0 ? _d : "";
        message.avatar_url = (_e = object.avatar_url) !== null && _e !== void 0 ? _e : "";
        message.dob = (_f = object.dob) !== null && _f !== void 0 ? _f : "";
        message.vars = Object.entries((_g = object.vars) !== null && _g !== void 0 ? _g : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseRegistrationEmailRequest_VarsEntry() {
    return { key: "", value: "" };
}
exports.RegistrationEmailRequest_VarsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegistrationEmailRequest_VarsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.RegistrationEmailRequest_VarsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRegistrationEmailRequest_VarsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseClanEmoji() {
    return { id: "", src: "", shortname: "", category: "", creator_id: "", clan_id: "", logo: "", clan_name: "" };
}
exports.ClanEmoji = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.src !== "") {
            writer.uint32(18).string(message.src);
        }
        if (message.shortname !== "") {
            writer.uint32(26).string(message.shortname);
        }
        if (message.category !== "") {
            writer.uint32(34).string(message.category);
        }
        if (message.creator_id !== "") {
            writer.uint32(42).string(message.creator_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(50).string(message.clan_id);
        }
        if (message.logo !== "") {
            writer.uint32(58).string(message.logo);
        }
        if (message.clan_name !== "") {
            writer.uint32(66).string(message.clan_name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanEmoji();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.src = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.shortname = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.category = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.logo = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.clan_name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            src: isSet(object.src) ? globalThis.String(object.src) : "",
            shortname: isSet(object.shortname) ? globalThis.String(object.shortname) : "",
            category: isSet(object.category) ? globalThis.String(object.category) : "",
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
            clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.src !== "") {
            obj.src = message.src;
        }
        if (message.shortname !== "") {
            obj.shortname = message.shortname;
        }
        if (message.category !== "") {
            obj.category = message.category;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.logo !== "") {
            obj.logo = message.logo;
        }
        if (message.clan_name !== "") {
            obj.clan_name = message.clan_name;
        }
        return obj;
    },
    create(base) {
        return exports.ClanEmoji.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseClanEmoji();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.src = (_b = object.src) !== null && _b !== void 0 ? _b : "";
        message.shortname = (_c = object.shortname) !== null && _c !== void 0 ? _c : "";
        message.category = (_d = object.category) !== null && _d !== void 0 ? _d : "";
        message.creator_id = (_e = object.creator_id) !== null && _e !== void 0 ? _e : "";
        message.clan_id = (_f = object.clan_id) !== null && _f !== void 0 ? _f : "";
        message.logo = (_g = object.logo) !== null && _g !== void 0 ? _g : "";
        message.clan_name = (_h = object.clan_name) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseEmojiListedResponse() {
    return { emoji_list: [] };
}
exports.EmojiListedResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.emoji_list) {
            exports.ClanEmoji.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEmojiListedResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.emoji_list.push(exports.ClanEmoji.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            emoji_list: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.emoji_list)
                ? object.emoji_list.map((e) => exports.ClanEmoji.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.emoji_list) === null || _a === void 0 ? void 0 : _a.length) {
            obj.emoji_list = message.emoji_list.map((e) => exports.ClanEmoji.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.EmojiListedResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEmojiListedResponse();
        message.emoji_list = ((_a = object.emoji_list) === null || _a === void 0 ? void 0 : _a.map((e) => exports.ClanEmoji.fromPartial(e))) || [];
        return message;
    },
};
function createBaseStickerListedResponse() {
    return { stickers: [] };
}
exports.StickerListedResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.stickers) {
            exports.ClanSticker.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStickerListedResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.stickers.push(exports.ClanSticker.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            stickers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.stickers)
                ? object.stickers.map((e) => exports.ClanSticker.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.stickers) === null || _a === void 0 ? void 0 : _a.length) {
            obj.stickers = message.stickers.map((e) => exports.ClanSticker.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.StickerListedResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseStickerListedResponse();
        message.stickers = ((_a = object.stickers) === null || _a === void 0 ? void 0 : _a.map((e) => exports.ClanSticker.fromPartial(e))) || [];
        return message;
    },
};
function createBaseClanSticker() {
    return {
        id: "",
        source: "",
        shortname: "",
        category: "",
        creator_id: "",
        create_time: undefined,
        clan_id: "",
        logo: "",
        clan_name: "",
        media_type: 0,
    };
}
exports.ClanSticker = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.source !== "") {
            writer.uint32(18).string(message.source);
        }
        if (message.shortname !== "") {
            writer.uint32(26).string(message.shortname);
        }
        if (message.category !== "") {
            writer.uint32(34).string(message.category);
        }
        if (message.creator_id !== "") {
            writer.uint32(42).string(message.creator_id);
        }
        if (message.create_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.create_time), writer.uint32(50).fork()).ldelim();
        }
        if (message.clan_id !== "") {
            writer.uint32(58).string(message.clan_id);
        }
        if (message.logo !== "") {
            writer.uint32(66).string(message.logo);
        }
        if (message.clan_name !== "") {
            writer.uint32(74).string(message.clan_name);
        }
        if (message.media_type !== 0) {
            writer.uint32(80).int32(message.media_type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanSticker();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.source = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.shortname = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.category = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.create_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.logo = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.clan_name = reader.string();
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.media_type = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            source: isSet(object.source) ? globalThis.String(object.source) : "",
            shortname: isSet(object.shortname) ? globalThis.String(object.shortname) : "",
            category: isSet(object.category) ? globalThis.String(object.category) : "",
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            create_time: isSet(object.create_time) ? fromJsonTimestamp(object.create_time) : undefined,
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
            clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
            media_type: isSet(object.media_type) ? globalThis.Number(object.media_type) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.source !== "") {
            obj.source = message.source;
        }
        if (message.shortname !== "") {
            obj.shortname = message.shortname;
        }
        if (message.category !== "") {
            obj.category = message.category;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.create_time !== undefined) {
            obj.create_time = message.create_time.toISOString();
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.logo !== "") {
            obj.logo = message.logo;
        }
        if (message.clan_name !== "") {
            obj.clan_name = message.clan_name;
        }
        if (message.media_type !== 0) {
            obj.media_type = Math.round(message.media_type);
        }
        return obj;
    },
    create(base) {
        return exports.ClanSticker.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const message = createBaseClanSticker();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.source = (_b = object.source) !== null && _b !== void 0 ? _b : "";
        message.shortname = (_c = object.shortname) !== null && _c !== void 0 ? _c : "";
        message.category = (_d = object.category) !== null && _d !== void 0 ? _d : "";
        message.creator_id = (_e = object.creator_id) !== null && _e !== void 0 ? _e : "";
        message.create_time = (_f = object.create_time) !== null && _f !== void 0 ? _f : undefined;
        message.clan_id = (_g = object.clan_id) !== null && _g !== void 0 ? _g : "";
        message.logo = (_h = object.logo) !== null && _h !== void 0 ? _h : "";
        message.clan_name = (_j = object.clan_name) !== null && _j !== void 0 ? _j : "";
        message.media_type = (_k = object.media_type) !== null && _k !== void 0 ? _k : 0;
        return message;
    },
};
function createBaseAllUsersAddChannelRequest() {
    return { channel_id: "", limit: undefined };
}
exports.AllUsersAddChannelRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        if (message.limit !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.limit }, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAllUsersAddChannelRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.limit = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        return obj;
    },
    create(base) {
        return exports.AllUsersAddChannelRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAllUsersAddChannelRequest();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        message.limit = (_b = object.limit) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
function createBaseAllUsersAddChannelResponse() {
    return { channel_id: "", user_ids: [], limit: undefined };
}
exports.AllUsersAddChannelResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        for (const v of message.user_ids) {
            writer.uint32(18).string(v);
        }
        if (message.limit !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.limit }, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAllUsersAddChannelResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user_ids.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.limit = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            user_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_ids) ? object.user_ids.map((e) => globalThis.String(e)) : [],
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if ((_a = message.user_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.user_ids = message.user_ids;
        }
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        return obj;
    },
    create(base) {
        return exports.AllUsersAddChannelResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseAllUsersAddChannelResponse();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        message.user_ids = ((_b = object.user_ids) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.limit = (_c = object.limit) !== null && _c !== void 0 ? _c : undefined;
        return message;
    },
};
function createBaseClanEmojiCreateRequest() {
    return { clan_id: "", source: "", shortname: "", category: "", id: "" };
}
exports.ClanEmojiCreateRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.source !== "") {
            writer.uint32(18).string(message.source);
        }
        if (message.shortname !== "") {
            writer.uint32(26).string(message.shortname);
        }
        if (message.category !== "") {
            writer.uint32(34).string(message.category);
        }
        if (message.id !== "") {
            writer.uint32(42).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanEmojiCreateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.source = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.shortname = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.category = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            source: isSet(object.source) ? globalThis.String(object.source) : "",
            shortname: isSet(object.shortname) ? globalThis.String(object.shortname) : "",
            category: isSet(object.category) ? globalThis.String(object.category) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.source !== "") {
            obj.source = message.source;
        }
        if (message.shortname !== "") {
            obj.shortname = message.shortname;
        }
        if (message.category !== "") {
            obj.category = message.category;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.ClanEmojiCreateRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseClanEmojiCreateRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.source = (_b = object.source) !== null && _b !== void 0 ? _b : "";
        message.shortname = (_c = object.shortname) !== null && _c !== void 0 ? _c : "";
        message.category = (_d = object.category) !== null && _d !== void 0 ? _d : "";
        message.id = (_e = object.id) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseClanEmojiGetByClanIdRequest() {
    return { clan_id: "" };
}
exports.ClanEmojiGetByClanIdRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanEmojiGetByClanIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.ClanEmojiGetByClanIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseClanEmojiGetByClanIdRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseClanEmojiDeleteRequest() {
    return { id: "", clan_id: "", emoji_label: "" };
}
exports.ClanEmojiDeleteRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        if (message.emoji_label !== "") {
            writer.uint32(26).string(message.emoji_label);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanEmojiDeleteRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.emoji_label = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            emoji_label: isSet(object.emoji_label) ? globalThis.String(object.emoji_label) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.emoji_label !== "") {
            obj.emoji_label = message.emoji_label;
        }
        return obj;
    },
    create(base) {
        return exports.ClanEmojiDeleteRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseClanEmojiDeleteRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        message.emoji_label = (_c = object.emoji_label) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseClanEmojiUpdateRequest() {
    return { id: "", shortname: "", clan_id: "" };
}
exports.ClanEmojiUpdateRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.shortname !== "") {
            writer.uint32(18).string(message.shortname);
        }
        if (message.clan_id !== "") {
            writer.uint32(26).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanEmojiUpdateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.shortname = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            shortname: isSet(object.shortname) ? globalThis.String(object.shortname) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.shortname !== "") {
            obj.shortname = message.shortname;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.ClanEmojiUpdateRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseClanEmojiUpdateRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.shortname = (_b = object.shortname) !== null && _b !== void 0 ? _b : "";
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseWebhook() {
    return {
        id: "",
        webhook_name: "",
        channel_id: "",
        active: 0,
        url: "",
        creator_id: "",
        create_time: "",
        update_time: "",
        avatar: "",
        status: 0,
    };
}
exports.Webhook = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.webhook_name !== "") {
            writer.uint32(18).string(message.webhook_name);
        }
        if (message.channel_id !== "") {
            writer.uint32(26).string(message.channel_id);
        }
        if (message.active !== 0) {
            writer.uint32(32).int32(message.active);
        }
        if (message.url !== "") {
            writer.uint32(42).string(message.url);
        }
        if (message.creator_id !== "") {
            writer.uint32(50).string(message.creator_id);
        }
        if (message.create_time !== "") {
            writer.uint32(58).string(message.create_time);
        }
        if (message.update_time !== "") {
            writer.uint32(66).string(message.update_time);
        }
        if (message.avatar !== "") {
            writer.uint32(74).string(message.avatar);
        }
        if (message.status !== 0) {
            writer.uint32(80).int32(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebhook();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.webhook_name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.active = reader.int32();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.create_time = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.update_time = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.avatar = reader.string();
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            webhook_name: isSet(object.webhook_name) ? globalThis.String(object.webhook_name) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            active: isSet(object.active) ? globalThis.Number(object.active) : 0,
            url: isSet(object.url) ? globalThis.String(object.url) : "",
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            create_time: isSet(object.create_time) ? globalThis.String(object.create_time) : "",
            update_time: isSet(object.update_time) ? globalThis.String(object.update_time) : "",
            avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
            status: isSet(object.status) ? globalThis.Number(object.status) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.webhook_name !== "") {
            obj.webhook_name = message.webhook_name;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.active !== 0) {
            obj.active = Math.round(message.active);
        }
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.create_time !== "") {
            obj.create_time = message.create_time;
        }
        if (message.update_time !== "") {
            obj.update_time = message.update_time;
        }
        if (message.avatar !== "") {
            obj.avatar = message.avatar;
        }
        if (message.status !== 0) {
            obj.status = Math.round(message.status);
        }
        return obj;
    },
    create(base) {
        return exports.Webhook.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const message = createBaseWebhook();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.webhook_name = (_b = object.webhook_name) !== null && _b !== void 0 ? _b : "";
        message.channel_id = (_c = object.channel_id) !== null && _c !== void 0 ? _c : "";
        message.active = (_d = object.active) !== null && _d !== void 0 ? _d : 0;
        message.url = (_e = object.url) !== null && _e !== void 0 ? _e : "";
        message.creator_id = (_f = object.creator_id) !== null && _f !== void 0 ? _f : "";
        message.create_time = (_g = object.create_time) !== null && _g !== void 0 ? _g : "";
        message.update_time = (_h = object.update_time) !== null && _h !== void 0 ? _h : "";
        message.avatar = (_j = object.avatar) !== null && _j !== void 0 ? _j : "";
        message.status = (_k = object.status) !== null && _k !== void 0 ? _k : 0;
        return message;
    },
};
function createBaseWebhookCreateRequest() {
    return { webhook_name: "", channel_id: "", avatar: "", clan_id: "" };
}
exports.WebhookCreateRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.webhook_name !== "") {
            writer.uint32(10).string(message.webhook_name);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.avatar !== "") {
            writer.uint32(26).string(message.avatar);
        }
        if (message.clan_id !== "") {
            writer.uint32(34).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebhookCreateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.webhook_name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.avatar = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            webhook_name: isSet(object.webhook_name) ? globalThis.String(object.webhook_name) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.webhook_name !== "") {
            obj.webhook_name = message.webhook_name;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.avatar !== "") {
            obj.avatar = message.avatar;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.WebhookCreateRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseWebhookCreateRequest();
        message.webhook_name = (_a = object.webhook_name) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.avatar = (_c = object.avatar) !== null && _c !== void 0 ? _c : "";
        message.clan_id = (_d = object.clan_id) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseWebhookListRequestById() {
    return { id: "" };
}
exports.WebhookListRequestById = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebhookListRequestById();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.WebhookListRequestById.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseWebhookListRequestById();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseWebhookUpdateRequestById() {
    return { id: "", webhook_name: "", channel_id_update: "", avatar: "", channel_id: "", clan_id: "" };
}
exports.WebhookUpdateRequestById = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.webhook_name !== "") {
            writer.uint32(18).string(message.webhook_name);
        }
        if (message.channel_id_update !== "") {
            writer.uint32(26).string(message.channel_id_update);
        }
        if (message.avatar !== "") {
            writer.uint32(34).string(message.avatar);
        }
        if (message.channel_id !== "") {
            writer.uint32(42).string(message.channel_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(50).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebhookUpdateRequestById();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.webhook_name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.channel_id_update = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.avatar = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            webhook_name: isSet(object.webhook_name) ? globalThis.String(object.webhook_name) : "",
            channel_id_update: isSet(object.channel_id_update) ? globalThis.String(object.channel_id_update) : "",
            avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.webhook_name !== "") {
            obj.webhook_name = message.webhook_name;
        }
        if (message.channel_id_update !== "") {
            obj.channel_id_update = message.channel_id_update;
        }
        if (message.avatar !== "") {
            obj.avatar = message.avatar;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.WebhookUpdateRequestById.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseWebhookUpdateRequestById();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.webhook_name = (_b = object.webhook_name) !== null && _b !== void 0 ? _b : "";
        message.channel_id_update = (_c = object.channel_id_update) !== null && _c !== void 0 ? _c : "";
        message.avatar = (_d = object.avatar) !== null && _d !== void 0 ? _d : "";
        message.channel_id = (_e = object.channel_id) !== null && _e !== void 0 ? _e : "";
        message.clan_id = (_f = object.clan_id) !== null && _f !== void 0 ? _f : "";
        return message;
    },
};
function createBaseWebhookDeleteRequestById() {
    return { id: "", clan_id: "", channel_id: "" };
}
exports.WebhookDeleteRequestById = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(26).string(message.channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebhookDeleteRequestById();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.WebhookDeleteRequestById.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseWebhookDeleteRequestById();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        message.channel_id = (_c = object.channel_id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseWebhookListRequest() {
    return { channel_id: "", clan_id: "" };
}
exports.WebhookListRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebhookListRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.WebhookListRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseWebhookListRequest();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseWebhookListResponse() {
    return { webhooks: [] };
}
exports.WebhookListResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.webhooks) {
            exports.Webhook.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebhookListResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.webhooks.push(exports.Webhook.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            webhooks: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.webhooks) ? object.webhooks.map((e) => exports.Webhook.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.webhooks) === null || _a === void 0 ? void 0 : _a.length) {
            obj.webhooks = message.webhooks.map((e) => exports.Webhook.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.WebhookListResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseWebhookListResponse();
        message.webhooks = ((_a = object.webhooks) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Webhook.fromPartial(e))) || [];
        return message;
    },
};
function createBaseWebhookGenerateResponse() {
    return { url: "", hook_name: "", channel_id: "", avatar: "" };
}
exports.WebhookGenerateResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        if (message.hook_name !== "") {
            writer.uint32(18).string(message.hook_name);
        }
        if (message.channel_id !== "") {
            writer.uint32(26).string(message.channel_id);
        }
        if (message.avatar !== "") {
            writer.uint32(34).string(message.avatar);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebhookGenerateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.hook_name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.avatar = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            url: isSet(object.url) ? globalThis.String(object.url) : "",
            hook_name: isSet(object.hook_name) ? globalThis.String(object.hook_name) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.hook_name !== "") {
            obj.hook_name = message.hook_name;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.avatar !== "") {
            obj.avatar = message.avatar;
        }
        return obj;
    },
    create(base) {
        return exports.WebhookGenerateResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseWebhookGenerateResponse();
        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : "";
        message.hook_name = (_b = object.hook_name) !== null && _b !== void 0 ? _b : "";
        message.channel_id = (_c = object.channel_id) !== null && _c !== void 0 ? _c : "";
        message.avatar = (_d = object.avatar) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseWebhookHandlerRequest() {
    return { body: undefined, channel_id: "", token: "" };
}
exports.WebhookHandlerRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.body !== undefined) {
            struct_1.Struct.encode(struct_1.Struct.wrap(message.body), writer.uint32(10).fork()).ldelim();
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.token !== "") {
            writer.uint32(26).string(message.token);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebhookHandlerRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.body = struct_1.Struct.unwrap(struct_1.Struct.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            body: isObject(object.body) ? object.body : undefined,
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            token: isSet(object.token) ? globalThis.String(object.token) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.body !== undefined) {
            obj.body = message.body;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.token !== "") {
            obj.token = message.token;
        }
        return obj;
    },
    create(base) {
        return exports.WebhookHandlerRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseWebhookHandlerRequest();
        message.body = (_a = object.body) !== null && _a !== void 0 ? _a : undefined;
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.token = (_c = object.token) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseCheckDuplicateClanNameRequest() {
    return { clan_name: "" };
}
exports.CheckDuplicateClanNameRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_name !== "") {
            writer.uint32(10).string(message.clan_name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckDuplicateClanNameRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_name !== "") {
            obj.clan_name = message.clan_name;
        }
        return obj;
    },
    create(base) {
        return exports.CheckDuplicateClanNameRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseCheckDuplicateClanNameRequest();
        message.clan_name = (_a = object.clan_name) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseCheckDuplicateClanNameResponse() {
    return { is_duplicate: false };
}
exports.CheckDuplicateClanNameResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.is_duplicate !== false) {
            writer.uint32(8).bool(message.is_duplicate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckDuplicateClanNameResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.is_duplicate = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { is_duplicate: isSet(object.is_duplicate) ? globalThis.Boolean(object.is_duplicate) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.is_duplicate !== false) {
            obj.is_duplicate = message.is_duplicate;
        }
        return obj;
    },
    create(base) {
        return exports.CheckDuplicateClanNameResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseCheckDuplicateClanNameResponse();
        message.is_duplicate = (_a = object.is_duplicate) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseClanStickerAddRequest() {
    return { source: "", shortname: "", category: "", clan_id: 0, id: "", media_type: 0 };
}
exports.ClanStickerAddRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.source !== "") {
            writer.uint32(10).string(message.source);
        }
        if (message.shortname !== "") {
            writer.uint32(18).string(message.shortname);
        }
        if (message.category !== "") {
            writer.uint32(26).string(message.category);
        }
        if (message.clan_id !== 0) {
            writer.uint32(32).int64(message.clan_id);
        }
        if (message.id !== "") {
            writer.uint32(42).string(message.id);
        }
        if (message.media_type !== 0) {
            writer.uint32(48).int32(message.media_type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanStickerAddRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.source = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.shortname = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.category = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.clan_id = longToNumber(reader.int64());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.media_type = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            source: isSet(object.source) ? globalThis.String(object.source) : "",
            shortname: isSet(object.shortname) ? globalThis.String(object.shortname) : "",
            category: isSet(object.category) ? globalThis.String(object.category) : "",
            clan_id: isSet(object.clan_id) ? globalThis.Number(object.clan_id) : 0,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            media_type: isSet(object.media_type) ? globalThis.Number(object.media_type) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.source !== "") {
            obj.source = message.source;
        }
        if (message.shortname !== "") {
            obj.shortname = message.shortname;
        }
        if (message.category !== "") {
            obj.category = message.category;
        }
        if (message.clan_id !== 0) {
            obj.clan_id = Math.round(message.clan_id);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.media_type !== 0) {
            obj.media_type = Math.round(message.media_type);
        }
        return obj;
    },
    create(base) {
        return exports.ClanStickerAddRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseClanStickerAddRequest();
        message.source = (_a = object.source) !== null && _a !== void 0 ? _a : "";
        message.shortname = (_b = object.shortname) !== null && _b !== void 0 ? _b : "";
        message.category = (_c = object.category) !== null && _c !== void 0 ? _c : "";
        message.clan_id = (_d = object.clan_id) !== null && _d !== void 0 ? _d : 0;
        message.id = (_e = object.id) !== null && _e !== void 0 ? _e : "";
        message.media_type = (_f = object.media_type) !== null && _f !== void 0 ? _f : 0;
        return message;
    },
};
function createBaseClanStickerListByClanIdRequest() {
    return { clan_id: "" };
}
exports.ClanStickerListByClanIdRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanStickerListByClanIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.ClanStickerListByClanIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseClanStickerListByClanIdRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseClanStickerUpdateByIdRequest() {
    return { id: "", source: "", shortname: "", category: "", clan_id: "" };
}
exports.ClanStickerUpdateByIdRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.source !== "") {
            writer.uint32(18).string(message.source);
        }
        if (message.shortname !== "") {
            writer.uint32(26).string(message.shortname);
        }
        if (message.category !== "") {
            writer.uint32(34).string(message.category);
        }
        if (message.clan_id !== "") {
            writer.uint32(42).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanStickerUpdateByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.source = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.shortname = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.category = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            source: isSet(object.source) ? globalThis.String(object.source) : "",
            shortname: isSet(object.shortname) ? globalThis.String(object.shortname) : "",
            category: isSet(object.category) ? globalThis.String(object.category) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.source !== "") {
            obj.source = message.source;
        }
        if (message.shortname !== "") {
            obj.shortname = message.shortname;
        }
        if (message.category !== "") {
            obj.category = message.category;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.ClanStickerUpdateByIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseClanStickerUpdateByIdRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.source = (_b = object.source) !== null && _b !== void 0 ? _b : "";
        message.shortname = (_c = object.shortname) !== null && _c !== void 0 ? _c : "";
        message.category = (_d = object.category) !== null && _d !== void 0 ? _d : "";
        message.clan_id = (_e = object.clan_id) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseClanStickerDeleteRequest() {
    return { id: "", clan_id: "", sticker_label: "" };
}
exports.ClanStickerDeleteRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        if (message.sticker_label !== "") {
            writer.uint32(26).string(message.sticker_label);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanStickerDeleteRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.sticker_label = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            sticker_label: isSet(object.sticker_label) ? globalThis.String(object.sticker_label) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.sticker_label !== "") {
            obj.sticker_label = message.sticker_label;
        }
        return obj;
    },
    create(base) {
        return exports.ClanStickerDeleteRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseClanStickerDeleteRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        message.sticker_label = (_c = object.sticker_label) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseChangeChannelCategoryRequest() {
    return { clan_id: "", channel_id: "", new_category_id: "" };
}
exports.ChangeChannelCategoryRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.new_category_id !== "") {
            writer.uint32(26).string(message.new_category_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChangeChannelCategoryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.new_category_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            new_category_id: isSet(object.new_category_id) ? globalThis.String(object.new_category_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.new_category_id !== "") {
            obj.new_category_id = message.new_category_id;
        }
        return obj;
    },
    create(base) {
        return exports.ChangeChannelCategoryRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseChangeChannelCategoryRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.new_category_id = (_c = object.new_category_id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseApp() {
    return {
        id: "",
        appname: "",
        creator_id: "",
        applogo: "",
        is_shadow: false,
        disable_time: undefined,
        token: "",
        role: 0,
        about: "",
        app_url: "",
    };
}
exports.App = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.appname !== "") {
            writer.uint32(18).string(message.appname);
        }
        if (message.creator_id !== "") {
            writer.uint32(26).string(message.creator_id);
        }
        if (message.applogo !== "") {
            writer.uint32(34).string(message.applogo);
        }
        if (message.is_shadow !== false) {
            writer.uint32(40).bool(message.is_shadow);
        }
        if (message.disable_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.disable_time), writer.uint32(50).fork()).ldelim();
        }
        if (message.token !== "") {
            writer.uint32(58).string(message.token);
        }
        if (message.role !== 0) {
            writer.uint32(64).int32(message.role);
        }
        if (message.about !== "") {
            writer.uint32(74).string(message.about);
        }
        if (message.app_url !== "") {
            writer.uint32(82).string(message.app_url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseApp();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.appname = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.applogo = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.is_shadow = reader.bool();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.disable_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.role = reader.int32();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.about = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.app_url = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            appname: isSet(object.appname) ? globalThis.String(object.appname) : "",
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            applogo: isSet(object.applogo) ? globalThis.String(object.applogo) : "",
            is_shadow: isSet(object.is_shadow) ? globalThis.Boolean(object.is_shadow) : false,
            disable_time: isSet(object.disable_time) ? fromJsonTimestamp(object.disable_time) : undefined,
            token: isSet(object.token) ? globalThis.String(object.token) : "",
            role: isSet(object.role) ? globalThis.Number(object.role) : 0,
            about: isSet(object.about) ? globalThis.String(object.about) : "",
            app_url: isSet(object.app_url) ? globalThis.String(object.app_url) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.appname !== "") {
            obj.appname = message.appname;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.applogo !== "") {
            obj.applogo = message.applogo;
        }
        if (message.is_shadow !== false) {
            obj.is_shadow = message.is_shadow;
        }
        if (message.disable_time !== undefined) {
            obj.disable_time = message.disable_time.toISOString();
        }
        if (message.token !== "") {
            obj.token = message.token;
        }
        if (message.role !== 0) {
            obj.role = Math.round(message.role);
        }
        if (message.about !== "") {
            obj.about = message.about;
        }
        if (message.app_url !== "") {
            obj.app_url = message.app_url;
        }
        return obj;
    },
    create(base) {
        return exports.App.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const message = createBaseApp();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.appname = (_b = object.appname) !== null && _b !== void 0 ? _b : "";
        message.creator_id = (_c = object.creator_id) !== null && _c !== void 0 ? _c : "";
        message.applogo = (_d = object.applogo) !== null && _d !== void 0 ? _d : "";
        message.is_shadow = (_e = object.is_shadow) !== null && _e !== void 0 ? _e : false;
        message.disable_time = (_f = object.disable_time) !== null && _f !== void 0 ? _f : undefined;
        message.token = (_g = object.token) !== null && _g !== void 0 ? _g : "";
        message.role = (_h = object.role) !== null && _h !== void 0 ? _h : 0;
        message.about = (_j = object.about) !== null && _j !== void 0 ? _j : "";
        message.app_url = (_k = object.app_url) !== null && _k !== void 0 ? _k : "";
        return message;
    },
};
function createBaseAppDeleteRequest() {
    return { id: "", record_deletion: undefined };
}
exports.AppDeleteRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.record_deletion !== undefined) {
            wrappers_1.BoolValue.encode({ value: message.record_deletion }, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppDeleteRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.record_deletion = wrappers_1.BoolValue.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            record_deletion: isSet(object.record_deletion) ? Boolean(object.record_deletion) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.record_deletion !== undefined) {
            obj.record_deletion = message.record_deletion;
        }
        return obj;
    },
    create(base) {
        return exports.AppDeleteRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAppDeleteRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.record_deletion = (_b = object.record_deletion) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
function createBaseAppList() {
    return { apps: [], total_count: 0, next_cursor: "" };
}
exports.AppList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.apps) {
            exports.App.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.total_count !== 0) {
            writer.uint32(16).int32(message.total_count);
        }
        if (message.next_cursor !== "") {
            writer.uint32(26).string(message.next_cursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.apps.push(exports.App.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.total_count = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.next_cursor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            apps: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.apps) ? object.apps.map((e) => exports.App.fromJSON(e)) : [],
            total_count: isSet(object.total_count) ? globalThis.Number(object.total_count) : 0,
            next_cursor: isSet(object.next_cursor) ? globalThis.String(object.next_cursor) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.apps) === null || _a === void 0 ? void 0 : _a.length) {
            obj.apps = message.apps.map((e) => exports.App.toJSON(e));
        }
        if (message.total_count !== 0) {
            obj.total_count = Math.round(message.total_count);
        }
        if (message.next_cursor !== "") {
            obj.next_cursor = message.next_cursor;
        }
        return obj;
    },
    create(base) {
        return exports.AppList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseAppList();
        message.apps = ((_a = object.apps) === null || _a === void 0 ? void 0 : _a.map((e) => exports.App.fromPartial(e))) || [];
        message.total_count = (_b = object.total_count) !== null && _b !== void 0 ? _b : 0;
        message.next_cursor = (_c = object.next_cursor) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseAddAppRequest() {
    return { appname: "", token: "", creator_id: "", role: 0, is_shadow: false, app_url: "", app_logo: "", about_me: "" };
}
exports.AddAppRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.appname !== "") {
            writer.uint32(10).string(message.appname);
        }
        if (message.token !== "") {
            writer.uint32(18).string(message.token);
        }
        if (message.creator_id !== "") {
            writer.uint32(26).string(message.creator_id);
        }
        if (message.role !== 0) {
            writer.uint32(32).int32(message.role);
        }
        if (message.is_shadow !== false) {
            writer.uint32(40).bool(message.is_shadow);
        }
        if (message.app_url !== "") {
            writer.uint32(50).string(message.app_url);
        }
        if (message.app_logo !== "") {
            writer.uint32(58).string(message.app_logo);
        }
        if (message.about_me !== "") {
            writer.uint32(66).string(message.about_me);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddAppRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.appname = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.role = reader.int32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.is_shadow = reader.bool();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.app_url = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.app_logo = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.about_me = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            appname: isSet(object.appname) ? globalThis.String(object.appname) : "",
            token: isSet(object.token) ? globalThis.String(object.token) : "",
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            role: isSet(object.role) ? globalThis.Number(object.role) : 0,
            is_shadow: isSet(object.is_shadow) ? globalThis.Boolean(object.is_shadow) : false,
            app_url: isSet(object.app_url) ? globalThis.String(object.app_url) : "",
            app_logo: isSet(object.app_logo) ? globalThis.String(object.app_logo) : "",
            about_me: isSet(object.about_me) ? globalThis.String(object.about_me) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.appname !== "") {
            obj.appname = message.appname;
        }
        if (message.token !== "") {
            obj.token = message.token;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.role !== 0) {
            obj.role = Math.round(message.role);
        }
        if (message.is_shadow !== false) {
            obj.is_shadow = message.is_shadow;
        }
        if (message.app_url !== "") {
            obj.app_url = message.app_url;
        }
        if (message.app_logo !== "") {
            obj.app_logo = message.app_logo;
        }
        if (message.about_me !== "") {
            obj.about_me = message.about_me;
        }
        return obj;
    },
    create(base) {
        return exports.AddAppRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseAddAppRequest();
        message.appname = (_a = object.appname) !== null && _a !== void 0 ? _a : "";
        message.token = (_b = object.token) !== null && _b !== void 0 ? _b : "";
        message.creator_id = (_c = object.creator_id) !== null && _c !== void 0 ? _c : "";
        message.role = (_d = object.role) !== null && _d !== void 0 ? _d : 0;
        message.is_shadow = (_e = object.is_shadow) !== null && _e !== void 0 ? _e : false;
        message.app_url = (_f = object.app_url) !== null && _f !== void 0 ? _f : "";
        message.app_logo = (_g = object.app_logo) !== null && _g !== void 0 ? _g : "";
        message.about_me = (_h = object.about_me) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseListAppsRequest() {
    return { filter: "", tombstones: false, cursor: "" };
}
exports.ListAppsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.filter !== "") {
            writer.uint32(10).string(message.filter);
        }
        if (message.tombstones !== false) {
            writer.uint32(16).bool(message.tombstones);
        }
        if (message.cursor !== "") {
            writer.uint32(26).string(message.cursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListAppsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.filter = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.tombstones = reader.bool();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
            tombstones: isSet(object.tombstones) ? globalThis.Boolean(object.tombstones) : false,
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.filter !== "") {
            obj.filter = message.filter;
        }
        if (message.tombstones !== false) {
            obj.tombstones = message.tombstones;
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        return obj;
    },
    create(base) {
        return exports.ListAppsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseListAppsRequest();
        message.filter = (_a = object.filter) !== null && _a !== void 0 ? _a : "";
        message.tombstones = (_b = object.tombstones) !== null && _b !== void 0 ? _b : false;
        message.cursor = (_c = object.cursor) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseUpdateAppRequest() {
    return {
        id: "",
        appname: undefined,
        metadata: undefined,
        applogo: undefined,
        token: undefined,
        about: "",
        app_url: "",
    };
}
exports.UpdateAppRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.appname !== undefined) {
            wrappers_1.StringValue.encode({ value: message.appname }, writer.uint32(18).fork()).ldelim();
        }
        if (message.metadata !== undefined) {
            wrappers_1.StringValue.encode({ value: message.metadata }, writer.uint32(26).fork()).ldelim();
        }
        if (message.applogo !== undefined) {
            wrappers_1.StringValue.encode({ value: message.applogo }, writer.uint32(34).fork()).ldelim();
        }
        if (message.token !== undefined) {
            wrappers_1.StringValue.encode({ value: message.token }, writer.uint32(42).fork()).ldelim();
        }
        if (message.about !== "") {
            writer.uint32(50).string(message.about);
        }
        if (message.app_url !== "") {
            writer.uint32(58).string(message.app_url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateAppRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.appname = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.metadata = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.applogo = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.token = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.about = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.app_url = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            appname: isSet(object.appname) ? String(object.appname) : undefined,
            metadata: isSet(object.metadata) ? String(object.metadata) : undefined,
            applogo: isSet(object.applogo) ? String(object.applogo) : undefined,
            token: isSet(object.token) ? String(object.token) : undefined,
            about: isSet(object.about) ? globalThis.String(object.about) : "",
            app_url: isSet(object.app_url) ? globalThis.String(object.app_url) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.appname !== undefined) {
            obj.appname = message.appname;
        }
        if (message.metadata !== undefined) {
            obj.metadata = message.metadata;
        }
        if (message.applogo !== undefined) {
            obj.applogo = message.applogo;
        }
        if (message.token !== undefined) {
            obj.token = message.token;
        }
        if (message.about !== "") {
            obj.about = message.about;
        }
        if (message.app_url !== "") {
            obj.app_url = message.app_url;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateAppRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseUpdateAppRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.appname = (_b = object.appname) !== null && _b !== void 0 ? _b : undefined;
        message.metadata = (_c = object.metadata) !== null && _c !== void 0 ? _c : undefined;
        message.applogo = (_d = object.applogo) !== null && _d !== void 0 ? _d : undefined;
        message.token = (_e = object.token) !== null && _e !== void 0 ? _e : undefined;
        message.about = (_f = object.about) !== null && _f !== void 0 ? _f : "";
        message.app_url = (_g = object.app_url) !== null && _g !== void 0 ? _g : "";
        return message;
    },
};
function createBaseAppId() {
    return { id: "" };
}
exports.AppId = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.AppId.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAppId();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseAppClan() {
    return { app_id: "", clan_id: "" };
}
exports.AppClan = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.app_id !== "") {
            writer.uint32(10).string(message.app_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppClan();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.app_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            app_id: isSet(object.app_id) ? globalThis.String(object.app_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.app_id !== "") {
            obj.app_id = message.app_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.AppClan.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAppClan();
        message.app_id = (_a = object.app_id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseDeleteChannelMessagesRequest() {
    return { before: undefined, ids: [] };
}
exports.DeleteChannelMessagesRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.before !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.before), writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.ids) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteChannelMessagesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.before = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.ids.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            before: isSet(object.before) ? fromJsonTimestamp(object.before) : undefined,
            ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.ids) ? object.ids.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.before !== undefined) {
            obj.before = message.before.toISOString();
        }
        if ((_a = message.ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.ids = message.ids;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteChannelMessagesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseDeleteChannelMessagesRequest();
        message.before = (_a = object.before) !== null && _a !== void 0 ? _a : undefined;
        message.ids = ((_b = object.ids) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseDeleteChannelMessagesResponse() {
    return { total: 0 };
}
exports.DeleteChannelMessagesResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.total !== 0) {
            writer.uint32(8).int64(message.total);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteChannelMessagesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.total = longToNumber(reader.int64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { total: isSet(object.total) ? globalThis.Number(object.total) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        return obj;
    },
    create(base) {
        return exports.DeleteChannelMessagesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDeleteChannelMessagesResponse();
        message.total = (_a = object.total) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseSystemMessage() {
    return {
        id: "",
        clan_id: "",
        channel_id: "",
        welcome_random: "",
        welcome_sticker: "",
        boost_message: "",
        setup_tips: "",
        hide_audit_log: "",
    };
}
exports.SystemMessage = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(26).string(message.channel_id);
        }
        if (message.welcome_random !== "") {
            writer.uint32(34).string(message.welcome_random);
        }
        if (message.welcome_sticker !== "") {
            writer.uint32(42).string(message.welcome_sticker);
        }
        if (message.boost_message !== "") {
            writer.uint32(50).string(message.boost_message);
        }
        if (message.setup_tips !== "") {
            writer.uint32(58).string(message.setup_tips);
        }
        if (message.hide_audit_log !== "") {
            writer.uint32(66).string(message.hide_audit_log);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSystemMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.welcome_random = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.welcome_sticker = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.boost_message = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.setup_tips = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.hide_audit_log = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            welcome_random: isSet(object.welcome_random) ? globalThis.String(object.welcome_random) : "",
            welcome_sticker: isSet(object.welcome_sticker) ? globalThis.String(object.welcome_sticker) : "",
            boost_message: isSet(object.boost_message) ? globalThis.String(object.boost_message) : "",
            setup_tips: isSet(object.setup_tips) ? globalThis.String(object.setup_tips) : "",
            hide_audit_log: isSet(object.hide_audit_log) ? globalThis.String(object.hide_audit_log) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.welcome_random !== "") {
            obj.welcome_random = message.welcome_random;
        }
        if (message.welcome_sticker !== "") {
            obj.welcome_sticker = message.welcome_sticker;
        }
        if (message.boost_message !== "") {
            obj.boost_message = message.boost_message;
        }
        if (message.setup_tips !== "") {
            obj.setup_tips = message.setup_tips;
        }
        if (message.hide_audit_log !== "") {
            obj.hide_audit_log = message.hide_audit_log;
        }
        return obj;
    },
    create(base) {
        return exports.SystemMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseSystemMessage();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        message.channel_id = (_c = object.channel_id) !== null && _c !== void 0 ? _c : "";
        message.welcome_random = (_d = object.welcome_random) !== null && _d !== void 0 ? _d : "";
        message.welcome_sticker = (_e = object.welcome_sticker) !== null && _e !== void 0 ? _e : "";
        message.boost_message = (_f = object.boost_message) !== null && _f !== void 0 ? _f : "";
        message.setup_tips = (_g = object.setup_tips) !== null && _g !== void 0 ? _g : "";
        message.hide_audit_log = (_h = object.hide_audit_log) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseSystemMessagesList() {
    return { system_messages_list: [] };
}
exports.SystemMessagesList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.system_messages_list) {
            exports.SystemMessage.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSystemMessagesList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.system_messages_list.push(exports.SystemMessage.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            system_messages_list: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.system_messages_list)
                ? object.system_messages_list.map((e) => exports.SystemMessage.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.system_messages_list) === null || _a === void 0 ? void 0 : _a.length) {
            obj.system_messages_list = message.system_messages_list.map((e) => exports.SystemMessage.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.SystemMessagesList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSystemMessagesList();
        message.system_messages_list = ((_a = object.system_messages_list) === null || _a === void 0 ? void 0 : _a.map((e) => exports.SystemMessage.fromPartial(e))) || [];
        return message;
    },
};
function createBaseSystemMessageRequest() {
    return {
        clan_id: "",
        channel_id: "",
        welcome_random: "",
        welcome_sticker: "",
        boost_message: "",
        setup_tips: "",
        hide_audit_log: "",
    };
}
exports.SystemMessageRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.welcome_random !== "") {
            writer.uint32(26).string(message.welcome_random);
        }
        if (message.welcome_sticker !== "") {
            writer.uint32(34).string(message.welcome_sticker);
        }
        if (message.boost_message !== "") {
            writer.uint32(42).string(message.boost_message);
        }
        if (message.setup_tips !== "") {
            writer.uint32(50).string(message.setup_tips);
        }
        if (message.hide_audit_log !== "") {
            writer.uint32(58).string(message.hide_audit_log);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSystemMessageRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.welcome_random = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.welcome_sticker = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.boost_message = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.setup_tips = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.hide_audit_log = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            welcome_random: isSet(object.welcome_random) ? globalThis.String(object.welcome_random) : "",
            welcome_sticker: isSet(object.welcome_sticker) ? globalThis.String(object.welcome_sticker) : "",
            boost_message: isSet(object.boost_message) ? globalThis.String(object.boost_message) : "",
            setup_tips: isSet(object.setup_tips) ? globalThis.String(object.setup_tips) : "",
            hide_audit_log: isSet(object.hide_audit_log) ? globalThis.String(object.hide_audit_log) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.welcome_random !== "") {
            obj.welcome_random = message.welcome_random;
        }
        if (message.welcome_sticker !== "") {
            obj.welcome_sticker = message.welcome_sticker;
        }
        if (message.boost_message !== "") {
            obj.boost_message = message.boost_message;
        }
        if (message.setup_tips !== "") {
            obj.setup_tips = message.setup_tips;
        }
        if (message.hide_audit_log !== "") {
            obj.hide_audit_log = message.hide_audit_log;
        }
        return obj;
    },
    create(base) {
        return exports.SystemMessageRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseSystemMessageRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.welcome_random = (_c = object.welcome_random) !== null && _c !== void 0 ? _c : "";
        message.welcome_sticker = (_d = object.welcome_sticker) !== null && _d !== void 0 ? _d : "";
        message.boost_message = (_e = object.boost_message) !== null && _e !== void 0 ? _e : "";
        message.setup_tips = (_f = object.setup_tips) !== null && _f !== void 0 ? _f : "";
        message.hide_audit_log = (_g = object.hide_audit_log) !== null && _g !== void 0 ? _g : "";
        return message;
    },
};
function createBaseDeleteSystemMessage() {
    return { clan_id: "" };
}
exports.DeleteSystemMessage = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteSystemMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteSystemMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDeleteSystemMessage();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetSystemMessage() {
    return { clan_id: "" };
}
exports.GetSystemMessage = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSystemMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.GetSystemMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetSystemMessage();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseDeleteCategoryOrderRequest() {
    return { clan_id: "" };
}
exports.DeleteCategoryOrderRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteCategoryOrderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteCategoryOrderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDeleteCategoryOrderRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseStreamHttpCallbackRequest() {
    return { id: "", client_id: "", clan_id: "", channel_id: "", user_id: "", action: 0, is_publisher: false, token: "" };
}
exports.StreamHttpCallbackRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.client_id !== "") {
            writer.uint32(18).string(message.client_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(26).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(34).string(message.channel_id);
        }
        if (message.user_id !== "") {
            writer.uint32(42).string(message.user_id);
        }
        if (message.action !== 0) {
            writer.uint32(48).int32(message.action);
        }
        if (message.is_publisher !== false) {
            writer.uint32(56).bool(message.is_publisher);
        }
        if (message.token !== "") {
            writer.uint32(66).string(message.token);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStreamHttpCallbackRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.client_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.action = reader.int32();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.is_publisher = reader.bool();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            client_id: isSet(object.client_id) ? globalThis.String(object.client_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            action: isSet(object.action) ? globalThis.Number(object.action) : 0,
            is_publisher: isSet(object.is_publisher) ? globalThis.Boolean(object.is_publisher) : false,
            token: isSet(object.token) ? globalThis.String(object.token) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.client_id !== "") {
            obj.client_id = message.client_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.action !== 0) {
            obj.action = Math.round(message.action);
        }
        if (message.is_publisher !== false) {
            obj.is_publisher = message.is_publisher;
        }
        if (message.token !== "") {
            obj.token = message.token;
        }
        return obj;
    },
    create(base) {
        return exports.StreamHttpCallbackRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseStreamHttpCallbackRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.client_id = (_b = object.client_id) !== null && _b !== void 0 ? _b : "";
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : "";
        message.channel_id = (_d = object.channel_id) !== null && _d !== void 0 ? _d : "";
        message.user_id = (_e = object.user_id) !== null && _e !== void 0 ? _e : "";
        message.action = (_f = object.action) !== null && _f !== void 0 ? _f : 0;
        message.is_publisher = (_g = object.is_publisher) !== null && _g !== void 0 ? _g : false;
        message.token = (_h = object.token) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseStreamHttpCallbackResponse() {
    return { code: undefined, msg: "" };
}
exports.StreamHttpCallbackResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.code !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.code }, writer.uint32(10).fork()).ldelim();
        }
        if (message.msg !== "") {
            writer.uint32(18).string(message.msg);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStreamHttpCallbackResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.code = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.msg = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code: isSet(object.code) ? Number(object.code) : undefined,
            msg: isSet(object.msg) ? globalThis.String(object.msg) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== undefined) {
            obj.code = message.code;
        }
        if (message.msg !== "") {
            obj.msg = message.msg;
        }
        return obj;
    },
    create(base) {
        return exports.StreamHttpCallbackResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseStreamHttpCallbackResponse();
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : undefined;
        message.msg = (_b = object.msg) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseStreamingChannelUser() {
    return { id: "", user_id: "", channel_id: "", participant: "" };
}
exports.StreamingChannelUser = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.user_id !== "") {
            writer.uint32(18).string(message.user_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(26).string(message.channel_id);
        }
        if (message.participant !== "") {
            writer.uint32(34).string(message.participant);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStreamingChannelUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.participant = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            participant: isSet(object.participant) ? globalThis.String(object.participant) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.participant !== "") {
            obj.participant = message.participant;
        }
        return obj;
    },
    create(base) {
        return exports.StreamingChannelUser.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseStreamingChannelUser();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.user_id = (_b = object.user_id) !== null && _b !== void 0 ? _b : "";
        message.channel_id = (_c = object.channel_id) !== null && _c !== void 0 ? _c : "";
        message.participant = (_d = object.participant) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseStreamingChannelUserList() {
    return { streaming_channel_users: [] };
}
exports.StreamingChannelUserList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.streaming_channel_users) {
            exports.StreamingChannelUser.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStreamingChannelUserList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.streaming_channel_users.push(exports.StreamingChannelUser.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            streaming_channel_users: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.streaming_channel_users)
                ? object.streaming_channel_users.map((e) => exports.StreamingChannelUser.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.streaming_channel_users) === null || _a === void 0 ? void 0 : _a.length) {
            obj.streaming_channel_users = message.streaming_channel_users.map((e) => exports.StreamingChannelUser.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.StreamingChannelUserList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseStreamingChannelUserList();
        message.streaming_channel_users = ((_a = object.streaming_channel_users) === null || _a === void 0 ? void 0 : _a.map((e) => exports.StreamingChannelUser.fromPartial(e))) ||
            [];
        return message;
    },
};
function createBaseRegisterStreamingChannelRequest() {
    return { clan_id: "", channel_id: "" };
}
exports.RegisterStreamingChannelRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegisterStreamingChannelRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.RegisterStreamingChannelRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRegisterStreamingChannelRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseRegisterStreamingChannelResponse() {
    return { clan_id: "", channel_id: "", streaming_url: "" };
}
exports.RegisterStreamingChannelResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.streaming_url !== "") {
            writer.uint32(26).string(message.streaming_url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegisterStreamingChannelResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.streaming_url = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            streaming_url: isSet(object.streaming_url) ? globalThis.String(object.streaming_url) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.streaming_url !== "") {
            obj.streaming_url = message.streaming_url;
        }
        return obj;
    },
    create(base) {
        return exports.RegisterStreamingChannelResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseRegisterStreamingChannelResponse();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.streaming_url = (_c = object.streaming_url) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseGiveCoffeeEvent() {
    return { sender_id: "", receiver_id: "", token_count: 0, message_ref_id: "", channel_id: "", clan_id: "" };
}
exports.GiveCoffeeEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender_id !== "") {
            writer.uint32(10).string(message.sender_id);
        }
        if (message.receiver_id !== "") {
            writer.uint32(18).string(message.receiver_id);
        }
        if (message.token_count !== 0) {
            writer.uint32(24).int32(message.token_count);
        }
        if (message.message_ref_id !== "") {
            writer.uint32(34).string(message.message_ref_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(42).string(message.channel_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(50).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGiveCoffeeEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.receiver_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.token_count = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.message_ref_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender_id: isSet(object.sender_id) ? globalThis.String(object.sender_id) : "",
            receiver_id: isSet(object.receiver_id) ? globalThis.String(object.receiver_id) : "",
            token_count: isSet(object.token_count) ? globalThis.Number(object.token_count) : 0,
            message_ref_id: isSet(object.message_ref_id) ? globalThis.String(object.message_ref_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender_id !== "") {
            obj.sender_id = message.sender_id;
        }
        if (message.receiver_id !== "") {
            obj.receiver_id = message.receiver_id;
        }
        if (message.token_count !== 0) {
            obj.token_count = Math.round(message.token_count);
        }
        if (message.message_ref_id !== "") {
            obj.message_ref_id = message.message_ref_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.GiveCoffeeEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseGiveCoffeeEvent();
        message.sender_id = (_a = object.sender_id) !== null && _a !== void 0 ? _a : "";
        message.receiver_id = (_b = object.receiver_id) !== null && _b !== void 0 ? _b : "";
        message.token_count = (_c = object.token_count) !== null && _c !== void 0 ? _c : 0;
        message.message_ref_id = (_d = object.message_ref_id) !== null && _d !== void 0 ? _d : "";
        message.channel_id = (_e = object.channel_id) !== null && _e !== void 0 ? _e : "";
        message.clan_id = (_f = object.clan_id) !== null && _f !== void 0 ? _f : "";
        return message;
    },
};
function createBaseListChannelAppsRequest() {
    return { clan_id: "" };
}
exports.ListChannelAppsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListChannelAppsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.ListChannelAppsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListChannelAppsRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseListChannelAppsResponse() {
    return { channel_apps: [] };
}
exports.ListChannelAppsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.channel_apps) {
            exports.ChannelAppResponse.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListChannelAppsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_apps.push(exports.ChannelAppResponse.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_apps: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.channel_apps)
                ? object.channel_apps.map((e) => exports.ChannelAppResponse.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.channel_apps) === null || _a === void 0 ? void 0 : _a.length) {
            obj.channel_apps = message.channel_apps.map((e) => exports.ChannelAppResponse.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListChannelAppsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListChannelAppsResponse();
        message.channel_apps = ((_a = object.channel_apps) === null || _a === void 0 ? void 0 : _a.map((e) => exports.ChannelAppResponse.fromPartial(e))) || [];
        return message;
    },
};
function createBaseChannelAppResponse() {
    return { id: "", clan_id: "", channel_id: "", app_id: "", app_url: "" };
}
exports.ChannelAppResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(26).string(message.channel_id);
        }
        if (message.app_id !== "") {
            writer.uint32(34).string(message.app_id);
        }
        if (message.app_url !== "") {
            writer.uint32(42).string(message.app_url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelAppResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.app_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.app_url = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            app_id: isSet(object.app_id) ? globalThis.String(object.app_id) : "",
            app_url: isSet(object.app_url) ? globalThis.String(object.app_url) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.app_id !== "") {
            obj.app_id = message.app_id;
        }
        if (message.app_url !== "") {
            obj.app_url = message.app_url;
        }
        return obj;
    },
    create(base) {
        return exports.ChannelAppResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseChannelAppResponse();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        message.channel_id = (_c = object.channel_id) !== null && _c !== void 0 ? _c : "";
        message.app_id = (_d = object.app_id) !== null && _d !== void 0 ? _d : "";
        message.app_url = (_e = object.app_url) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseAllUserClans() {
    return { users: [] };
}
exports.AllUserClans = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.users) {
            exports.User.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAllUserClans();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.users.push(exports.User.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { users: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.users) ? object.users.map((e) => exports.User.fromJSON(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.users) === null || _a === void 0 ? void 0 : _a.length) {
            obj.users = message.users.map((e) => exports.User.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.AllUserClans.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAllUserClans();
        message.users = ((_a = object.users) === null || _a === void 0 ? void 0 : _a.map((e) => exports.User.fromPartial(e))) || [];
        return message;
    },
};
function createBaseRoleListEventRequest() {
    return { clan_id: "", limit: 0, state: 0, cursor: "" };
}
exports.RoleListEventRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.limit !== 0) {
            writer.uint32(16).int32(message.limit);
        }
        if (message.state !== 0) {
            writer.uint32(24).int32(message.state);
        }
        if (message.cursor !== "") {
            writer.uint32(34).string(message.cursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRoleListEventRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.limit = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.state = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
            state: isSet(object.state) ? globalThis.Number(object.state) : 0,
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.limit !== 0) {
            obj.limit = Math.round(message.limit);
        }
        if (message.state !== 0) {
            obj.state = Math.round(message.state);
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        return obj;
    },
    create(base) {
        return exports.RoleListEventRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseRoleListEventRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.limit = (_b = object.limit) !== null && _b !== void 0 ? _b : 0;
        message.state = (_c = object.state) !== null && _c !== void 0 ? _c : 0;
        message.cursor = (_d = object.cursor) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseRoleListEventResponse() {
    return { limit: 0, state: 0, cursor: "", clanId: "", roles: undefined };
}
exports.RoleListEventResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.limit !== 0) {
            writer.uint32(8).int32(message.limit);
        }
        if (message.state !== 0) {
            writer.uint32(16).int32(message.state);
        }
        if (message.cursor !== "") {
            writer.uint32(26).string(message.cursor);
        }
        if (message.clanId !== "") {
            writer.uint32(34).string(message.clanId);
        }
        if (message.roles !== undefined) {
            exports.RoleList.encode(message.roles, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRoleListEventResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.limit = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.state = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clanId = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.roles = exports.RoleList.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
            state: isSet(object.state) ? globalThis.Number(object.state) : 0,
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
            clanId: isSet(object.clanId) ? globalThis.String(object.clanId) : "",
            roles: isSet(object.roles) ? exports.RoleList.fromJSON(object.roles) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.limit !== 0) {
            obj.limit = Math.round(message.limit);
        }
        if (message.state !== 0) {
            obj.state = Math.round(message.state);
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        if (message.clanId !== "") {
            obj.clanId = message.clanId;
        }
        if (message.roles !== undefined) {
            obj.roles = exports.RoleList.toJSON(message.roles);
        }
        return obj;
    },
    create(base) {
        return exports.RoleListEventResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseRoleListEventResponse();
        message.limit = (_a = object.limit) !== null && _a !== void 0 ? _a : 0;
        message.state = (_b = object.state) !== null && _b !== void 0 ? _b : 0;
        message.cursor = (_c = object.cursor) !== null && _c !== void 0 ? _c : "";
        message.clanId = (_d = object.clanId) !== null && _d !== void 0 ? _d : "";
        message.roles = (object.roles !== undefined && object.roles !== null)
            ? exports.RoleList.fromPartial(object.roles)
            : undefined;
        return message;
    },
};
function createBaseUserPermissionInChannelListRequest() {
    return { clan_id: "", channel_id: "" };
}
exports.UserPermissionInChannelListRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserPermissionInChannelListRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.UserPermissionInChannelListRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUserPermissionInChannelListRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseUserPermissionInChannelListResponse() {
    return { clan_id: "", channel_id: "", permissions: undefined };
}
exports.UserPermissionInChannelListResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.permissions !== undefined) {
            exports.PermissionList.encode(message.permissions, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserPermissionInChannelListResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.permissions = exports.PermissionList.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            permissions: isSet(object.permissions) ? exports.PermissionList.fromJSON(object.permissions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.permissions !== undefined) {
            obj.permissions = exports.PermissionList.toJSON(message.permissions);
        }
        return obj;
    },
    create(base) {
        return exports.UserPermissionInChannelListResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUserPermissionInChannelListResponse();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.permissions = (object.permissions !== undefined && object.permissions !== null)
            ? exports.PermissionList.fromPartial(object.permissions)
            : undefined;
        return message;
    },
};
function createBasePermissionRoleChannel() {
    return { permission_id: "", active: false };
}
exports.PermissionRoleChannel = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.permission_id !== "") {
            writer.uint32(10).string(message.permission_id);
        }
        if (message.active !== false) {
            writer.uint32(16).bool(message.active);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePermissionRoleChannel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.permission_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.active = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            permission_id: isSet(object.permission_id) ? globalThis.String(object.permission_id) : "",
            active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.permission_id !== "") {
            obj.permission_id = message.permission_id;
        }
        if (message.active !== false) {
            obj.active = message.active;
        }
        return obj;
    },
    create(base) {
        return exports.PermissionRoleChannel.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBasePermissionRoleChannel();
        message.permission_id = (_a = object.permission_id) !== null && _a !== void 0 ? _a : "";
        message.active = (_b = object.active) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBasePermissionRoleChannelListEventRequest() {
    return { role_id: "", channel_id: "", user_id: "" };
}
exports.PermissionRoleChannelListEventRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.role_id !== "") {
            writer.uint32(10).string(message.role_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.user_id !== "") {
            writer.uint32(34).string(message.user_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePermissionRoleChannelListEventRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.role_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            role_id: isSet(object.role_id) ? globalThis.String(object.role_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.role_id !== "") {
            obj.role_id = message.role_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        return obj;
    },
    create(base) {
        return exports.PermissionRoleChannelListEventRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePermissionRoleChannelListEventRequest();
        message.role_id = (_a = object.role_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.user_id = (_c = object.user_id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBasePermissionRoleChannelListEventResponse() {
    return { role_id: "", channel_id: "", user_id: "", permission_role_channel: [] };
}
exports.PermissionRoleChannelListEventResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.role_id !== "") {
            writer.uint32(10).string(message.role_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.user_id !== "") {
            writer.uint32(26).string(message.user_id);
        }
        for (const v of message.permission_role_channel) {
            exports.PermissionRoleChannel.encode(v, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePermissionRoleChannelListEventResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.role_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.permission_role_channel.push(exports.PermissionRoleChannel.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            role_id: isSet(object.role_id) ? globalThis.String(object.role_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            permission_role_channel: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.permission_role_channel)
                ? object.permission_role_channel.map((e) => exports.PermissionRoleChannel.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.role_id !== "") {
            obj.role_id = message.role_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if ((_a = message.permission_role_channel) === null || _a === void 0 ? void 0 : _a.length) {
            obj.permission_role_channel = message.permission_role_channel.map((e) => exports.PermissionRoleChannel.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.PermissionRoleChannelListEventResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBasePermissionRoleChannelListEventResponse();
        message.role_id = (_a = object.role_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.user_id = (_c = object.user_id) !== null && _c !== void 0 ? _c : "";
        message.permission_role_channel =
            ((_d = object.permission_role_channel) === null || _d === void 0 ? void 0 : _d.map((e) => exports.PermissionRoleChannel.fromPartial(e))) || [];
        return message;
    },
};
function createBaseChannelSettingListRequest() {
    return {
        clan_id: "",
        parent_id: "",
        category_id: "",
        privateChannel: undefined,
        active: undefined,
        status: undefined,
        type: undefined,
        limit: undefined,
        page: undefined,
        channel_label: "",
    };
}
exports.ChannelSettingListRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.parent_id !== "") {
            writer.uint32(18).string(message.parent_id);
        }
        if (message.category_id !== "") {
            writer.uint32(26).string(message.category_id);
        }
        if (message.privateChannel !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.privateChannel }, writer.uint32(34).fork()).ldelim();
        }
        if (message.active !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.active }, writer.uint32(42).fork()).ldelim();
        }
        if (message.status !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.status }, writer.uint32(50).fork()).ldelim();
        }
        if (message.type !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.type }, writer.uint32(58).fork()).ldelim();
        }
        if (message.limit !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.limit }, writer.uint32(66).fork()).ldelim();
        }
        if (message.page !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.page }, writer.uint32(74).fork()).ldelim();
        }
        if (message.channel_label !== "") {
            writer.uint32(82).string(message.channel_label);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelSettingListRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.parent_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.category_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.privateChannel = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.active = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.status = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.type = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.limit = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.page = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.channel_label = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            parent_id: isSet(object.parent_id) ? globalThis.String(object.parent_id) : "",
            category_id: isSet(object.category_id) ? globalThis.String(object.category_id) : "",
            privateChannel: isSet(object.privateChannel) ? Number(object.privateChannel) : undefined,
            active: isSet(object.active) ? Number(object.active) : undefined,
            status: isSet(object.status) ? Number(object.status) : undefined,
            type: isSet(object.type) ? Number(object.type) : undefined,
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
            page: isSet(object.page) ? Number(object.page) : undefined,
            channel_label: isSet(object.channel_label) ? globalThis.String(object.channel_label) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.parent_id !== "") {
            obj.parent_id = message.parent_id;
        }
        if (message.category_id !== "") {
            obj.category_id = message.category_id;
        }
        if (message.privateChannel !== undefined) {
            obj.privateChannel = message.privateChannel;
        }
        if (message.active !== undefined) {
            obj.active = message.active;
        }
        if (message.status !== undefined) {
            obj.status = message.status;
        }
        if (message.type !== undefined) {
            obj.type = message.type;
        }
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        if (message.page !== undefined) {
            obj.page = message.page;
        }
        if (message.channel_label !== "") {
            obj.channel_label = message.channel_label;
        }
        return obj;
    },
    create(base) {
        return exports.ChannelSettingListRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const message = createBaseChannelSettingListRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.parent_id = (_b = object.parent_id) !== null && _b !== void 0 ? _b : "";
        message.category_id = (_c = object.category_id) !== null && _c !== void 0 ? _c : "";
        message.privateChannel = (_d = object.privateChannel) !== null && _d !== void 0 ? _d : undefined;
        message.active = (_e = object.active) !== null && _e !== void 0 ? _e : undefined;
        message.status = (_f = object.status) !== null && _f !== void 0 ? _f : undefined;
        message.type = (_g = object.type) !== null && _g !== void 0 ? _g : undefined;
        message.limit = (_h = object.limit) !== null && _h !== void 0 ? _h : undefined;
        message.page = (_j = object.page) !== null && _j !== void 0 ? _j : undefined;
        message.channel_label = (_k = object.channel_label) !== null && _k !== void 0 ? _k : "";
        return message;
    },
};
function createBaseChannelSettingItem() {
    return {
        id: "",
        creator_id: "",
        parent_id: "",
        channel_label: "",
        category_id: "",
        meeting_code: "",
        channel_private: 0,
        channel_type: 0,
        active: 0,
        user_ids: [],
        message_count: 0,
        last_sent_message: undefined,
    };
}
exports.ChannelSettingItem = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.creator_id !== "") {
            writer.uint32(18).string(message.creator_id);
        }
        if (message.parent_id !== "") {
            writer.uint32(26).string(message.parent_id);
        }
        if (message.channel_label !== "") {
            writer.uint32(34).string(message.channel_label);
        }
        if (message.category_id !== "") {
            writer.uint32(42).string(message.category_id);
        }
        if (message.meeting_code !== "") {
            writer.uint32(50).string(message.meeting_code);
        }
        if (message.channel_private !== 0) {
            writer.uint32(56).int32(message.channel_private);
        }
        if (message.channel_type !== 0) {
            writer.uint32(64).int32(message.channel_type);
        }
        if (message.active !== 0) {
            writer.uint32(72).int32(message.active);
        }
        for (const v of message.user_ids) {
            writer.uint32(82).string(v);
        }
        if (message.message_count !== 0) {
            writer.uint32(88).int64(message.message_count);
        }
        if (message.last_sent_message !== undefined) {
            exports.ChannelMessageHeader.encode(message.last_sent_message, writer.uint32(98).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelSettingItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.parent_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.channel_label = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.category_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.meeting_code = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.channel_private = reader.int32();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.channel_type = reader.int32();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.active = reader.int32();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.user_ids.push(reader.string());
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.message_count = longToNumber(reader.int64());
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.last_sent_message = exports.ChannelMessageHeader.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            parent_id: isSet(object.parent_id) ? globalThis.String(object.parent_id) : "",
            channel_label: isSet(object.channel_label) ? globalThis.String(object.channel_label) : "",
            category_id: isSet(object.category_id) ? globalThis.String(object.category_id) : "",
            meeting_code: isSet(object.meeting_code) ? globalThis.String(object.meeting_code) : "",
            channel_private: isSet(object.channel_private) ? globalThis.Number(object.channel_private) : 0,
            channel_type: isSet(object.channel_type) ? globalThis.Number(object.channel_type) : 0,
            active: isSet(object.active) ? globalThis.Number(object.active) : 0,
            user_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_ids) ? object.user_ids.map((e) => globalThis.String(e)) : [],
            message_count: isSet(object.message_count) ? globalThis.Number(object.message_count) : 0,
            last_sent_message: isSet(object.last_sent_message)
                ? exports.ChannelMessageHeader.fromJSON(object.last_sent_message)
                : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.parent_id !== "") {
            obj.parent_id = message.parent_id;
        }
        if (message.channel_label !== "") {
            obj.channel_label = message.channel_label;
        }
        if (message.category_id !== "") {
            obj.category_id = message.category_id;
        }
        if (message.meeting_code !== "") {
            obj.meeting_code = message.meeting_code;
        }
        if (message.channel_private !== 0) {
            obj.channel_private = Math.round(message.channel_private);
        }
        if (message.channel_type !== 0) {
            obj.channel_type = Math.round(message.channel_type);
        }
        if (message.active !== 0) {
            obj.active = Math.round(message.active);
        }
        if ((_a = message.user_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.user_ids = message.user_ids;
        }
        if (message.message_count !== 0) {
            obj.message_count = Math.round(message.message_count);
        }
        if (message.last_sent_message !== undefined) {
            obj.last_sent_message = exports.ChannelMessageHeader.toJSON(message.last_sent_message);
        }
        return obj;
    },
    create(base) {
        return exports.ChannelSettingItem.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseChannelSettingItem();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.creator_id = (_b = object.creator_id) !== null && _b !== void 0 ? _b : "";
        message.parent_id = (_c = object.parent_id) !== null && _c !== void 0 ? _c : "";
        message.channel_label = (_d = object.channel_label) !== null && _d !== void 0 ? _d : "";
        message.category_id = (_e = object.category_id) !== null && _e !== void 0 ? _e : "";
        message.meeting_code = (_f = object.meeting_code) !== null && _f !== void 0 ? _f : "";
        message.channel_private = (_g = object.channel_private) !== null && _g !== void 0 ? _g : 0;
        message.channel_type = (_h = object.channel_type) !== null && _h !== void 0 ? _h : 0;
        message.active = (_j = object.active) !== null && _j !== void 0 ? _j : 0;
        message.user_ids = ((_k = object.user_ids) === null || _k === void 0 ? void 0 : _k.map((e) => e)) || [];
        message.message_count = (_l = object.message_count) !== null && _l !== void 0 ? _l : 0;
        message.last_sent_message = (object.last_sent_message !== undefined && object.last_sent_message !== null)
            ? exports.ChannelMessageHeader.fromPartial(object.last_sent_message)
            : undefined;
        return message;
    },
};
function createBaseChannelSettingListResponse() {
    return { clan_id: "", channel_count: 0, thread_count: 0, channel_setting_list: [] };
}
exports.ChannelSettingListResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_count !== 0) {
            writer.uint32(16).int32(message.channel_count);
        }
        if (message.thread_count !== 0) {
            writer.uint32(24).int32(message.thread_count);
        }
        for (const v of message.channel_setting_list) {
            exports.ChannelSettingItem.encode(v, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelSettingListResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.channel_count = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.thread_count = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.channel_setting_list.push(exports.ChannelSettingItem.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_count: isSet(object.channel_count) ? globalThis.Number(object.channel_count) : 0,
            thread_count: isSet(object.thread_count) ? globalThis.Number(object.thread_count) : 0,
            channel_setting_list: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.channel_setting_list)
                ? object.channel_setting_list.map((e) => exports.ChannelSettingItem.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_count !== 0) {
            obj.channel_count = Math.round(message.channel_count);
        }
        if (message.thread_count !== 0) {
            obj.thread_count = Math.round(message.thread_count);
        }
        if ((_a = message.channel_setting_list) === null || _a === void 0 ? void 0 : _a.length) {
            obj.channel_setting_list = message.channel_setting_list.map((e) => exports.ChannelSettingItem.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ChannelSettingListResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseChannelSettingListResponse();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_count = (_b = object.channel_count) !== null && _b !== void 0 ? _b : 0;
        message.thread_count = (_c = object.thread_count) !== null && _c !== void 0 ? _c : 0;
        message.channel_setting_list = ((_d = object.channel_setting_list) === null || _d === void 0 ? void 0 : _d.map((e) => exports.ChannelSettingItem.fromPartial(e))) || [];
        return message;
    },
};
function createBaseMarkAsReadRequest() {
    return { channel_id: "", category_id: "", clan_id: "" };
}
exports.MarkAsReadRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        if (message.category_id !== "") {
            writer.uint32(18).string(message.category_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(26).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMarkAsReadRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.category_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            category_id: isSet(object.category_id) ? globalThis.String(object.category_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.category_id !== "") {
            obj.category_id = message.category_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.MarkAsReadRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMarkAsReadRequest();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        message.category_id = (_b = object.category_id) !== null && _b !== void 0 ? _b : "";
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseEditChannelCanvasRequest() {
    return { id: undefined, channel_id: "", clan_id: "", title: "", content: "", is_default: false, status: 0 };
}
exports.EditChannelCanvasRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== undefined) {
            wrappers_1.StringValue.encode({ value: message.id }, writer.uint32(10).fork()).ldelim();
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(26).string(message.clan_id);
        }
        if (message.title !== "") {
            writer.uint32(34).string(message.title);
        }
        if (message.content !== "") {
            writer.uint32(42).string(message.content);
        }
        if (message.is_default !== false) {
            writer.uint32(48).bool(message.is_default);
        }
        if (message.status !== 0) {
            writer.uint32(56).int32(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEditChannelCanvasRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.is_default = reader.bool();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : undefined,
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            content: isSet(object.content) ? globalThis.String(object.content) : "",
            is_default: isSet(object.is_default) ? globalThis.Boolean(object.is_default) : false,
            status: isSet(object.status) ? globalThis.Number(object.status) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = message.id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.content !== "") {
            obj.content = message.content;
        }
        if (message.is_default !== false) {
            obj.is_default = message.is_default;
        }
        if (message.status !== 0) {
            obj.status = Math.round(message.status);
        }
        return obj;
    },
    create(base) {
        return exports.EditChannelCanvasRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseEditChannelCanvasRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : undefined;
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : "";
        message.title = (_d = object.title) !== null && _d !== void 0 ? _d : "";
        message.content = (_e = object.content) !== null && _e !== void 0 ? _e : "";
        message.is_default = (_f = object.is_default) !== null && _f !== void 0 ? _f : false;
        message.status = (_g = object.status) !== null && _g !== void 0 ? _g : 0;
        return message;
    },
};
function createBaseEditChannelCanvasResponse() {
    return { id: "" };
}
exports.EditChannelCanvasResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEditChannelCanvasResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.EditChannelCanvasResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEditChannelCanvasResponse();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseDeleteChannelCanvasRequest() {
    return { clan_id: "", channel_id: "", canvas_id: "" };
}
exports.DeleteChannelCanvasRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.canvas_id !== "") {
            writer.uint32(26).string(message.canvas_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteChannelCanvasRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.canvas_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            canvas_id: isSet(object.canvas_id) ? globalThis.String(object.canvas_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.canvas_id !== "") {
            obj.canvas_id = message.canvas_id;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteChannelCanvasRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseDeleteChannelCanvasRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.canvas_id = (_c = object.canvas_id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseChannelCanvasListRequest() {
    return { clan_id: "", channel_id: "", limit: undefined, page: undefined, cursor: "" };
}
exports.ChannelCanvasListRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.limit !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.limit }, writer.uint32(26).fork()).ldelim();
        }
        if (message.page !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.page }, writer.uint32(34).fork()).ldelim();
        }
        if (message.cursor !== "") {
            writer.uint32(42).string(message.cursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelCanvasListRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.limit = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.page = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
            page: isSet(object.page) ? Number(object.page) : undefined,
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        if (message.page !== undefined) {
            obj.page = message.page;
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        return obj;
    },
    create(base) {
        return exports.ChannelCanvasListRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseChannelCanvasListRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.limit = (_c = object.limit) !== null && _c !== void 0 ? _c : undefined;
        message.page = (_d = object.page) !== null && _d !== void 0 ? _d : undefined;
        message.cursor = (_e = object.cursor) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseChannelCanvasItem() {
    return { id: "", title: "", is_default: false, content: "", creator_id: "", update_time: undefined };
}
exports.ChannelCanvasItem = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.is_default !== false) {
            writer.uint32(24).bool(message.is_default);
        }
        if (message.content !== "") {
            writer.uint32(34).string(message.content);
        }
        if (message.creator_id !== "") {
            writer.uint32(42).string(message.creator_id);
        }
        if (message.update_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.update_time), writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelCanvasItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.is_default = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.update_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            is_default: isSet(object.is_default) ? globalThis.Boolean(object.is_default) : false,
            content: isSet(object.content) ? globalThis.String(object.content) : "",
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            update_time: isSet(object.update_time) ? fromJsonTimestamp(object.update_time) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.is_default !== false) {
            obj.is_default = message.is_default;
        }
        if (message.content !== "") {
            obj.content = message.content;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.update_time !== undefined) {
            obj.update_time = message.update_time.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.ChannelCanvasItem.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseChannelCanvasItem();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.title = (_b = object.title) !== null && _b !== void 0 ? _b : "";
        message.is_default = (_c = object.is_default) !== null && _c !== void 0 ? _c : false;
        message.content = (_d = object.content) !== null && _d !== void 0 ? _d : "";
        message.creator_id = (_e = object.creator_id) !== null && _e !== void 0 ? _e : "";
        message.update_time = (_f = object.update_time) !== null && _f !== void 0 ? _f : undefined;
        return message;
    },
};
function createBaseChannelCanvasListResponse() {
    return { clan_id: "", channel_id: "", channel_canvases: [], count: 0 };
}
exports.ChannelCanvasListResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        for (const v of message.channel_canvases) {
            exports.ChannelCanvasItem.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (message.count !== 0) {
            writer.uint32(32).int64(message.count);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelCanvasListResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.channel_canvases.push(exports.ChannelCanvasItem.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.count = longToNumber(reader.int64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            channel_canvases: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.channel_canvases)
                ? object.channel_canvases.map((e) => exports.ChannelCanvasItem.fromJSON(e))
                : [],
            count: isSet(object.count) ? globalThis.Number(object.count) : 0,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if ((_a = message.channel_canvases) === null || _a === void 0 ? void 0 : _a.length) {
            obj.channel_canvases = message.channel_canvases.map((e) => exports.ChannelCanvasItem.toJSON(e));
        }
        if (message.count !== 0) {
            obj.count = Math.round(message.count);
        }
        return obj;
    },
    create(base) {
        return exports.ChannelCanvasListResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseChannelCanvasListResponse();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.channel_canvases = ((_c = object.channel_canvases) === null || _c === void 0 ? void 0 : _c.map((e) => exports.ChannelCanvasItem.fromPartial(e))) || [];
        message.count = (_d = object.count) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBaseChannelCanvasDetailRequest() {
    return { id: "", clan_id: "", channel_id: "" };
}
exports.ChannelCanvasDetailRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(26).string(message.channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelCanvasDetailRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.ChannelCanvasDetailRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseChannelCanvasDetailRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        message.channel_id = (_c = object.channel_id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseChannelCanvasDetailResponse() {
    return { id: "", title: "", content: "", creator_id: "", editor_id: "", is_default: false };
}
exports.ChannelCanvasDetailResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.content !== "") {
            writer.uint32(26).string(message.content);
        }
        if (message.creator_id !== "") {
            writer.uint32(34).string(message.creator_id);
        }
        if (message.editor_id !== "") {
            writer.uint32(42).string(message.editor_id);
        }
        if (message.is_default !== false) {
            writer.uint32(48).bool(message.is_default);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelCanvasDetailResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.editor_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.is_default = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            content: isSet(object.content) ? globalThis.String(object.content) : "",
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            editor_id: isSet(object.editor_id) ? globalThis.String(object.editor_id) : "",
            is_default: isSet(object.is_default) ? globalThis.Boolean(object.is_default) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.content !== "") {
            obj.content = message.content;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.editor_id !== "") {
            obj.editor_id = message.editor_id;
        }
        if (message.is_default !== false) {
            obj.is_default = message.is_default;
        }
        return obj;
    },
    create(base) {
        return exports.ChannelCanvasDetailResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseChannelCanvasDetailResponse();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.title = (_b = object.title) !== null && _b !== void 0 ? _b : "";
        message.content = (_c = object.content) !== null && _c !== void 0 ? _c : "";
        message.creator_id = (_d = object.creator_id) !== null && _d !== void 0 ? _d : "";
        message.editor_id = (_e = object.editor_id) !== null && _e !== void 0 ? _e : "";
        message.is_default = (_f = object.is_default) !== null && _f !== void 0 ? _f : false;
        return message;
    },
};
function createBaseAddFavoriteChannelRequest() {
    return { channel_id: "", clan_id: "" };
}
exports.AddFavoriteChannelRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddFavoriteChannelRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.AddFavoriteChannelRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAddFavoriteChannelRequest();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseRemoveFavoriteChannelRequest() {
    return { channel_id: "" };
}
exports.RemoveFavoriteChannelRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFavoriteChannelRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveFavoriteChannelRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRemoveFavoriteChannelRequest();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseAddFavoriteChannelResponse() {
    return { channel_id: "" };
}
exports.AddFavoriteChannelResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddFavoriteChannelResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.AddFavoriteChannelResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddFavoriteChannelResponse();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseListFavoriteChannelRequest() {
    return { clan_id: "" };
}
exports.ListFavoriteChannelRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListFavoriteChannelRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.ListFavoriteChannelRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListFavoriteChannelRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseListFavoriteChannelResponse() {
    return { channel_ids: [] };
}
exports.ListFavoriteChannelResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.channel_ids) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListFavoriteChannelResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_ids.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.channel_ids)
                ? object.channel_ids.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.channel_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.channel_ids = message.channel_ids;
        }
        return obj;
    },
    create(base) {
        return exports.ListFavoriteChannelResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListFavoriteChannelResponse();
        message.channel_ids = ((_a = object.channel_ids) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseUserActivity() {
    return {
        user_id: "",
        activity_name: "",
        activity_type: 0,
        activity_description: "",
        start_time: undefined,
        end_time: undefined,
        application_id: "",
        status: 0,
    };
}
exports.UserActivity = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user_id !== "") {
            writer.uint32(10).string(message.user_id);
        }
        if (message.activity_name !== "") {
            writer.uint32(18).string(message.activity_name);
        }
        if (message.activity_type !== 0) {
            writer.uint32(24).int32(message.activity_type);
        }
        if (message.activity_description !== "") {
            writer.uint32(34).string(message.activity_description);
        }
        if (message.start_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.start_time), writer.uint32(42).fork()).ldelim();
        }
        if (message.end_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.end_time), writer.uint32(50).fork()).ldelim();
        }
        if (message.application_id !== "") {
            writer.uint32(58).string(message.application_id);
        }
        if (message.status !== 0) {
            writer.uint32(64).int32(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserActivity();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.activity_name = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.activity_type = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.activity_description = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.start_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.end_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.application_id = reader.string();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            activity_name: isSet(object.activity_name) ? globalThis.String(object.activity_name) : "",
            activity_type: isSet(object.activity_type) ? globalThis.Number(object.activity_type) : 0,
            activity_description: isSet(object.activity_description) ? globalThis.String(object.activity_description) : "",
            start_time: isSet(object.start_time) ? fromJsonTimestamp(object.start_time) : undefined,
            end_time: isSet(object.end_time) ? fromJsonTimestamp(object.end_time) : undefined,
            application_id: isSet(object.application_id) ? globalThis.String(object.application_id) : "",
            status: isSet(object.status) ? globalThis.Number(object.status) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.activity_name !== "") {
            obj.activity_name = message.activity_name;
        }
        if (message.activity_type !== 0) {
            obj.activity_type = Math.round(message.activity_type);
        }
        if (message.activity_description !== "") {
            obj.activity_description = message.activity_description;
        }
        if (message.start_time !== undefined) {
            obj.start_time = message.start_time.toISOString();
        }
        if (message.end_time !== undefined) {
            obj.end_time = message.end_time.toISOString();
        }
        if (message.application_id !== "") {
            obj.application_id = message.application_id;
        }
        if (message.status !== 0) {
            obj.status = Math.round(message.status);
        }
        return obj;
    },
    create(base) {
        return exports.UserActivity.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseUserActivity();
        message.user_id = (_a = object.user_id) !== null && _a !== void 0 ? _a : "";
        message.activity_name = (_b = object.activity_name) !== null && _b !== void 0 ? _b : "";
        message.activity_type = (_c = object.activity_type) !== null && _c !== void 0 ? _c : 0;
        message.activity_description = (_d = object.activity_description) !== null && _d !== void 0 ? _d : "";
        message.start_time = (_e = object.start_time) !== null && _e !== void 0 ? _e : undefined;
        message.end_time = (_f = object.end_time) !== null && _f !== void 0 ? _f : undefined;
        message.application_id = (_g = object.application_id) !== null && _g !== void 0 ? _g : "";
        message.status = (_h = object.status) !== null && _h !== void 0 ? _h : 0;
        return message;
    },
};
function createBaseListUserActivity() {
    return { activities: [] };
}
exports.ListUserActivity = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.activities) {
            exports.UserActivity.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListUserActivity();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.activities.push(exports.UserActivity.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            activities: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.activities)
                ? object.activities.map((e) => exports.UserActivity.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.activities) === null || _a === void 0 ? void 0 : _a.length) {
            obj.activities = message.activities.map((e) => exports.UserActivity.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListUserActivity.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListUserActivity();
        message.activities = ((_a = object.activities) === null || _a === void 0 ? void 0 : _a.map((e) => exports.UserActivity.fromPartial(e))) || [];
        return message;
    },
};
function createBaseCreateActivityRequest() {
    return {
        activity_name: "",
        activity_type: 0,
        activity_description: "",
        start_time: undefined,
        application_id: "",
        status: 0,
    };
}
exports.CreateActivityRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.activity_name !== "") {
            writer.uint32(10).string(message.activity_name);
        }
        if (message.activity_type !== 0) {
            writer.uint32(16).int32(message.activity_type);
        }
        if (message.activity_description !== "") {
            writer.uint32(26).string(message.activity_description);
        }
        if (message.start_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.start_time), writer.uint32(34).fork()).ldelim();
        }
        if (message.application_id !== "") {
            writer.uint32(42).string(message.application_id);
        }
        if (message.status !== 0) {
            writer.uint32(48).int32(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateActivityRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.activity_name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.activity_type = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.activity_description = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.start_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.application_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            activity_name: isSet(object.activity_name) ? globalThis.String(object.activity_name) : "",
            activity_type: isSet(object.activity_type) ? globalThis.Number(object.activity_type) : 0,
            activity_description: isSet(object.activity_description) ? globalThis.String(object.activity_description) : "",
            start_time: isSet(object.start_time) ? fromJsonTimestamp(object.start_time) : undefined,
            application_id: isSet(object.application_id) ? globalThis.String(object.application_id) : "",
            status: isSet(object.status) ? globalThis.Number(object.status) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.activity_name !== "") {
            obj.activity_name = message.activity_name;
        }
        if (message.activity_type !== 0) {
            obj.activity_type = Math.round(message.activity_type);
        }
        if (message.activity_description !== "") {
            obj.activity_description = message.activity_description;
        }
        if (message.start_time !== undefined) {
            obj.start_time = message.start_time.toISOString();
        }
        if (message.application_id !== "") {
            obj.application_id = message.application_id;
        }
        if (message.status !== 0) {
            obj.status = Math.round(message.status);
        }
        return obj;
    },
    create(base) {
        return exports.CreateActivityRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseCreateActivityRequest();
        message.activity_name = (_a = object.activity_name) !== null && _a !== void 0 ? _a : "";
        message.activity_type = (_b = object.activity_type) !== null && _b !== void 0 ? _b : 0;
        message.activity_description = (_c = object.activity_description) !== null && _c !== void 0 ? _c : "";
        message.start_time = (_d = object.start_time) !== null && _d !== void 0 ? _d : undefined;
        message.application_id = (_e = object.application_id) !== null && _e !== void 0 ? _e : "";
        message.status = (_f = object.status) !== null && _f !== void 0 ? _f : 0;
        return message;
    },
};
function createBaseLoginIDResponse() {
    return { login_id: "", status: 0, create_time_second: 0, platform: "", user_id: 0, username: "", address: "" };
}
exports.LoginIDResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.login_id !== "") {
            writer.uint32(10).string(message.login_id);
        }
        if (message.status !== 0) {
            writer.uint32(16).int32(message.status);
        }
        if (message.create_time_second !== 0) {
            writer.uint32(24).int64(message.create_time_second);
        }
        if (message.platform !== "") {
            writer.uint32(34).string(message.platform);
        }
        if (message.user_id !== 0) {
            writer.uint32(40).int64(message.user_id);
        }
        if (message.username !== "") {
            writer.uint32(50).string(message.username);
        }
        if (message.address !== "") {
            writer.uint32(58).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLoginIDResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.login_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.create_time_second = longToNumber(reader.int64());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.platform = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.user_id = longToNumber(reader.int64());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            login_id: isSet(object.login_id) ? globalThis.String(object.login_id) : "",
            status: isSet(object.status) ? globalThis.Number(object.status) : 0,
            create_time_second: isSet(object.create_time_second) ? globalThis.Number(object.create_time_second) : 0,
            platform: isSet(object.platform) ? globalThis.String(object.platform) : "",
            user_id: isSet(object.user_id) ? globalThis.Number(object.user_id) : 0,
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.login_id !== "") {
            obj.login_id = message.login_id;
        }
        if (message.status !== 0) {
            obj.status = Math.round(message.status);
        }
        if (message.create_time_second !== 0) {
            obj.create_time_second = Math.round(message.create_time_second);
        }
        if (message.platform !== "") {
            obj.platform = message.platform;
        }
        if (message.user_id !== 0) {
            obj.user_id = Math.round(message.user_id);
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.LoginIDResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseLoginIDResponse();
        message.login_id = (_a = object.login_id) !== null && _a !== void 0 ? _a : "";
        message.status = (_b = object.status) !== null && _b !== void 0 ? _b : 0;
        message.create_time_second = (_c = object.create_time_second) !== null && _c !== void 0 ? _c : 0;
        message.platform = (_d = object.platform) !== null && _d !== void 0 ? _d : "";
        message.user_id = (_e = object.user_id) !== null && _e !== void 0 ? _e : 0;
        message.username = (_f = object.username) !== null && _f !== void 0 ? _f : "";
        message.address = (_g = object.address) !== null && _g !== void 0 ? _g : "";
        return message;
    },
};
function createBaseLoginRequest() {
    return { platform: "", address: "" };
}
exports.LoginRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.platform !== "") {
            writer.uint32(10).string(message.platform);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLoginRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.platform = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            platform: isSet(object.platform) ? globalThis.String(object.platform) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.platform !== "") {
            obj.platform = message.platform;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.LoginRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseLoginRequest();
        message.platform = (_a = object.platform) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseConfirmLoginRequest() {
    return { login_id: "", is_remember: undefined };
}
exports.ConfirmLoginRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.login_id !== "") {
            writer.uint32(10).string(message.login_id);
        }
        if (message.is_remember !== undefined) {
            wrappers_1.BoolValue.encode({ value: message.is_remember }, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfirmLoginRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.login_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.is_remember = wrappers_1.BoolValue.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            login_id: isSet(object.login_id) ? globalThis.String(object.login_id) : "",
            is_remember: isSet(object.is_remember) ? Boolean(object.is_remember) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.login_id !== "") {
            obj.login_id = message.login_id;
        }
        if (message.is_remember !== undefined) {
            obj.is_remember = message.is_remember;
        }
        return obj;
    },
    create(base) {
        return exports.ConfirmLoginRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseConfirmLoginRequest();
        message.login_id = (_a = object.login_id) !== null && _a !== void 0 ? _a : "";
        message.is_remember = (_b = object.is_remember) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
function createBasePubKey() {
    return { encr: new Uint8Array(0), sign: new Uint8Array(0) };
}
exports.PubKey = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.encr.length !== 0) {
            writer.uint32(10).bytes(message.encr);
        }
        if (message.sign.length !== 0) {
            writer.uint32(18).bytes(message.sign);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePubKey();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.encr = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.sign = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            encr: isSet(object.encr) ? bytesFromBase64(object.encr) : new Uint8Array(0),
            sign: isSet(object.sign) ? bytesFromBase64(object.sign) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.encr.length !== 0) {
            obj.encr = base64FromBytes(message.encr);
        }
        if (message.sign.length !== 0) {
            obj.sign = base64FromBytes(message.sign);
        }
        return obj;
    },
    create(base) {
        return exports.PubKey.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBasePubKey();
        message.encr = (_a = object.encr) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.sign = (_b = object.sign) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        return message;
    },
};
function createBasePushPubKeyRequest() {
    return { PK: undefined };
}
exports.PushPubKeyRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.PK !== undefined) {
            exports.PubKey.encode(message.PK, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePushPubKeyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.PK = exports.PubKey.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { PK: isSet(object.PK) ? exports.PubKey.fromJSON(object.PK) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.PK !== undefined) {
            obj.PK = exports.PubKey.toJSON(message.PK);
        }
        return obj;
    },
    create(base) {
        return exports.PushPubKeyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBasePushPubKeyRequest();
        message.PK = (object.PK !== undefined && object.PK !== null) ? exports.PubKey.fromPartial(object.PK) : undefined;
        return message;
    },
};
function createBaseGetPubKeysRequest() {
    return { user_ids: [] };
}
exports.GetPubKeysRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.user_ids) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPubKeysRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user_ids.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_ids) ? object.user_ids.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.user_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.user_ids = message.user_ids;
        }
        return obj;
    },
    create(base) {
        return exports.GetPubKeysRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetPubKeysRequest();
        message.user_ids = ((_a = object.user_ids) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseGetPubKeysResponse() {
    return { pub_keys: [] };
}
exports.GetPubKeysResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.pub_keys) {
            exports.GetPubKeysResponse_UserPubKey.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPubKeysResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.pub_keys.push(exports.GetPubKeysResponse_UserPubKey.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pub_keys: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.pub_keys)
                ? object.pub_keys.map((e) => exports.GetPubKeysResponse_UserPubKey.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.pub_keys) === null || _a === void 0 ? void 0 : _a.length) {
            obj.pub_keys = message.pub_keys.map((e) => exports.GetPubKeysResponse_UserPubKey.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetPubKeysResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetPubKeysResponse();
        message.pub_keys = ((_a = object.pub_keys) === null || _a === void 0 ? void 0 : _a.map((e) => exports.GetPubKeysResponse_UserPubKey.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetPubKeysResponse_UserPubKey() {
    return { user_id: "", PK: undefined };
}
exports.GetPubKeysResponse_UserPubKey = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user_id !== "") {
            writer.uint32(10).string(message.user_id);
        }
        if (message.PK !== undefined) {
            exports.PubKey.encode(message.PK, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPubKeysResponse_UserPubKey();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.PK = exports.PubKey.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            PK: isSet(object.PK) ? exports.PubKey.fromJSON(object.PK) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.PK !== undefined) {
            obj.PK = exports.PubKey.toJSON(message.PK);
        }
        return obj;
    },
    create(base) {
        return exports.GetPubKeysResponse_UserPubKey.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetPubKeysResponse_UserPubKey();
        message.user_id = (_a = object.user_id) !== null && _a !== void 0 ? _a : "";
        message.PK = (object.PK !== undefined && object.PK !== null) ? exports.PubKey.fromPartial(object.PK) : undefined;
        return message;
    },
};
function createBaseChanEncryptionMethod() {
    return { method: "", channel_id: "" };
}
exports.ChanEncryptionMethod = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.method !== "") {
            writer.uint32(10).string(message.method);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChanEncryptionMethod();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.method = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            method: isSet(object.method) ? globalThis.String(object.method) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.method !== "") {
            obj.method = message.method;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.ChanEncryptionMethod.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseChanEncryptionMethod();
        message.method = (_a = object.method) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetKeyServerResp() {
    return { url: "" };
}
exports.GetKeyServerResp = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetKeyServerResp();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { url: isSet(object.url) ? globalThis.String(object.url) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.url !== "") {
            obj.url = message.url;
        }
        return obj;
    },
    create(base) {
        return exports.GetKeyServerResp.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetKeyServerResp();
        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseAuditLog() {
    return {
        id: "",
        user_id: "",
        clan_id: "",
        action_log: "",
        entity_name: "",
        entity_id: "",
        details: "",
        time_log: undefined,
        channel_id: "",
        channel_label: "",
    };
}
exports.AuditLog = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.user_id !== "") {
            writer.uint32(18).string(message.user_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(26).string(message.clan_id);
        }
        if (message.action_log !== "") {
            writer.uint32(34).string(message.action_log);
        }
        if (message.entity_name !== "") {
            writer.uint32(42).string(message.entity_name);
        }
        if (message.entity_id !== "") {
            writer.uint32(50).string(message.entity_id);
        }
        if (message.details !== "") {
            writer.uint32(58).string(message.details);
        }
        if (message.time_log !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.time_log), writer.uint32(66).fork()).ldelim();
        }
        if (message.channel_id !== "") {
            writer.uint32(74).string(message.channel_id);
        }
        if (message.channel_label !== "") {
            writer.uint32(82).string(message.channel_label);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAuditLog();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.action_log = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.entity_name = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.entity_id = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.details = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.time_log = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.channel_label = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            action_log: isSet(object.action_log) ? globalThis.String(object.action_log) : "",
            entity_name: isSet(object.entity_name) ? globalThis.String(object.entity_name) : "",
            entity_id: isSet(object.entity_id) ? globalThis.String(object.entity_id) : "",
            details: isSet(object.details) ? globalThis.String(object.details) : "",
            time_log: isSet(object.time_log) ? fromJsonTimestamp(object.time_log) : undefined,
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            channel_label: isSet(object.channel_label) ? globalThis.String(object.channel_label) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.action_log !== "") {
            obj.action_log = message.action_log;
        }
        if (message.entity_name !== "") {
            obj.entity_name = message.entity_name;
        }
        if (message.entity_id !== "") {
            obj.entity_id = message.entity_id;
        }
        if (message.details !== "") {
            obj.details = message.details;
        }
        if (message.time_log !== undefined) {
            obj.time_log = message.time_log.toISOString();
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.channel_label !== "") {
            obj.channel_label = message.channel_label;
        }
        return obj;
    },
    create(base) {
        return exports.AuditLog.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const message = createBaseAuditLog();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.user_id = (_b = object.user_id) !== null && _b !== void 0 ? _b : "";
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : "";
        message.action_log = (_d = object.action_log) !== null && _d !== void 0 ? _d : "";
        message.entity_name = (_e = object.entity_name) !== null && _e !== void 0 ? _e : "";
        message.entity_id = (_f = object.entity_id) !== null && _f !== void 0 ? _f : "";
        message.details = (_g = object.details) !== null && _g !== void 0 ? _g : "";
        message.time_log = (_h = object.time_log) !== null && _h !== void 0 ? _h : undefined;
        message.channel_id = (_j = object.channel_id) !== null && _j !== void 0 ? _j : "";
        message.channel_label = (_k = object.channel_label) !== null && _k !== void 0 ? _k : "";
        return message;
    },
};
function createBaseListAuditLog() {
    return { total_count: 0, date_log: "", logs: [] };
}
exports.ListAuditLog = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.total_count !== 0) {
            writer.uint32(8).int32(message.total_count);
        }
        if (message.date_log !== "") {
            writer.uint32(18).string(message.date_log);
        }
        for (const v of message.logs) {
            exports.AuditLog.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListAuditLog();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.total_count = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.date_log = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.logs.push(exports.AuditLog.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            total_count: isSet(object.total_count) ? globalThis.Number(object.total_count) : 0,
            date_log: isSet(object.date_log) ? globalThis.String(object.date_log) : "",
            logs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.logs) ? object.logs.map((e) => exports.AuditLog.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.total_count !== 0) {
            obj.total_count = Math.round(message.total_count);
        }
        if (message.date_log !== "") {
            obj.date_log = message.date_log;
        }
        if ((_a = message.logs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.logs = message.logs.map((e) => exports.AuditLog.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListAuditLog.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseListAuditLog();
        message.total_count = (_a = object.total_count) !== null && _a !== void 0 ? _a : 0;
        message.date_log = (_b = object.date_log) !== null && _b !== void 0 ? _b : "";
        message.logs = ((_c = object.logs) === null || _c === void 0 ? void 0 : _c.map((e) => exports.AuditLog.fromPartial(e))) || [];
        return message;
    },
};
function createBaseListAuditLogRequest() {
    return { action_log: "", user_id: "", clan_id: "", date_log: "" };
}
exports.ListAuditLogRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.action_log !== "") {
            writer.uint32(10).string(message.action_log);
        }
        if (message.user_id !== "") {
            writer.uint32(18).string(message.user_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(26).string(message.clan_id);
        }
        if (message.date_log !== "") {
            writer.uint32(34).string(message.date_log);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListAuditLogRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.action_log = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.date_log = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            action_log: isSet(object.action_log) ? globalThis.String(object.action_log) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            date_log: isSet(object.date_log) ? globalThis.String(object.date_log) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.action_log !== "") {
            obj.action_log = message.action_log;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.date_log !== "") {
            obj.date_log = message.date_log;
        }
        return obj;
    },
    create(base) {
        return exports.ListAuditLogRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseListAuditLogRequest();
        message.action_log = (_a = object.action_log) !== null && _a !== void 0 ? _a : "";
        message.user_id = (_b = object.user_id) !== null && _b !== void 0 ? _b : "";
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : "";
        message.date_log = (_d = object.date_log) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseTokenSentEvent() {
    return {
        sender_id: "",
        sender_name: "",
        receiver_id: "",
        amount: 0,
        note: "",
        extra_attribute: "",
        transaction_id: "",
    };
}
exports.TokenSentEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender_id !== "") {
            writer.uint32(10).string(message.sender_id);
        }
        if (message.sender_name !== "") {
            writer.uint32(18).string(message.sender_name);
        }
        if (message.receiver_id !== "") {
            writer.uint32(26).string(message.receiver_id);
        }
        if (message.amount !== 0) {
            writer.uint32(32).int32(message.amount);
        }
        if (message.note !== "") {
            writer.uint32(42).string(message.note);
        }
        if (message.extra_attribute !== "") {
            writer.uint32(50).string(message.extra_attribute);
        }
        if (message.transaction_id !== "") {
            writer.uint32(58).string(message.transaction_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTokenSentEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.sender_name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.receiver_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.amount = reader.int32();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.note = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.extra_attribute = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.transaction_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender_id: isSet(object.sender_id) ? globalThis.String(object.sender_id) : "",
            sender_name: isSet(object.sender_name) ? globalThis.String(object.sender_name) : "",
            receiver_id: isSet(object.receiver_id) ? globalThis.String(object.receiver_id) : "",
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
            note: isSet(object.note) ? globalThis.String(object.note) : "",
            extra_attribute: isSet(object.extra_attribute) ? globalThis.String(object.extra_attribute) : "",
            transaction_id: isSet(object.transaction_id) ? globalThis.String(object.transaction_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender_id !== "") {
            obj.sender_id = message.sender_id;
        }
        if (message.sender_name !== "") {
            obj.sender_name = message.sender_name;
        }
        if (message.receiver_id !== "") {
            obj.receiver_id = message.receiver_id;
        }
        if (message.amount !== 0) {
            obj.amount = Math.round(message.amount);
        }
        if (message.note !== "") {
            obj.note = message.note;
        }
        if (message.extra_attribute !== "") {
            obj.extra_attribute = message.extra_attribute;
        }
        if (message.transaction_id !== "") {
            obj.transaction_id = message.transaction_id;
        }
        return obj;
    },
    create(base) {
        return exports.TokenSentEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseTokenSentEvent();
        message.sender_id = (_a = object.sender_id) !== null && _a !== void 0 ? _a : "";
        message.sender_name = (_b = object.sender_name) !== null && _b !== void 0 ? _b : "";
        message.receiver_id = (_c = object.receiver_id) !== null && _c !== void 0 ? _c : "";
        message.amount = (_d = object.amount) !== null && _d !== void 0 ? _d : 0;
        message.note = (_e = object.note) !== null && _e !== void 0 ? _e : "";
        message.extra_attribute = (_f = object.extra_attribute) !== null && _f !== void 0 ? _f : "";
        message.transaction_id = (_g = object.transaction_id) !== null && _g !== void 0 ? _g : "";
        return message;
    },
};
function createBaseWithdrawTokenRequest() {
    return { amount: 0 };
}
exports.WithdrawTokenRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.amount !== 0) {
            writer.uint32(8).int32(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWithdrawTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.amount = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.amount !== 0) {
            obj.amount = Math.round(message.amount);
        }
        return obj;
    },
    create(base) {
        return exports.WithdrawTokenRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseWithdrawTokenRequest();
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseListOnboardingRequest() {
    return { clan_id: "", guide_type: undefined, limit: undefined, page: undefined };
}
exports.ListOnboardingRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.guide_type !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.guide_type }, writer.uint32(18).fork()).ldelim();
        }
        if (message.limit !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.limit }, writer.uint32(26).fork()).ldelim();
        }
        if (message.page !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.page }, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListOnboardingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.guide_type = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.limit = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.page = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            guide_type: isSet(object.guide_type) ? Number(object.guide_type) : undefined,
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
            page: isSet(object.page) ? Number(object.page) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.guide_type !== undefined) {
            obj.guide_type = message.guide_type;
        }
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        if (message.page !== undefined) {
            obj.page = message.page;
        }
        return obj;
    },
    create(base) {
        return exports.ListOnboardingRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseListOnboardingRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.guide_type = (_b = object.guide_type) !== null && _b !== void 0 ? _b : undefined;
        message.limit = (_c = object.limit) !== null && _c !== void 0 ? _c : undefined;
        message.page = (_d = object.page) !== null && _d !== void 0 ? _d : undefined;
        return message;
    },
};
function createBaseListOnboardingResponse() {
    return { list_onboarding: [] };
}
exports.ListOnboardingResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.list_onboarding) {
            exports.OnboardingItem.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListOnboardingResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.list_onboarding.push(exports.OnboardingItem.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            list_onboarding: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.list_onboarding)
                ? object.list_onboarding.map((e) => exports.OnboardingItem.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.list_onboarding) === null || _a === void 0 ? void 0 : _a.length) {
            obj.list_onboarding = message.list_onboarding.map((e) => exports.OnboardingItem.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListOnboardingResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListOnboardingResponse();
        message.list_onboarding = ((_a = object.list_onboarding) === null || _a === void 0 ? void 0 : _a.map((e) => exports.OnboardingItem.fromPartial(e))) || [];
        return message;
    },
};
function createBaseOnboardingItem() {
    return {
        id: "",
        clan_id: "",
        guide_type: 0,
        task_type: 0,
        channel_id: "",
        title: "",
        content: "",
        image_url: "",
        answers: [],
        create_time: undefined,
        update_time: undefined,
    };
}
exports.OnboardingItem = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        if (message.guide_type !== 0) {
            writer.uint32(24).int32(message.guide_type);
        }
        if (message.task_type !== 0) {
            writer.uint32(32).int32(message.task_type);
        }
        if (message.channel_id !== "") {
            writer.uint32(42).string(message.channel_id);
        }
        if (message.title !== "") {
            writer.uint32(50).string(message.title);
        }
        if (message.content !== "") {
            writer.uint32(58).string(message.content);
        }
        if (message.image_url !== "") {
            writer.uint32(66).string(message.image_url);
        }
        for (const v of message.answers) {
            exports.OnboardingAnswer.encode(v, writer.uint32(74).fork()).ldelim();
        }
        if (message.create_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.create_time), writer.uint32(82).fork()).ldelim();
        }
        if (message.update_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.update_time), writer.uint32(90).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOnboardingItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.guide_type = reader.int32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.task_type = reader.int32();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.image_url = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.answers.push(exports.OnboardingAnswer.decode(reader, reader.uint32()));
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.create_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.update_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            guide_type: isSet(object.guide_type) ? globalThis.Number(object.guide_type) : 0,
            task_type: isSet(object.task_type) ? globalThis.Number(object.task_type) : 0,
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            content: isSet(object.content) ? globalThis.String(object.content) : "",
            image_url: isSet(object.image_url) ? globalThis.String(object.image_url) : "",
            answers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.answers)
                ? object.answers.map((e) => exports.OnboardingAnswer.fromJSON(e))
                : [],
            create_time: isSet(object.create_time) ? fromJsonTimestamp(object.create_time) : undefined,
            update_time: isSet(object.update_time) ? fromJsonTimestamp(object.update_time) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.guide_type !== 0) {
            obj.guide_type = Math.round(message.guide_type);
        }
        if (message.task_type !== 0) {
            obj.task_type = Math.round(message.task_type);
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.content !== "") {
            obj.content = message.content;
        }
        if (message.image_url !== "") {
            obj.image_url = message.image_url;
        }
        if ((_a = message.answers) === null || _a === void 0 ? void 0 : _a.length) {
            obj.answers = message.answers.map((e) => exports.OnboardingAnswer.toJSON(e));
        }
        if (message.create_time !== undefined) {
            obj.create_time = message.create_time.toISOString();
        }
        if (message.update_time !== undefined) {
            obj.update_time = message.update_time.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.OnboardingItem.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseOnboardingItem();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        message.guide_type = (_c = object.guide_type) !== null && _c !== void 0 ? _c : 0;
        message.task_type = (_d = object.task_type) !== null && _d !== void 0 ? _d : 0;
        message.channel_id = (_e = object.channel_id) !== null && _e !== void 0 ? _e : "";
        message.title = (_f = object.title) !== null && _f !== void 0 ? _f : "";
        message.content = (_g = object.content) !== null && _g !== void 0 ? _g : "";
        message.image_url = (_h = object.image_url) !== null && _h !== void 0 ? _h : "";
        message.answers = ((_j = object.answers) === null || _j === void 0 ? void 0 : _j.map((e) => exports.OnboardingAnswer.fromPartial(e))) || [];
        message.create_time = (_k = object.create_time) !== null && _k !== void 0 ? _k : undefined;
        message.update_time = (_l = object.update_time) !== null && _l !== void 0 ? _l : undefined;
        return message;
    },
};
function createBaseOnboardingAnswer() {
    return { title: "", description: "", emoji: "", image_url: "" };
}
exports.OnboardingAnswer = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.emoji !== "") {
            writer.uint32(26).string(message.emoji);
        }
        if (message.image_url !== "") {
            writer.uint32(34).string(message.image_url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOnboardingAnswer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.emoji = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.image_url = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            emoji: isSet(object.emoji) ? globalThis.String(object.emoji) : "",
            image_url: isSet(object.image_url) ? globalThis.String(object.image_url) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.emoji !== "") {
            obj.emoji = message.emoji;
        }
        if (message.image_url !== "") {
            obj.image_url = message.image_url;
        }
        return obj;
    },
    create(base) {
        return exports.OnboardingAnswer.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseOnboardingAnswer();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.emoji = (_c = object.emoji) !== null && _c !== void 0 ? _c : "";
        message.image_url = (_d = object.image_url) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseOnboardingContent() {
    return { guide_type: 0, task_type: 0, channel_id: "", title: "", content: "", image_url: "", answers: [] };
}
exports.OnboardingContent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.guide_type !== 0) {
            writer.uint32(8).int32(message.guide_type);
        }
        if (message.task_type !== 0) {
            writer.uint32(16).int32(message.task_type);
        }
        if (message.channel_id !== "") {
            writer.uint32(26).string(message.channel_id);
        }
        if (message.title !== "") {
            writer.uint32(34).string(message.title);
        }
        if (message.content !== "") {
            writer.uint32(42).string(message.content);
        }
        if (message.image_url !== "") {
            writer.uint32(50).string(message.image_url);
        }
        for (const v of message.answers) {
            exports.OnboardingAnswer.encode(v, writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOnboardingContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.guide_type = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.task_type = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.image_url = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.answers.push(exports.OnboardingAnswer.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            guide_type: isSet(object.guide_type) ? globalThis.Number(object.guide_type) : 0,
            task_type: isSet(object.task_type) ? globalThis.Number(object.task_type) : 0,
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            content: isSet(object.content) ? globalThis.String(object.content) : "",
            image_url: isSet(object.image_url) ? globalThis.String(object.image_url) : "",
            answers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.answers)
                ? object.answers.map((e) => exports.OnboardingAnswer.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.guide_type !== 0) {
            obj.guide_type = Math.round(message.guide_type);
        }
        if (message.task_type !== 0) {
            obj.task_type = Math.round(message.task_type);
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.content !== "") {
            obj.content = message.content;
        }
        if (message.image_url !== "") {
            obj.image_url = message.image_url;
        }
        if ((_a = message.answers) === null || _a === void 0 ? void 0 : _a.length) {
            obj.answers = message.answers.map((e) => exports.OnboardingAnswer.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.OnboardingContent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseOnboardingContent();
        message.guide_type = (_a = object.guide_type) !== null && _a !== void 0 ? _a : 0;
        message.task_type = (_b = object.task_type) !== null && _b !== void 0 ? _b : 0;
        message.channel_id = (_c = object.channel_id) !== null && _c !== void 0 ? _c : "";
        message.title = (_d = object.title) !== null && _d !== void 0 ? _d : "";
        message.content = (_e = object.content) !== null && _e !== void 0 ? _e : "";
        message.image_url = (_f = object.image_url) !== null && _f !== void 0 ? _f : "";
        message.answers = ((_g = object.answers) === null || _g === void 0 ? void 0 : _g.map((e) => exports.OnboardingAnswer.fromPartial(e))) || [];
        return message;
    },
};
function createBaseCreateOnboardingRequest() {
    return { clan_id: "", contents: [] };
}
exports.CreateOnboardingRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        for (const v of message.contents) {
            exports.OnboardingContent.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateOnboardingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.contents.push(exports.OnboardingContent.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            contents: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.contents)
                ? object.contents.map((e) => exports.OnboardingContent.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if ((_a = message.contents) === null || _a === void 0 ? void 0 : _a.length) {
            obj.contents = message.contents.map((e) => exports.OnboardingContent.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.CreateOnboardingRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCreateOnboardingRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.contents = ((_b = object.contents) === null || _b === void 0 ? void 0 : _b.map((e) => exports.OnboardingContent.fromPartial(e))) || [];
        return message;
    },
};
function createBaseUpdateOnboardingRequest() {
    return {
        id: "",
        clan_id: "",
        task_type: undefined,
        channel_id: "",
        title: "",
        content: "",
        image_url: "",
        answers: [],
    };
}
exports.UpdateOnboardingRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        if (message.task_type !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.task_type }, writer.uint32(26).fork()).ldelim();
        }
        if (message.channel_id !== "") {
            writer.uint32(34).string(message.channel_id);
        }
        if (message.title !== "") {
            writer.uint32(42).string(message.title);
        }
        if (message.content !== "") {
            writer.uint32(50).string(message.content);
        }
        if (message.image_url !== "") {
            writer.uint32(58).string(message.image_url);
        }
        for (const v of message.answers) {
            exports.OnboardingAnswer.encode(v, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateOnboardingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.task_type = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.image_url = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.answers.push(exports.OnboardingAnswer.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            task_type: isSet(object.task_type) ? Number(object.task_type) : undefined,
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            content: isSet(object.content) ? globalThis.String(object.content) : "",
            image_url: isSet(object.image_url) ? globalThis.String(object.image_url) : "",
            answers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.answers)
                ? object.answers.map((e) => exports.OnboardingAnswer.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.task_type !== undefined) {
            obj.task_type = message.task_type;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.content !== "") {
            obj.content = message.content;
        }
        if (message.image_url !== "") {
            obj.image_url = message.image_url;
        }
        if ((_a = message.answers) === null || _a === void 0 ? void 0 : _a.length) {
            obj.answers = message.answers.map((e) => exports.OnboardingAnswer.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.UpdateOnboardingRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseUpdateOnboardingRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        message.task_type = (_c = object.task_type) !== null && _c !== void 0 ? _c : undefined;
        message.channel_id = (_d = object.channel_id) !== null && _d !== void 0 ? _d : "";
        message.title = (_e = object.title) !== null && _e !== void 0 ? _e : "";
        message.content = (_f = object.content) !== null && _f !== void 0 ? _f : "";
        message.image_url = (_g = object.image_url) !== null && _g !== void 0 ? _g : "";
        message.answers = ((_h = object.answers) === null || _h === void 0 ? void 0 : _h.map((e) => exports.OnboardingAnswer.fromPartial(e))) || [];
        return message;
    },
};
function createBaseOnboardingRequest() {
    return { id: "", clan_id: "" };
}
exports.OnboardingRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOnboardingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.OnboardingRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseOnboardingRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseClanWebhook() {
    return {
        id: "",
        webhook_name: "",
        clan_id: "",
        active: 0,
        url: "",
        creator_id: "",
        avatar: "",
        create_time: "",
        update_time: "",
    };
}
exports.ClanWebhook = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.webhook_name !== "") {
            writer.uint32(18).string(message.webhook_name);
        }
        if (message.clan_id !== "") {
            writer.uint32(26).string(message.clan_id);
        }
        if (message.active !== 0) {
            writer.uint32(32).int32(message.active);
        }
        if (message.url !== "") {
            writer.uint32(42).string(message.url);
        }
        if (message.creator_id !== "") {
            writer.uint32(50).string(message.creator_id);
        }
        if (message.avatar !== "") {
            writer.uint32(58).string(message.avatar);
        }
        if (message.create_time !== "") {
            writer.uint32(66).string(message.create_time);
        }
        if (message.update_time !== "") {
            writer.uint32(74).string(message.update_time);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanWebhook();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.webhook_name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.active = reader.int32();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.avatar = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.create_time = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.update_time = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            webhook_name: isSet(object.webhook_name) ? globalThis.String(object.webhook_name) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            active: isSet(object.active) ? globalThis.Number(object.active) : 0,
            url: isSet(object.url) ? globalThis.String(object.url) : "",
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
            create_time: isSet(object.create_time) ? globalThis.String(object.create_time) : "",
            update_time: isSet(object.update_time) ? globalThis.String(object.update_time) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.webhook_name !== "") {
            obj.webhook_name = message.webhook_name;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.active !== 0) {
            obj.active = Math.round(message.active);
        }
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.avatar !== "") {
            obj.avatar = message.avatar;
        }
        if (message.create_time !== "") {
            obj.create_time = message.create_time;
        }
        if (message.update_time !== "") {
            obj.update_time = message.update_time;
        }
        return obj;
    },
    create(base) {
        return exports.ClanWebhook.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseClanWebhook();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.webhook_name = (_b = object.webhook_name) !== null && _b !== void 0 ? _b : "";
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : "";
        message.active = (_d = object.active) !== null && _d !== void 0 ? _d : 0;
        message.url = (_e = object.url) !== null && _e !== void 0 ? _e : "";
        message.creator_id = (_f = object.creator_id) !== null && _f !== void 0 ? _f : "";
        message.avatar = (_g = object.avatar) !== null && _g !== void 0 ? _g : "";
        message.create_time = (_h = object.create_time) !== null && _h !== void 0 ? _h : "";
        message.update_time = (_j = object.update_time) !== null && _j !== void 0 ? _j : "";
        return message;
    },
};
function createBaseGenerateClanWebhookRequest() {
    return { clan_id: "", webhook_name: "", avatar: "" };
}
exports.GenerateClanWebhookRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.webhook_name !== "") {
            writer.uint32(18).string(message.webhook_name);
        }
        if (message.avatar !== "") {
            writer.uint32(26).string(message.avatar);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenerateClanWebhookRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.webhook_name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.avatar = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            webhook_name: isSet(object.webhook_name) ? globalThis.String(object.webhook_name) : "",
            avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.webhook_name !== "") {
            obj.webhook_name = message.webhook_name;
        }
        if (message.avatar !== "") {
            obj.avatar = message.avatar;
        }
        return obj;
    },
    create(base) {
        return exports.GenerateClanWebhookRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseGenerateClanWebhookRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.webhook_name = (_b = object.webhook_name) !== null && _b !== void 0 ? _b : "";
        message.avatar = (_c = object.avatar) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseGenerateClanWebhookResponse() {
    return { clan_id: "", url: "", webhook_name: "", avatar: "" };
}
exports.GenerateClanWebhookResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.url !== "") {
            writer.uint32(18).string(message.url);
        }
        if (message.webhook_name !== "") {
            writer.uint32(26).string(message.webhook_name);
        }
        if (message.avatar !== "") {
            writer.uint32(34).string(message.avatar);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenerateClanWebhookResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.webhook_name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.avatar = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            url: isSet(object.url) ? globalThis.String(object.url) : "",
            webhook_name: isSet(object.webhook_name) ? globalThis.String(object.webhook_name) : "",
            avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.webhook_name !== "") {
            obj.webhook_name = message.webhook_name;
        }
        if (message.avatar !== "") {
            obj.avatar = message.avatar;
        }
        return obj;
    },
    create(base) {
        return exports.GenerateClanWebhookResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseGenerateClanWebhookResponse();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.url = (_b = object.url) !== null && _b !== void 0 ? _b : "";
        message.webhook_name = (_c = object.webhook_name) !== null && _c !== void 0 ? _c : "";
        message.avatar = (_d = object.avatar) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseClanWebhookRequest() {
    return { id: "", clan_id: "" };
}
exports.ClanWebhookRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanWebhookRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.ClanWebhookRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseClanWebhookRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseUpdateClanWebhookRequest() {
    return { id: "", clan_id: "", webhook_name: "", avatar: "", reset_token: false };
}
exports.UpdateClanWebhookRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        if (message.webhook_name !== "") {
            writer.uint32(26).string(message.webhook_name);
        }
        if (message.avatar !== "") {
            writer.uint32(34).string(message.avatar);
        }
        if (message.reset_token !== false) {
            writer.uint32(40).bool(message.reset_token);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateClanWebhookRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.webhook_name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.avatar = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.reset_token = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            webhook_name: isSet(object.webhook_name) ? globalThis.String(object.webhook_name) : "",
            avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
            reset_token: isSet(object.reset_token) ? globalThis.Boolean(object.reset_token) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.webhook_name !== "") {
            obj.webhook_name = message.webhook_name;
        }
        if (message.avatar !== "") {
            obj.avatar = message.avatar;
        }
        if (message.reset_token !== false) {
            obj.reset_token = message.reset_token;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateClanWebhookRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseUpdateClanWebhookRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        message.webhook_name = (_c = object.webhook_name) !== null && _c !== void 0 ? _c : "";
        message.avatar = (_d = object.avatar) !== null && _d !== void 0 ? _d : "";
        message.reset_token = (_e = object.reset_token) !== null && _e !== void 0 ? _e : false;
        return message;
    },
};
function createBaseListClanWebhookRequest() {
    return { clan_id: "" };
}
exports.ListClanWebhookRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListClanWebhookRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.ListClanWebhookRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListClanWebhookRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseListClanWebhookResponse() {
    return { list_clan_webhooks: [] };
}
exports.ListClanWebhookResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.list_clan_webhooks) {
            exports.ClanWebhook.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListClanWebhookResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.list_clan_webhooks.push(exports.ClanWebhook.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            list_clan_webhooks: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.list_clan_webhooks)
                ? object.list_clan_webhooks.map((e) => exports.ClanWebhook.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.list_clan_webhooks) === null || _a === void 0 ? void 0 : _a.length) {
            obj.list_clan_webhooks = message.list_clan_webhooks.map((e) => exports.ClanWebhook.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListClanWebhookResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListClanWebhookResponse();
        message.list_clan_webhooks = ((_a = object.list_clan_webhooks) === null || _a === void 0 ? void 0 : _a.map((e) => exports.ClanWebhook.fromPartial(e))) || [];
        return message;
    },
};
function createBaseClanWebhookHandlerBody() {
    return { content: "", attachments: [] };
}
exports.ClanWebhookHandlerBody = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.content !== "") {
            writer.uint32(10).string(message.content);
        }
        for (const v of message.attachments) {
            exports.MessageAttachment.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanWebhookHandlerBody();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.attachments.push(exports.MessageAttachment.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            content: isSet(object.content) ? globalThis.String(object.content) : "",
            attachments: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.attachments)
                ? object.attachments.map((e) => exports.MessageAttachment.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.content !== "") {
            obj.content = message.content;
        }
        if ((_a = message.attachments) === null || _a === void 0 ? void 0 : _a.length) {
            obj.attachments = message.attachments.map((e) => exports.MessageAttachment.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ClanWebhookHandlerBody.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseClanWebhookHandlerBody();
        message.content = (_a = object.content) !== null && _a !== void 0 ? _a : "";
        message.attachments = ((_b = object.attachments) === null || _b === void 0 ? void 0 : _b.map((e) => exports.MessageAttachment.fromPartial(e))) || [];
        return message;
    },
};
function createBaseClanWebhookHandlerRequest() {
    return { body: undefined, token: "", username: "" };
}
exports.ClanWebhookHandlerRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.body !== undefined) {
            exports.ClanWebhookHandlerBody.encode(message.body, writer.uint32(10).fork()).ldelim();
        }
        if (message.token !== "") {
            writer.uint32(18).string(message.token);
        }
        if (message.username !== "") {
            writer.uint32(26).string(message.username);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanWebhookHandlerRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.body = exports.ClanWebhookHandlerBody.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            body: isSet(object.body) ? exports.ClanWebhookHandlerBody.fromJSON(object.body) : undefined,
            token: isSet(object.token) ? globalThis.String(object.token) : "",
            username: isSet(object.username) ? globalThis.String(object.username) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.body !== undefined) {
            obj.body = exports.ClanWebhookHandlerBody.toJSON(message.body);
        }
        if (message.token !== "") {
            obj.token = message.token;
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        return obj;
    },
    create(base) {
        return exports.ClanWebhookHandlerRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseClanWebhookHandlerRequest();
        message.body = (object.body !== undefined && object.body !== null)
            ? exports.ClanWebhookHandlerBody.fromPartial(object.body)
            : undefined;
        message.token = (_a = object.token) !== null && _a !== void 0 ? _a : "";
        message.username = (_b = object.username) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseUserStatus() {
    return { user_id: "", status: "" };
}
exports.UserStatus = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user_id !== "") {
            writer.uint32(10).string(message.user_id);
        }
        if (message.status !== "") {
            writer.uint32(18).string(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserStatus();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.status = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            status: isSet(object.status) ? globalThis.String(object.status) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.status !== "") {
            obj.status = message.status;
        }
        return obj;
    },
    create(base) {
        return exports.UserStatus.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUserStatus();
        message.user_id = (_a = object.user_id) !== null && _a !== void 0 ? _a : "";
        message.status = (_b = object.status) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseUserStatusUpdate() {
    return { status: "", minutes: 0, until_turn_on: false };
}
exports.UserStatusUpdate = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.status !== "") {
            writer.uint32(10).string(message.status);
        }
        if (message.minutes !== 0) {
            writer.uint32(16).int32(message.minutes);
        }
        if (message.until_turn_on !== false) {
            writer.uint32(24).bool(message.until_turn_on);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserStatusUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.status = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.minutes = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.until_turn_on = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: isSet(object.status) ? globalThis.String(object.status) : "",
            minutes: isSet(object.minutes) ? globalThis.Number(object.minutes) : 0,
            until_turn_on: isSet(object.until_turn_on) ? globalThis.Boolean(object.until_turn_on) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.status !== "") {
            obj.status = message.status;
        }
        if (message.minutes !== 0) {
            obj.minutes = Math.round(message.minutes);
        }
        if (message.until_turn_on !== false) {
            obj.until_turn_on = message.until_turn_on;
        }
        return obj;
    },
    create(base) {
        return exports.UserStatusUpdate.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseUserStatusUpdate();
        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : "";
        message.minutes = (_b = object.minutes) !== null && _b !== void 0 ? _b : 0;
        message.until_turn_on = (_c = object.until_turn_on) !== null && _c !== void 0 ? _c : false;
        return message;
    },
};
function createBaseOnboardingSteps() {
    return { id: "", user_id: "", clan_id: "", onboarding_step: 0 };
}
exports.OnboardingSteps = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.user_id !== "") {
            writer.uint32(18).string(message.user_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(26).string(message.clan_id);
        }
        if (message.onboarding_step !== 0) {
            writer.uint32(32).int32(message.onboarding_step);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOnboardingSteps();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.onboarding_step = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            onboarding_step: isSet(object.onboarding_step) ? globalThis.Number(object.onboarding_step) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.onboarding_step !== 0) {
            obj.onboarding_step = Math.round(message.onboarding_step);
        }
        return obj;
    },
    create(base) {
        return exports.OnboardingSteps.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseOnboardingSteps();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.user_id = (_b = object.user_id) !== null && _b !== void 0 ? _b : "";
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : "";
        message.onboarding_step = (_d = object.onboarding_step) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBaseListOnboardingStepResponse() {
    return { list_onboarding_step: [] };
}
exports.ListOnboardingStepResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.list_onboarding_step) {
            exports.OnboardingSteps.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListOnboardingStepResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.list_onboarding_step.push(exports.OnboardingSteps.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            list_onboarding_step: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.list_onboarding_step)
                ? object.list_onboarding_step.map((e) => exports.OnboardingSteps.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.list_onboarding_step) === null || _a === void 0 ? void 0 : _a.length) {
            obj.list_onboarding_step = message.list_onboarding_step.map((e) => exports.OnboardingSteps.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListOnboardingStepResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListOnboardingStepResponse();
        message.list_onboarding_step = ((_a = object.list_onboarding_step) === null || _a === void 0 ? void 0 : _a.map((e) => exports.OnboardingSteps.fromPartial(e))) || [];
        return message;
    },
};
function createBaseListOnboardingStepRequest() {
    return { clan_id: "", limit: undefined, page: undefined };
}
exports.ListOnboardingStepRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.limit !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.limit }, writer.uint32(18).fork()).ldelim();
        }
        if (message.page !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.page }, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListOnboardingStepRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.limit = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.page = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
            page: isSet(object.page) ? Number(object.page) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        if (message.page !== undefined) {
            obj.page = message.page;
        }
        return obj;
    },
    create(base) {
        return exports.ListOnboardingStepRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseListOnboardingStepRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.limit = (_b = object.limit) !== null && _b !== void 0 ? _b : undefined;
        message.page = (_c = object.page) !== null && _c !== void 0 ? _c : undefined;
        return message;
    },
};
function createBaseUpdateOnboardingStepRequest() {
    return { clan_id: "", onboarding_step: undefined };
}
exports.UpdateOnboardingStepRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.onboarding_step !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.onboarding_step }, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateOnboardingStepRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.onboarding_step = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            onboarding_step: isSet(object.onboarding_step) ? Number(object.onboarding_step) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.onboarding_step !== undefined) {
            obj.onboarding_step = message.onboarding_step;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateOnboardingStepRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUpdateOnboardingStepRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.onboarding_step = (_b = object.onboarding_step) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
function createBaseWalletLedger() {
    return { id: "", user_id: "", create_time: undefined, value: 0, transaction_id: "" };
}
exports.WalletLedger = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.user_id !== "") {
            writer.uint32(18).string(message.user_id);
        }
        if (message.create_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.create_time), writer.uint32(26).fork()).ldelim();
        }
        if (message.value !== 0) {
            writer.uint32(32).int32(message.value);
        }
        if (message.transaction_id !== "") {
            writer.uint32(42).string(message.transaction_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWalletLedger();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.create_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.value = reader.int32();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.transaction_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            create_time: isSet(object.create_time) ? fromJsonTimestamp(object.create_time) : undefined,
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
            transaction_id: isSet(object.transaction_id) ? globalThis.String(object.transaction_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.create_time !== undefined) {
            obj.create_time = message.create_time.toISOString();
        }
        if (message.value !== 0) {
            obj.value = Math.round(message.value);
        }
        if (message.transaction_id !== "") {
            obj.transaction_id = message.transaction_id;
        }
        return obj;
    },
    create(base) {
        return exports.WalletLedger.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseWalletLedger();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.user_id = (_b = object.user_id) !== null && _b !== void 0 ? _b : "";
        message.create_time = (_c = object.create_time) !== null && _c !== void 0 ? _c : undefined;
        message.value = (_d = object.value) !== null && _d !== void 0 ? _d : 0;
        message.transaction_id = (_e = object.transaction_id) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseWalletLedgerList() {
    return { wallet_ledger: [], count: 0 };
}
exports.WalletLedgerList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.wallet_ledger) {
            exports.WalletLedger.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.count !== 0) {
            writer.uint32(16).int32(message.count);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWalletLedgerList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.wallet_ledger.push(exports.WalletLedger.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.count = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            wallet_ledger: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.wallet_ledger)
                ? object.wallet_ledger.map((e) => exports.WalletLedger.fromJSON(e))
                : [],
            count: isSet(object.count) ? globalThis.Number(object.count) : 0,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.wallet_ledger) === null || _a === void 0 ? void 0 : _a.length) {
            obj.wallet_ledger = message.wallet_ledger.map((e) => exports.WalletLedger.toJSON(e));
        }
        if (message.count !== 0) {
            obj.count = Math.round(message.count);
        }
        return obj;
    },
    create(base) {
        return exports.WalletLedgerList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseWalletLedgerList();
        message.wallet_ledger = ((_a = object.wallet_ledger) === null || _a === void 0 ? void 0 : _a.map((e) => exports.WalletLedger.fromPartial(e))) || [];
        message.count = (_b = object.count) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseWalletLedgerListReq() {
    return { limit: undefined, cursor: "", transaction_id: "", page: undefined };
}
exports.WalletLedgerListReq = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.limit !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.limit }, writer.uint32(10).fork()).ldelim();
        }
        if (message.cursor !== "") {
            writer.uint32(18).string(message.cursor);
        }
        if (message.transaction_id !== "") {
            writer.uint32(26).string(message.transaction_id);
        }
        if (message.page !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.page }, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWalletLedgerListReq();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.limit = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.transaction_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.page = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
            transaction_id: isSet(object.transaction_id) ? globalThis.String(object.transaction_id) : "",
            page: isSet(object.page) ? Number(object.page) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        if (message.transaction_id !== "") {
            obj.transaction_id = message.transaction_id;
        }
        if (message.page !== undefined) {
            obj.page = message.page;
        }
        return obj;
    },
    create(base) {
        return exports.WalletLedgerListReq.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseWalletLedgerListReq();
        message.limit = (_a = object.limit) !== null && _a !== void 0 ? _a : undefined;
        message.cursor = (_b = object.cursor) !== null && _b !== void 0 ? _b : "";
        message.transaction_id = (_c = object.transaction_id) !== null && _c !== void 0 ? _c : "";
        message.page = (_d = object.page) !== null && _d !== void 0 ? _d : undefined;
        return message;
    },
};
function createBaseTransactionDetailReq() {
    return { trans_id: "" };
}
exports.TransactionDetailReq = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.trans_id !== "") {
            writer.uint32(10).string(message.trans_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionDetailReq();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.trans_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { trans_id: isSet(object.trans_id) ? globalThis.String(object.trans_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.trans_id !== "") {
            obj.trans_id = message.trans_id;
        }
        return obj;
    },
    create(base) {
        return exports.TransactionDetailReq.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTransactionDetailReq();
        message.trans_id = (_a = object.trans_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseTransactionDetail() {
    return {
        sender_id: "",
        sender_username: "",
        receiver_id: "",
        receiver_username: "",
        amount: 0,
        trans_id: "",
        metadata: "",
        create_time: undefined,
        update_time: undefined,
    };
}
exports.TransactionDetail = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender_id !== "") {
            writer.uint32(10).string(message.sender_id);
        }
        if (message.sender_username !== "") {
            writer.uint32(18).string(message.sender_username);
        }
        if (message.receiver_id !== "") {
            writer.uint32(26).string(message.receiver_id);
        }
        if (message.receiver_username !== "") {
            writer.uint32(34).string(message.receiver_username);
        }
        if (message.amount !== 0) {
            writer.uint32(40).int32(message.amount);
        }
        if (message.trans_id !== "") {
            writer.uint32(50).string(message.trans_id);
        }
        if (message.metadata !== "") {
            writer.uint32(58).string(message.metadata);
        }
        if (message.create_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.create_time), writer.uint32(66).fork()).ldelim();
        }
        if (message.update_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.update_time), writer.uint32(74).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionDetail();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.sender_username = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.receiver_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.receiver_username = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.amount = reader.int32();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.trans_id = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.metadata = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.create_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.update_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender_id: isSet(object.sender_id) ? globalThis.String(object.sender_id) : "",
            sender_username: isSet(object.sender_username) ? globalThis.String(object.sender_username) : "",
            receiver_id: isSet(object.receiver_id) ? globalThis.String(object.receiver_id) : "",
            receiver_username: isSet(object.receiver_username) ? globalThis.String(object.receiver_username) : "",
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
            trans_id: isSet(object.trans_id) ? globalThis.String(object.trans_id) : "",
            metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
            create_time: isSet(object.create_time) ? fromJsonTimestamp(object.create_time) : undefined,
            update_time: isSet(object.update_time) ? fromJsonTimestamp(object.update_time) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender_id !== "") {
            obj.sender_id = message.sender_id;
        }
        if (message.sender_username !== "") {
            obj.sender_username = message.sender_username;
        }
        if (message.receiver_id !== "") {
            obj.receiver_id = message.receiver_id;
        }
        if (message.receiver_username !== "") {
            obj.receiver_username = message.receiver_username;
        }
        if (message.amount !== 0) {
            obj.amount = Math.round(message.amount);
        }
        if (message.trans_id !== "") {
            obj.trans_id = message.trans_id;
        }
        if (message.metadata !== "") {
            obj.metadata = message.metadata;
        }
        if (message.create_time !== undefined) {
            obj.create_time = message.create_time.toISOString();
        }
        if (message.update_time !== undefined) {
            obj.update_time = message.update_time.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.TransactionDetail.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseTransactionDetail();
        message.sender_id = (_a = object.sender_id) !== null && _a !== void 0 ? _a : "";
        message.sender_username = (_b = object.sender_username) !== null && _b !== void 0 ? _b : "";
        message.receiver_id = (_c = object.receiver_id) !== null && _c !== void 0 ? _c : "";
        message.receiver_username = (_d = object.receiver_username) !== null && _d !== void 0 ? _d : "";
        message.amount = (_e = object.amount) !== null && _e !== void 0 ? _e : 0;
        message.trans_id = (_f = object.trans_id) !== null && _f !== void 0 ? _f : "";
        message.metadata = (_g = object.metadata) !== null && _g !== void 0 ? _g : "";
        message.create_time = (_h = object.create_time) !== null && _h !== void 0 ? _h : undefined;
        message.update_time = (_j = object.update_time) !== null && _j !== void 0 ? _j : undefined;
        return message;
    },
};
function createBaseSdTopic() {
    return {
        id: "",
        creator_id: "",
        message_id: "",
        clan_id: "",
        channel_id: "",
        status: 0,
        create_time: undefined,
        update_time: undefined,
        message: undefined,
        last_sent_message: undefined,
    };
}
exports.SdTopic = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.creator_id !== "") {
            writer.uint32(18).string(message.creator_id);
        }
        if (message.message_id !== "") {
            writer.uint32(26).string(message.message_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(34).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(42).string(message.channel_id);
        }
        if (message.status !== 0) {
            writer.uint32(48).int32(message.status);
        }
        if (message.create_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.create_time), writer.uint32(58).fork()).ldelim();
        }
        if (message.update_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.update_time), writer.uint32(66).fork()).ldelim();
        }
        if (message.message !== undefined) {
            exports.ChannelMessage.encode(message.message, writer.uint32(74).fork()).ldelim();
        }
        if (message.last_sent_message !== undefined) {
            exports.ChannelMessageHeader.encode(message.last_sent_message, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSdTopic();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.create_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.update_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.message = exports.ChannelMessage.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.last_sent_message = exports.ChannelMessageHeader.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            status: isSet(object.status) ? globalThis.Number(object.status) : 0,
            create_time: isSet(object.create_time) ? fromJsonTimestamp(object.create_time) : undefined,
            update_time: isSet(object.update_time) ? fromJsonTimestamp(object.update_time) : undefined,
            message: isSet(object.message) ? exports.ChannelMessage.fromJSON(object.message) : undefined,
            last_sent_message: isSet(object.last_sent_message)
                ? exports.ChannelMessageHeader.fromJSON(object.last_sent_message)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.message_id !== "") {
            obj.message_id = message.message_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.status !== 0) {
            obj.status = Math.round(message.status);
        }
        if (message.create_time !== undefined) {
            obj.create_time = message.create_time.toISOString();
        }
        if (message.update_time !== undefined) {
            obj.update_time = message.update_time.toISOString();
        }
        if (message.message !== undefined) {
            obj.message = exports.ChannelMessage.toJSON(message.message);
        }
        if (message.last_sent_message !== undefined) {
            obj.last_sent_message = exports.ChannelMessageHeader.toJSON(message.last_sent_message);
        }
        return obj;
    },
    create(base) {
        return exports.SdTopic.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseSdTopic();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.creator_id = (_b = object.creator_id) !== null && _b !== void 0 ? _b : "";
        message.message_id = (_c = object.message_id) !== null && _c !== void 0 ? _c : "";
        message.clan_id = (_d = object.clan_id) !== null && _d !== void 0 ? _d : "";
        message.channel_id = (_e = object.channel_id) !== null && _e !== void 0 ? _e : "";
        message.status = (_f = object.status) !== null && _f !== void 0 ? _f : 0;
        message.create_time = (_g = object.create_time) !== null && _g !== void 0 ? _g : undefined;
        message.update_time = (_h = object.update_time) !== null && _h !== void 0 ? _h : undefined;
        message.message = (object.message !== undefined && object.message !== null)
            ? exports.ChannelMessage.fromPartial(object.message)
            : undefined;
        message.last_sent_message = (object.last_sent_message !== undefined && object.last_sent_message !== null)
            ? exports.ChannelMessageHeader.fromPartial(object.last_sent_message)
            : undefined;
        return message;
    },
};
function createBaseSdTopicRequest() {
    return { message_id: "", clan_id: "", channel_id: "" };
}
exports.SdTopicRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.message_id !== "") {
            writer.uint32(10).string(message.message_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(26).string(message.channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSdTopicRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.message_id !== "") {
            obj.message_id = message.message_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.SdTopicRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSdTopicRequest();
        message.message_id = (_a = object.message_id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        message.channel_id = (_c = object.channel_id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseSdTopicList() {
    return { count: 0, topics: [] };
}
exports.SdTopicList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.count !== 0) {
            writer.uint32(8).int32(message.count);
        }
        for (const v of message.topics) {
            exports.SdTopic.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSdTopicList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.count = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.topics.push(exports.SdTopic.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            count: isSet(object.count) ? globalThis.Number(object.count) : 0,
            topics: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topics) ? object.topics.map((e) => exports.SdTopic.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.count !== 0) {
            obj.count = Math.round(message.count);
        }
        if ((_a = message.topics) === null || _a === void 0 ? void 0 : _a.length) {
            obj.topics = message.topics.map((e) => exports.SdTopic.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.SdTopicList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSdTopicList();
        message.count = (_a = object.count) !== null && _a !== void 0 ? _a : 0;
        message.topics = ((_b = object.topics) === null || _b === void 0 ? void 0 : _b.map((e) => exports.SdTopic.fromPartial(e))) || [];
        return message;
    },
};
function createBaseListSdTopicRequest() {
    return { clan_id: "", limit: 0 };
}
exports.ListSdTopicRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.limit !== 0) {
            writer.uint32(16).int32(message.limit);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListSdTopicRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.limit = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.limit !== 0) {
            obj.limit = Math.round(message.limit);
        }
        return obj;
    },
    create(base) {
        return exports.ListSdTopicRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseListSdTopicRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.limit = (_b = object.limit) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseSdTopicDetailRequest() {
    return { topic_id: "" };
}
exports.SdTopicDetailRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.topic_id !== "") {
            writer.uint32(10).string(message.topic_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSdTopicDetailRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.topic_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { topic_id: isSet(object.topic_id) ? globalThis.String(object.topic_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.topic_id !== "") {
            obj.topic_id = message.topic_id;
        }
        return obj;
    },
    create(base) {
        return exports.SdTopicDetailRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSdTopicDetailRequest();
        message.topic_id = (_a = object.topic_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseDeleteSdTopicRequest() {
    return { channel_id: "", id: "", clan_id: "" };
}
exports.DeleteSdTopicRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.clan_id !== "") {
            writer.uint32(26).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteSdTopicRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteSdTopicRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseDeleteSdTopicRequest();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : "";
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseGenerateMeetTokenRequest() {
    return { channel_id: "", room_name: "" };
}
exports.GenerateMeetTokenRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        if (message.room_name !== "") {
            writer.uint32(18).string(message.room_name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenerateMeetTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.room_name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            room_name: isSet(object.room_name) ? globalThis.String(object.room_name) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.room_name !== "") {
            obj.room_name = message.room_name;
        }
        return obj;
    },
    create(base) {
        return exports.GenerateMeetTokenRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGenerateMeetTokenRequest();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        message.room_name = (_b = object.room_name) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGenerateMeetTokenResponse() {
    return { token: "" };
}
exports.GenerateMeetTokenResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenerateMeetTokenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { token: isSet(object.token) ? globalThis.String(object.token) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.token !== "") {
            obj.token = message.token;
        }
        return obj;
    },
    create(base) {
        return exports.GenerateMeetTokenResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGenerateMeetTokenResponse();
        message.token = (_a = object.token) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGenerateMezonMeetResponse() {
    return { meet_id: "", room_name: "", external_link: "", creator_id: "", event_id: "" };
}
exports.GenerateMezonMeetResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.meet_id !== "") {
            writer.uint32(10).string(message.meet_id);
        }
        if (message.room_name !== "") {
            writer.uint32(18).string(message.room_name);
        }
        if (message.external_link !== "") {
            writer.uint32(26).string(message.external_link);
        }
        if (message.creator_id !== "") {
            writer.uint32(34).string(message.creator_id);
        }
        if (message.event_id !== "") {
            writer.uint32(42).string(message.event_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenerateMezonMeetResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.meet_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.room_name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.external_link = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.event_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            meet_id: isSet(object.meet_id) ? globalThis.String(object.meet_id) : "",
            room_name: isSet(object.room_name) ? globalThis.String(object.room_name) : "",
            external_link: isSet(object.external_link) ? globalThis.String(object.external_link) : "",
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            event_id: isSet(object.event_id) ? globalThis.String(object.event_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.meet_id !== "") {
            obj.meet_id = message.meet_id;
        }
        if (message.room_name !== "") {
            obj.room_name = message.room_name;
        }
        if (message.external_link !== "") {
            obj.external_link = message.external_link;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.event_id !== "") {
            obj.event_id = message.event_id;
        }
        return obj;
    },
    create(base) {
        return exports.GenerateMezonMeetResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseGenerateMezonMeetResponse();
        message.meet_id = (_a = object.meet_id) !== null && _a !== void 0 ? _a : "";
        message.room_name = (_b = object.room_name) !== null && _b !== void 0 ? _b : "";
        message.external_link = (_c = object.external_link) !== null && _c !== void 0 ? _c : "";
        message.creator_id = (_d = object.creator_id) !== null && _d !== void 0 ? _d : "";
        message.event_id = (_e = object.event_id) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseCreateRoomChannelApps() {
    return { channel_id: "", room_name: "" };
}
exports.CreateRoomChannelApps = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        if (message.room_name !== "") {
            writer.uint32(18).string(message.room_name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateRoomChannelApps();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.room_name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            room_name: isSet(object.room_name) ? globalThis.String(object.room_name) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.room_name !== "") {
            obj.room_name = message.room_name;
        }
        return obj;
    },
    create(base) {
        return exports.CreateRoomChannelApps.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCreateRoomChannelApps();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        message.room_name = (_b = object.room_name) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMezonOauthClient() {
    return {
        access_token_strategy: "",
        allowed_cors_origins: [],
        audience: [],
        authorization_code_grant_access_token_lifespan: "",
        authorization_code_grant_id_token_lifespan: "",
        authorization_code_grant_refresh_token_lifespan: "",
        backchannel_logout_session_required: false,
        backchannel_logout_uri: "",
        client_credentials_grant_access_token_lifespan: "",
        client_id: "",
        client_name: "",
        client_secret: "",
        client_secret_expires_at: 0,
        client_uri: "",
        contacts: [],
        created_at: undefined,
        frontchannel_logout_session_required: false,
        frontchannel_logout_uri: "",
        grant_types: [],
        implicit_grant_access_token_lifespan: "",
        implicit_grant_id_token_lifespan: "",
        jwks: [],
        jwks_uri: "",
        jwt_bearer_grant_access_token_lifespan: "",
        logo_uri: "",
        owner: "",
        policy_uri: "",
        post_logout_redirect_uris: [],
        redirect_uris: [],
        refresh_token_grant_access_token_lifespan: "",
        refresh_token_grant_id_token_lifespan: "",
        refresh_token_grant_refresh_token_lifespan: "",
        registration_access_token: "",
        registration_client_uri: "",
        request_object_signing_alg: "",
        request_uris: [],
        response_types: [],
        scope: "",
        sector_identifier_uri: "",
        skip_consent: false,
        skip_logout_consent: false,
        subject_type: "",
        token_endpoint_auth_method: "",
        token_endpoint_auth_signing_alg: "",
        tos_uri: "",
        updated_at: undefined,
        userinfo_signed_response_alg: "",
    };
}
exports.MezonOauthClient = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.access_token_strategy !== "") {
            writer.uint32(10).string(message.access_token_strategy);
        }
        for (const v of message.allowed_cors_origins) {
            writer.uint32(18).string(v);
        }
        for (const v of message.audience) {
            writer.uint32(26).string(v);
        }
        if (message.authorization_code_grant_access_token_lifespan !== "") {
            writer.uint32(34).string(message.authorization_code_grant_access_token_lifespan);
        }
        if (message.authorization_code_grant_id_token_lifespan !== "") {
            writer.uint32(42).string(message.authorization_code_grant_id_token_lifespan);
        }
        if (message.authorization_code_grant_refresh_token_lifespan !== "") {
            writer.uint32(50).string(message.authorization_code_grant_refresh_token_lifespan);
        }
        if (message.backchannel_logout_session_required !== false) {
            writer.uint32(56).bool(message.backchannel_logout_session_required);
        }
        if (message.backchannel_logout_uri !== "") {
            writer.uint32(66).string(message.backchannel_logout_uri);
        }
        if (message.client_credentials_grant_access_token_lifespan !== "") {
            writer.uint32(74).string(message.client_credentials_grant_access_token_lifespan);
        }
        if (message.client_id !== "") {
            writer.uint32(82).string(message.client_id);
        }
        if (message.client_name !== "") {
            writer.uint32(90).string(message.client_name);
        }
        if (message.client_secret !== "") {
            writer.uint32(98).string(message.client_secret);
        }
        if (message.client_secret_expires_at !== 0) {
            writer.uint32(104).int32(message.client_secret_expires_at);
        }
        if (message.client_uri !== "") {
            writer.uint32(114).string(message.client_uri);
        }
        for (const v of message.contacts) {
            writer.uint32(122).string(v);
        }
        if (message.created_at !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.created_at), writer.uint32(130).fork()).ldelim();
        }
        if (message.frontchannel_logout_session_required !== false) {
            writer.uint32(136).bool(message.frontchannel_logout_session_required);
        }
        if (message.frontchannel_logout_uri !== "") {
            writer.uint32(146).string(message.frontchannel_logout_uri);
        }
        for (const v of message.grant_types) {
            writer.uint32(154).string(v);
        }
        if (message.implicit_grant_access_token_lifespan !== "") {
            writer.uint32(162).string(message.implicit_grant_access_token_lifespan);
        }
        if (message.implicit_grant_id_token_lifespan !== "") {
            writer.uint32(170).string(message.implicit_grant_id_token_lifespan);
        }
        for (const v of message.jwks) {
            writer.uint32(178).string(v);
        }
        if (message.jwks_uri !== "") {
            writer.uint32(186).string(message.jwks_uri);
        }
        if (message.jwt_bearer_grant_access_token_lifespan !== "") {
            writer.uint32(194).string(message.jwt_bearer_grant_access_token_lifespan);
        }
        if (message.logo_uri !== "") {
            writer.uint32(202).string(message.logo_uri);
        }
        if (message.owner !== "") {
            writer.uint32(210).string(message.owner);
        }
        if (message.policy_uri !== "") {
            writer.uint32(218).string(message.policy_uri);
        }
        for (const v of message.post_logout_redirect_uris) {
            writer.uint32(226).string(v);
        }
        for (const v of message.redirect_uris) {
            writer.uint32(234).string(v);
        }
        if (message.refresh_token_grant_access_token_lifespan !== "") {
            writer.uint32(242).string(message.refresh_token_grant_access_token_lifespan);
        }
        if (message.refresh_token_grant_id_token_lifespan !== "") {
            writer.uint32(250).string(message.refresh_token_grant_id_token_lifespan);
        }
        if (message.refresh_token_grant_refresh_token_lifespan !== "") {
            writer.uint32(258).string(message.refresh_token_grant_refresh_token_lifespan);
        }
        if (message.registration_access_token !== "") {
            writer.uint32(266).string(message.registration_access_token);
        }
        if (message.registration_client_uri !== "") {
            writer.uint32(274).string(message.registration_client_uri);
        }
        if (message.request_object_signing_alg !== "") {
            writer.uint32(282).string(message.request_object_signing_alg);
        }
        for (const v of message.request_uris) {
            writer.uint32(290).string(v);
        }
        for (const v of message.response_types) {
            writer.uint32(298).string(v);
        }
        if (message.scope !== "") {
            writer.uint32(306).string(message.scope);
        }
        if (message.sector_identifier_uri !== "") {
            writer.uint32(314).string(message.sector_identifier_uri);
        }
        if (message.skip_consent !== false) {
            writer.uint32(320).bool(message.skip_consent);
        }
        if (message.skip_logout_consent !== false) {
            writer.uint32(328).bool(message.skip_logout_consent);
        }
        if (message.subject_type !== "") {
            writer.uint32(338).string(message.subject_type);
        }
        if (message.token_endpoint_auth_method !== "") {
            writer.uint32(346).string(message.token_endpoint_auth_method);
        }
        if (message.token_endpoint_auth_signing_alg !== "") {
            writer.uint32(354).string(message.token_endpoint_auth_signing_alg);
        }
        if (message.tos_uri !== "") {
            writer.uint32(362).string(message.tos_uri);
        }
        if (message.updated_at !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.updated_at), writer.uint32(370).fork()).ldelim();
        }
        if (message.userinfo_signed_response_alg !== "") {
            writer.uint32(378).string(message.userinfo_signed_response_alg);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMezonOauthClient();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.access_token_strategy = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.allowed_cors_origins.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.audience.push(reader.string());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.authorization_code_grant_access_token_lifespan = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.authorization_code_grant_id_token_lifespan = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.authorization_code_grant_refresh_token_lifespan = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.backchannel_logout_session_required = reader.bool();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.backchannel_logout_uri = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.client_credentials_grant_access_token_lifespan = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.client_id = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.client_name = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.client_secret = reader.string();
                    continue;
                case 13:
                    if (tag !== 104) {
                        break;
                    }
                    message.client_secret_expires_at = reader.int32();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.client_uri = reader.string();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.contacts.push(reader.string());
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.created_at = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 17:
                    if (tag !== 136) {
                        break;
                    }
                    message.frontchannel_logout_session_required = reader.bool();
                    continue;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    message.frontchannel_logout_uri = reader.string();
                    continue;
                case 19:
                    if (tag !== 154) {
                        break;
                    }
                    message.grant_types.push(reader.string());
                    continue;
                case 20:
                    if (tag !== 162) {
                        break;
                    }
                    message.implicit_grant_access_token_lifespan = reader.string();
                    continue;
                case 21:
                    if (tag !== 170) {
                        break;
                    }
                    message.implicit_grant_id_token_lifespan = reader.string();
                    continue;
                case 22:
                    if (tag !== 178) {
                        break;
                    }
                    message.jwks.push(reader.string());
                    continue;
                case 23:
                    if (tag !== 186) {
                        break;
                    }
                    message.jwks_uri = reader.string();
                    continue;
                case 24:
                    if (tag !== 194) {
                        break;
                    }
                    message.jwt_bearer_grant_access_token_lifespan = reader.string();
                    continue;
                case 25:
                    if (tag !== 202) {
                        break;
                    }
                    message.logo_uri = reader.string();
                    continue;
                case 26:
                    if (tag !== 210) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
                case 27:
                    if (tag !== 218) {
                        break;
                    }
                    message.policy_uri = reader.string();
                    continue;
                case 28:
                    if (tag !== 226) {
                        break;
                    }
                    message.post_logout_redirect_uris.push(reader.string());
                    continue;
                case 29:
                    if (tag !== 234) {
                        break;
                    }
                    message.redirect_uris.push(reader.string());
                    continue;
                case 30:
                    if (tag !== 242) {
                        break;
                    }
                    message.refresh_token_grant_access_token_lifespan = reader.string();
                    continue;
                case 31:
                    if (tag !== 250) {
                        break;
                    }
                    message.refresh_token_grant_id_token_lifespan = reader.string();
                    continue;
                case 32:
                    if (tag !== 258) {
                        break;
                    }
                    message.refresh_token_grant_refresh_token_lifespan = reader.string();
                    continue;
                case 33:
                    if (tag !== 266) {
                        break;
                    }
                    message.registration_access_token = reader.string();
                    continue;
                case 34:
                    if (tag !== 274) {
                        break;
                    }
                    message.registration_client_uri = reader.string();
                    continue;
                case 35:
                    if (tag !== 282) {
                        break;
                    }
                    message.request_object_signing_alg = reader.string();
                    continue;
                case 36:
                    if (tag !== 290) {
                        break;
                    }
                    message.request_uris.push(reader.string());
                    continue;
                case 37:
                    if (tag !== 298) {
                        break;
                    }
                    message.response_types.push(reader.string());
                    continue;
                case 38:
                    if (tag !== 306) {
                        break;
                    }
                    message.scope = reader.string();
                    continue;
                case 39:
                    if (tag !== 314) {
                        break;
                    }
                    message.sector_identifier_uri = reader.string();
                    continue;
                case 40:
                    if (tag !== 320) {
                        break;
                    }
                    message.skip_consent = reader.bool();
                    continue;
                case 41:
                    if (tag !== 328) {
                        break;
                    }
                    message.skip_logout_consent = reader.bool();
                    continue;
                case 42:
                    if (tag !== 338) {
                        break;
                    }
                    message.subject_type = reader.string();
                    continue;
                case 43:
                    if (tag !== 346) {
                        break;
                    }
                    message.token_endpoint_auth_method = reader.string();
                    continue;
                case 44:
                    if (tag !== 354) {
                        break;
                    }
                    message.token_endpoint_auth_signing_alg = reader.string();
                    continue;
                case 45:
                    if (tag !== 362) {
                        break;
                    }
                    message.tos_uri = reader.string();
                    continue;
                case 46:
                    if (tag !== 370) {
                        break;
                    }
                    message.updated_at = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 47:
                    if (tag !== 378) {
                        break;
                    }
                    message.userinfo_signed_response_alg = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            access_token_strategy: isSet(object.access_token_strategy) ? globalThis.String(object.access_token_strategy) : "",
            allowed_cors_origins: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.allowed_cors_origins)
                ? object.allowed_cors_origins.map((e) => globalThis.String(e))
                : [],
            audience: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.audience) ? object.audience.map((e) => globalThis.String(e)) : [],
            authorization_code_grant_access_token_lifespan: isSet(object.authorization_code_grant_access_token_lifespan)
                ? globalThis.String(object.authorization_code_grant_access_token_lifespan)
                : "",
            authorization_code_grant_id_token_lifespan: isSet(object.authorization_code_grant_id_token_lifespan)
                ? globalThis.String(object.authorization_code_grant_id_token_lifespan)
                : "",
            authorization_code_grant_refresh_token_lifespan: isSet(object.authorization_code_grant_refresh_token_lifespan)
                ? globalThis.String(object.authorization_code_grant_refresh_token_lifespan)
                : "",
            backchannel_logout_session_required: isSet(object.backchannel_logout_session_required)
                ? globalThis.Boolean(object.backchannel_logout_session_required)
                : false,
            backchannel_logout_uri: isSet(object.backchannel_logout_uri)
                ? globalThis.String(object.backchannel_logout_uri)
                : "",
            client_credentials_grant_access_token_lifespan: isSet(object.client_credentials_grant_access_token_lifespan)
                ? globalThis.String(object.client_credentials_grant_access_token_lifespan)
                : "",
            client_id: isSet(object.client_id) ? globalThis.String(object.client_id) : "",
            client_name: isSet(object.client_name) ? globalThis.String(object.client_name) : "",
            client_secret: isSet(object.client_secret) ? globalThis.String(object.client_secret) : "",
            client_secret_expires_at: isSet(object.client_secret_expires_at)
                ? globalThis.Number(object.client_secret_expires_at)
                : 0,
            client_uri: isSet(object.client_uri) ? globalThis.String(object.client_uri) : "",
            contacts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.contacts)
                ? object.contacts.map((e) => globalThis.String(e))
                : [],
            created_at: isSet(object.created_at) ? fromJsonTimestamp(object.created_at) : undefined,
            frontchannel_logout_session_required: isSet(object.frontchannel_logout_session_required)
                ? globalThis.Boolean(object.frontchannel_logout_session_required)
                : false,
            frontchannel_logout_uri: isSet(object.frontchannel_logout_uri)
                ? globalThis.String(object.frontchannel_logout_uri)
                : "",
            grant_types: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.grant_types)
                ? object.grant_types.map((e) => globalThis.String(e))
                : [],
            implicit_grant_access_token_lifespan: isSet(object.implicit_grant_access_token_lifespan)
                ? globalThis.String(object.implicit_grant_access_token_lifespan)
                : "",
            implicit_grant_id_token_lifespan: isSet(object.implicit_grant_id_token_lifespan)
                ? globalThis.String(object.implicit_grant_id_token_lifespan)
                : "",
            jwks: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.jwks)
                ? object.jwks.map((e) => globalThis.String(e))
                : [],
            jwks_uri: isSet(object.jwks_uri) ? globalThis.String(object.jwks_uri) : "",
            jwt_bearer_grant_access_token_lifespan: isSet(object.jwt_bearer_grant_access_token_lifespan)
                ? globalThis.String(object.jwt_bearer_grant_access_token_lifespan)
                : "",
            logo_uri: isSet(object.logo_uri) ? globalThis.String(object.logo_uri) : "",
            owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
            policy_uri: isSet(object.policy_uri) ? globalThis.String(object.policy_uri) : "",
            post_logout_redirect_uris: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.post_logout_redirect_uris)
                ? object.post_logout_redirect_uris.map((e) => globalThis.String(e))
                : [],
            redirect_uris: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.redirect_uris)
                ? object.redirect_uris.map((e) => globalThis.String(e))
                : [],
            refresh_token_grant_access_token_lifespan: isSet(object.refresh_token_grant_access_token_lifespan)
                ? globalThis.String(object.refresh_token_grant_access_token_lifespan)
                : "",
            refresh_token_grant_id_token_lifespan: isSet(object.refresh_token_grant_id_token_lifespan)
                ? globalThis.String(object.refresh_token_grant_id_token_lifespan)
                : "",
            refresh_token_grant_refresh_token_lifespan: isSet(object.refresh_token_grant_refresh_token_lifespan)
                ? globalThis.String(object.refresh_token_grant_refresh_token_lifespan)
                : "",
            registration_access_token: isSet(object.registration_access_token)
                ? globalThis.String(object.registration_access_token)
                : "",
            registration_client_uri: isSet(object.registration_client_uri)
                ? globalThis.String(object.registration_client_uri)
                : "",
            request_object_signing_alg: isSet(object.request_object_signing_alg)
                ? globalThis.String(object.request_object_signing_alg)
                : "",
            request_uris: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.request_uris)
                ? object.request_uris.map((e) => globalThis.String(e))
                : [],
            response_types: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.response_types)
                ? object.response_types.map((e) => globalThis.String(e))
                : [],
            scope: isSet(object.scope) ? globalThis.String(object.scope) : "",
            sector_identifier_uri: isSet(object.sector_identifier_uri) ? globalThis.String(object.sector_identifier_uri) : "",
            skip_consent: isSet(object.skip_consent) ? globalThis.Boolean(object.skip_consent) : false,
            skip_logout_consent: isSet(object.skip_logout_consent) ? globalThis.Boolean(object.skip_logout_consent) : false,
            subject_type: isSet(object.subject_type) ? globalThis.String(object.subject_type) : "",
            token_endpoint_auth_method: isSet(object.token_endpoint_auth_method)
                ? globalThis.String(object.token_endpoint_auth_method)
                : "",
            token_endpoint_auth_signing_alg: isSet(object.token_endpoint_auth_signing_alg)
                ? globalThis.String(object.token_endpoint_auth_signing_alg)
                : "",
            tos_uri: isSet(object.tos_uri) ? globalThis.String(object.tos_uri) : "",
            updated_at: isSet(object.updated_at) ? fromJsonTimestamp(object.updated_at) : undefined,
            userinfo_signed_response_alg: isSet(object.userinfo_signed_response_alg)
                ? globalThis.String(object.userinfo_signed_response_alg)
                : "",
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const obj = {};
        if (message.access_token_strategy !== "") {
            obj.access_token_strategy = message.access_token_strategy;
        }
        if ((_a = message.allowed_cors_origins) === null || _a === void 0 ? void 0 : _a.length) {
            obj.allowed_cors_origins = message.allowed_cors_origins;
        }
        if ((_b = message.audience) === null || _b === void 0 ? void 0 : _b.length) {
            obj.audience = message.audience;
        }
        if (message.authorization_code_grant_access_token_lifespan !== "") {
            obj.authorization_code_grant_access_token_lifespan = message.authorization_code_grant_access_token_lifespan;
        }
        if (message.authorization_code_grant_id_token_lifespan !== "") {
            obj.authorization_code_grant_id_token_lifespan = message.authorization_code_grant_id_token_lifespan;
        }
        if (message.authorization_code_grant_refresh_token_lifespan !== "") {
            obj.authorization_code_grant_refresh_token_lifespan = message.authorization_code_grant_refresh_token_lifespan;
        }
        if (message.backchannel_logout_session_required !== false) {
            obj.backchannel_logout_session_required = message.backchannel_logout_session_required;
        }
        if (message.backchannel_logout_uri !== "") {
            obj.backchannel_logout_uri = message.backchannel_logout_uri;
        }
        if (message.client_credentials_grant_access_token_lifespan !== "") {
            obj.client_credentials_grant_access_token_lifespan = message.client_credentials_grant_access_token_lifespan;
        }
        if (message.client_id !== "") {
            obj.client_id = message.client_id;
        }
        if (message.client_name !== "") {
            obj.client_name = message.client_name;
        }
        if (message.client_secret !== "") {
            obj.client_secret = message.client_secret;
        }
        if (message.client_secret_expires_at !== 0) {
            obj.client_secret_expires_at = Math.round(message.client_secret_expires_at);
        }
        if (message.client_uri !== "") {
            obj.client_uri = message.client_uri;
        }
        if ((_c = message.contacts) === null || _c === void 0 ? void 0 : _c.length) {
            obj.contacts = message.contacts;
        }
        if (message.created_at !== undefined) {
            obj.created_at = message.created_at.toISOString();
        }
        if (message.frontchannel_logout_session_required !== false) {
            obj.frontchannel_logout_session_required = message.frontchannel_logout_session_required;
        }
        if (message.frontchannel_logout_uri !== "") {
            obj.frontchannel_logout_uri = message.frontchannel_logout_uri;
        }
        if ((_d = message.grant_types) === null || _d === void 0 ? void 0 : _d.length) {
            obj.grant_types = message.grant_types;
        }
        if (message.implicit_grant_access_token_lifespan !== "") {
            obj.implicit_grant_access_token_lifespan = message.implicit_grant_access_token_lifespan;
        }
        if (message.implicit_grant_id_token_lifespan !== "") {
            obj.implicit_grant_id_token_lifespan = message.implicit_grant_id_token_lifespan;
        }
        if ((_e = message.jwks) === null || _e === void 0 ? void 0 : _e.length) {
            obj.jwks = message.jwks;
        }
        if (message.jwks_uri !== "") {
            obj.jwks_uri = message.jwks_uri;
        }
        if (message.jwt_bearer_grant_access_token_lifespan !== "") {
            obj.jwt_bearer_grant_access_token_lifespan = message.jwt_bearer_grant_access_token_lifespan;
        }
        if (message.logo_uri !== "") {
            obj.logo_uri = message.logo_uri;
        }
        if (message.owner !== "") {
            obj.owner = message.owner;
        }
        if (message.policy_uri !== "") {
            obj.policy_uri = message.policy_uri;
        }
        if ((_f = message.post_logout_redirect_uris) === null || _f === void 0 ? void 0 : _f.length) {
            obj.post_logout_redirect_uris = message.post_logout_redirect_uris;
        }
        if ((_g = message.redirect_uris) === null || _g === void 0 ? void 0 : _g.length) {
            obj.redirect_uris = message.redirect_uris;
        }
        if (message.refresh_token_grant_access_token_lifespan !== "") {
            obj.refresh_token_grant_access_token_lifespan = message.refresh_token_grant_access_token_lifespan;
        }
        if (message.refresh_token_grant_id_token_lifespan !== "") {
            obj.refresh_token_grant_id_token_lifespan = message.refresh_token_grant_id_token_lifespan;
        }
        if (message.refresh_token_grant_refresh_token_lifespan !== "") {
            obj.refresh_token_grant_refresh_token_lifespan = message.refresh_token_grant_refresh_token_lifespan;
        }
        if (message.registration_access_token !== "") {
            obj.registration_access_token = message.registration_access_token;
        }
        if (message.registration_client_uri !== "") {
            obj.registration_client_uri = message.registration_client_uri;
        }
        if (message.request_object_signing_alg !== "") {
            obj.request_object_signing_alg = message.request_object_signing_alg;
        }
        if ((_h = message.request_uris) === null || _h === void 0 ? void 0 : _h.length) {
            obj.request_uris = message.request_uris;
        }
        if ((_j = message.response_types) === null || _j === void 0 ? void 0 : _j.length) {
            obj.response_types = message.response_types;
        }
        if (message.scope !== "") {
            obj.scope = message.scope;
        }
        if (message.sector_identifier_uri !== "") {
            obj.sector_identifier_uri = message.sector_identifier_uri;
        }
        if (message.skip_consent !== false) {
            obj.skip_consent = message.skip_consent;
        }
        if (message.skip_logout_consent !== false) {
            obj.skip_logout_consent = message.skip_logout_consent;
        }
        if (message.subject_type !== "") {
            obj.subject_type = message.subject_type;
        }
        if (message.token_endpoint_auth_method !== "") {
            obj.token_endpoint_auth_method = message.token_endpoint_auth_method;
        }
        if (message.token_endpoint_auth_signing_alg !== "") {
            obj.token_endpoint_auth_signing_alg = message.token_endpoint_auth_signing_alg;
        }
        if (message.tos_uri !== "") {
            obj.tos_uri = message.tos_uri;
        }
        if (message.updated_at !== undefined) {
            obj.updated_at = message.updated_at.toISOString();
        }
        if (message.userinfo_signed_response_alg !== "") {
            obj.userinfo_signed_response_alg = message.userinfo_signed_response_alg;
        }
        return obj;
    },
    create(base) {
        return exports.MezonOauthClient.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22;
        const message = createBaseMezonOauthClient();
        message.access_token_strategy = (_a = object.access_token_strategy) !== null && _a !== void 0 ? _a : "";
        message.allowed_cors_origins = ((_b = object.allowed_cors_origins) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.audience = ((_c = object.audience) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.authorization_code_grant_access_token_lifespan = (_d = object.authorization_code_grant_access_token_lifespan) !== null && _d !== void 0 ? _d : "";
        message.authorization_code_grant_id_token_lifespan = (_e = object.authorization_code_grant_id_token_lifespan) !== null && _e !== void 0 ? _e : "";
        message.authorization_code_grant_refresh_token_lifespan = (_f = object.authorization_code_grant_refresh_token_lifespan) !== null && _f !== void 0 ? _f : "";
        message.backchannel_logout_session_required = (_g = object.backchannel_logout_session_required) !== null && _g !== void 0 ? _g : false;
        message.backchannel_logout_uri = (_h = object.backchannel_logout_uri) !== null && _h !== void 0 ? _h : "";
        message.client_credentials_grant_access_token_lifespan = (_j = object.client_credentials_grant_access_token_lifespan) !== null && _j !== void 0 ? _j : "";
        message.client_id = (_k = object.client_id) !== null && _k !== void 0 ? _k : "";
        message.client_name = (_l = object.client_name) !== null && _l !== void 0 ? _l : "";
        message.client_secret = (_m = object.client_secret) !== null && _m !== void 0 ? _m : "";
        message.client_secret_expires_at = (_o = object.client_secret_expires_at) !== null && _o !== void 0 ? _o : 0;
        message.client_uri = (_p = object.client_uri) !== null && _p !== void 0 ? _p : "";
        message.contacts = ((_q = object.contacts) === null || _q === void 0 ? void 0 : _q.map((e) => e)) || [];
        message.created_at = (_r = object.created_at) !== null && _r !== void 0 ? _r : undefined;
        message.frontchannel_logout_session_required = (_s = object.frontchannel_logout_session_required) !== null && _s !== void 0 ? _s : false;
        message.frontchannel_logout_uri = (_t = object.frontchannel_logout_uri) !== null && _t !== void 0 ? _t : "";
        message.grant_types = ((_u = object.grant_types) === null || _u === void 0 ? void 0 : _u.map((e) => e)) || [];
        message.implicit_grant_access_token_lifespan = (_v = object.implicit_grant_access_token_lifespan) !== null && _v !== void 0 ? _v : "";
        message.implicit_grant_id_token_lifespan = (_w = object.implicit_grant_id_token_lifespan) !== null && _w !== void 0 ? _w : "";
        message.jwks = ((_x = object.jwks) === null || _x === void 0 ? void 0 : _x.map((e) => e)) || [];
        message.jwks_uri = (_y = object.jwks_uri) !== null && _y !== void 0 ? _y : "";
        message.jwt_bearer_grant_access_token_lifespan = (_z = object.jwt_bearer_grant_access_token_lifespan) !== null && _z !== void 0 ? _z : "";
        message.logo_uri = (_0 = object.logo_uri) !== null && _0 !== void 0 ? _0 : "";
        message.owner = (_1 = object.owner) !== null && _1 !== void 0 ? _1 : "";
        message.policy_uri = (_2 = object.policy_uri) !== null && _2 !== void 0 ? _2 : "";
        message.post_logout_redirect_uris = ((_3 = object.post_logout_redirect_uris) === null || _3 === void 0 ? void 0 : _3.map((e) => e)) || [];
        message.redirect_uris = ((_4 = object.redirect_uris) === null || _4 === void 0 ? void 0 : _4.map((e) => e)) || [];
        message.refresh_token_grant_access_token_lifespan = (_5 = object.refresh_token_grant_access_token_lifespan) !== null && _5 !== void 0 ? _5 : "";
        message.refresh_token_grant_id_token_lifespan = (_6 = object.refresh_token_grant_id_token_lifespan) !== null && _6 !== void 0 ? _6 : "";
        message.refresh_token_grant_refresh_token_lifespan = (_7 = object.refresh_token_grant_refresh_token_lifespan) !== null && _7 !== void 0 ? _7 : "";
        message.registration_access_token = (_8 = object.registration_access_token) !== null && _8 !== void 0 ? _8 : "";
        message.registration_client_uri = (_9 = object.registration_client_uri) !== null && _9 !== void 0 ? _9 : "";
        message.request_object_signing_alg = (_10 = object.request_object_signing_alg) !== null && _10 !== void 0 ? _10 : "";
        message.request_uris = ((_11 = object.request_uris) === null || _11 === void 0 ? void 0 : _11.map((e) => e)) || [];
        message.response_types = ((_12 = object.response_types) === null || _12 === void 0 ? void 0 : _12.map((e) => e)) || [];
        message.scope = (_13 = object.scope) !== null && _13 !== void 0 ? _13 : "";
        message.sector_identifier_uri = (_14 = object.sector_identifier_uri) !== null && _14 !== void 0 ? _14 : "";
        message.skip_consent = (_15 = object.skip_consent) !== null && _15 !== void 0 ? _15 : false;
        message.skip_logout_consent = (_16 = object.skip_logout_consent) !== null && _16 !== void 0 ? _16 : false;
        message.subject_type = (_17 = object.subject_type) !== null && _17 !== void 0 ? _17 : "";
        message.token_endpoint_auth_method = (_18 = object.token_endpoint_auth_method) !== null && _18 !== void 0 ? _18 : "";
        message.token_endpoint_auth_signing_alg = (_19 = object.token_endpoint_auth_signing_alg) !== null && _19 !== void 0 ? _19 : "";
        message.tos_uri = (_20 = object.tos_uri) !== null && _20 !== void 0 ? _20 : "";
        message.updated_at = (_21 = object.updated_at) !== null && _21 !== void 0 ? _21 : undefined;
        message.userinfo_signed_response_alg = (_22 = object.userinfo_signed_response_alg) !== null && _22 !== void 0 ? _22 : "";
        return message;
    },
};
function createBaseMezonOauthClientList() {
    return { listMezonOauthClient: [] };
}
exports.MezonOauthClientList = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.listMezonOauthClient) {
            exports.MezonOauthClient.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMezonOauthClientList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.listMezonOauthClient.push(exports.MezonOauthClient.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            listMezonOauthClient: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.listMezonOauthClient)
                ? object.listMezonOauthClient.map((e) => exports.MezonOauthClient.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.listMezonOauthClient) === null || _a === void 0 ? void 0 : _a.length) {
            obj.listMezonOauthClient = message.listMezonOauthClient.map((e) => exports.MezonOauthClient.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.MezonOauthClientList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMezonOauthClientList();
        message.listMezonOauthClient = ((_a = object.listMezonOauthClient) === null || _a === void 0 ? void 0 : _a.map((e) => exports.MezonOauthClient.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetMezonOauthClientRequest() {
    return { client_id: "", client_name: "" };
}
exports.GetMezonOauthClientRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.client_id !== "") {
            writer.uint32(10).string(message.client_id);
        }
        if (message.client_name !== "") {
            writer.uint32(18).string(message.client_name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMezonOauthClientRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.client_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.client_name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            client_id: isSet(object.client_id) ? globalThis.String(object.client_id) : "",
            client_name: isSet(object.client_name) ? globalThis.String(object.client_name) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.client_id !== "") {
            obj.client_id = message.client_id;
        }
        if (message.client_name !== "") {
            obj.client_name = message.client_name;
        }
        return obj;
    },
    create(base) {
        return exports.GetMezonOauthClientRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetMezonOauthClientRequest();
        message.client_id = (_a = object.client_id) !== null && _a !== void 0 ? _a : "";
        message.client_name = (_b = object.client_name) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseSearchThreadRequest() {
    return { clan_id: "", channel_id: "", label: "" };
}
exports.SearchThreadRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.label !== "") {
            writer.uint32(26).string(message.label);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSearchThreadRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.label = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            label: isSet(object.label) ? globalThis.String(object.label) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.label !== "") {
            obj.label = message.label;
        }
        return obj;
    },
    create(base) {
        return exports.SearchThreadRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSearchThreadRequest();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.label = (_c = object.label) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseGenerateHashChannelAppsRequest() {
    return { app_id: "" };
}
exports.GenerateHashChannelAppsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.app_id !== "") {
            writer.uint32(10).string(message.app_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenerateHashChannelAppsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.app_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { app_id: isSet(object.app_id) ? globalThis.String(object.app_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.app_id !== "") {
            obj.app_id = message.app_id;
        }
        return obj;
    },
    create(base) {
        return exports.GenerateHashChannelAppsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGenerateHashChannelAppsRequest();
        message.app_id = (_a = object.app_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGenerateHashChannelAppsResponse() {
    return { web_app_data: "" };
}
exports.GenerateHashChannelAppsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.web_app_data !== "") {
            writer.uint32(10).string(message.web_app_data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenerateHashChannelAppsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.web_app_data = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { web_app_data: isSet(object.web_app_data) ? globalThis.String(object.web_app_data) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.web_app_data !== "") {
            obj.web_app_data = message.web_app_data;
        }
        return obj;
    },
    create(base) {
        return exports.GenerateHashChannelAppsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGenerateHashChannelAppsResponse();
        message.web_app_data = (_a = object.web_app_data) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseMessage2InboxRequest() {
    return {
        message_id: "",
        channel_id: "",
        clan_id: "",
        avatar: "",
        content: "",
        mentions: "",
        attachments: "",
        reactions: "",
        references: "",
    };
}
exports.Message2InboxRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.message_id !== "") {
            writer.uint32(10).string(message.message_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(26).string(message.clan_id);
        }
        if (message.avatar !== "") {
            writer.uint32(34).string(message.avatar);
        }
        if (message.content !== "") {
            writer.uint32(42).string(message.content);
        }
        if (message.mentions !== "") {
            writer.uint32(50).string(message.mentions);
        }
        if (message.attachments !== "") {
            writer.uint32(58).string(message.attachments);
        }
        if (message.reactions !== "") {
            writer.uint32(66).string(message.reactions);
        }
        if (message.references !== "") {
            writer.uint32(74).string(message.references);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessage2InboxRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.avatar = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.mentions = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.attachments = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.reactions = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.references = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
            content: isSet(object.content) ? globalThis.String(object.content) : "",
            mentions: isSet(object.mentions) ? globalThis.String(object.mentions) : "",
            attachments: isSet(object.attachments) ? globalThis.String(object.attachments) : "",
            reactions: isSet(object.reactions) ? globalThis.String(object.reactions) : "",
            references: isSet(object.references) ? globalThis.String(object.references) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.message_id !== "") {
            obj.message_id = message.message_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.avatar !== "") {
            obj.avatar = message.avatar;
        }
        if (message.content !== "") {
            obj.content = message.content;
        }
        if (message.mentions !== "") {
            obj.mentions = message.mentions;
        }
        if (message.attachments !== "") {
            obj.attachments = message.attachments;
        }
        if (message.reactions !== "") {
            obj.reactions = message.reactions;
        }
        if (message.references !== "") {
            obj.references = message.references;
        }
        return obj;
    },
    create(base) {
        return exports.Message2InboxRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseMessage2InboxRequest();
        message.message_id = (_a = object.message_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : "";
        message.avatar = (_d = object.avatar) !== null && _d !== void 0 ? _d : "";
        message.content = (_e = object.content) !== null && _e !== void 0 ? _e : "";
        message.mentions = (_f = object.mentions) !== null && _f !== void 0 ? _f : "";
        message.attachments = (_g = object.attachments) !== null && _g !== void 0 ? _g : "";
        message.reactions = (_h = object.reactions) !== null && _h !== void 0 ? _h : "";
        message.references = (_j = object.references) !== null && _j !== void 0 ? _j : "";
        return message;
    },
};
function createBaseAccountEmail() {
    return { email: "", password: "", vars: {} };
}
exports.AccountEmail = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.email !== "") {
            writer.uint32(10).string(message.email);
        }
        if (message.password !== "") {
            writer.uint32(18).string(message.password);
        }
        Object.entries(message.vars).forEach(([key, value]) => {
            exports.AccountEmail_VarsEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccountEmail();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = exports.AccountEmail_VarsEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.vars[entry3.key] = entry3.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            vars: isObject(object.vars)
                ? Object.entries(object.vars).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.vars) {
            const entries = Object.entries(message.vars);
            if (entries.length > 0) {
                obj.vars = {};
                entries.forEach(([k, v]) => {
                    obj.vars[k] = v;
                });
            }
        }
        return obj;
    },
    create(base) {
        return exports.AccountEmail.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseAccountEmail();
        message.email = (_a = object.email) !== null && _a !== void 0 ? _a : "";
        message.password = (_b = object.password) !== null && _b !== void 0 ? _b : "";
        message.vars = Object.entries((_c = object.vars) !== null && _c !== void 0 ? _c : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseAccountEmail_VarsEntry() {
    return { key: "", value: "" };
}
exports.AccountEmail_VarsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccountEmail_VarsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.AccountEmail_VarsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAccountEmail_VarsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseAccountMezon() {
    return { token: "", vars: {} };
}
exports.AccountMezon = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        Object.entries(message.vars).forEach(([key, value]) => {
            exports.AccountMezon_VarsEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccountMezon();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.AccountMezon_VarsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.vars[entry2.key] = entry2.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            token: isSet(object.token) ? globalThis.String(object.token) : "",
            vars: isObject(object.vars)
                ? Object.entries(object.vars).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.token !== "") {
            obj.token = message.token;
        }
        if (message.vars) {
            const entries = Object.entries(message.vars);
            if (entries.length > 0) {
                obj.vars = {};
                entries.forEach(([k, v]) => {
                    obj.vars[k] = v;
                });
            }
        }
        return obj;
    },
    create(base) {
        return exports.AccountMezon.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAccountMezon();
        message.token = (_a = object.token) !== null && _a !== void 0 ? _a : "";
        message.vars = Object.entries((_b = object.vars) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseAccountMezon_VarsEntry() {
    return { key: "", value: "" };
}
exports.AccountMezon_VarsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccountMezon_VarsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.AccountMezon_VarsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAccountMezon_VarsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function longToNumber(long) {
    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=api.js.map