import { Events } from "../constants/enum";
import { ApiMessageAttachment, ApiMessageMention, ApiMessageRef, ChannelMessageContent, Client, TokenSentEvent } from "../interfaces";
export declare class MezonClient implements Client {
    readonly apiKey: string;
    readonly host: string;
    readonly port: string;
    readonly useSSL: boolean;
    readonly timeout: number;
    private readonly apiClient;
    private socketManager;
    private messageManager;
    private channelManager;
    private sessionManager;
    private eventManager;
    constructor(apiKey?: string, host?: string, port?: string, useSSL?: boolean, timeout?: number);
    authenticate(): Promise<string>;
    on(event: Events, func: Function, context?: any): void;
    remove(event: string, func: Function): void;
    closeSocket(): void;
    logout(): Promise<boolean>;
    /** Send message in channel/thread */
    sendMessage(clan_id: string, channel_id: string, mode: number, is_public: boolean, msg: ChannelMessageContent, mentions?: Array<ApiMessageMention>, attachments?: Array<ApiMessageAttachment>, ref?: Array<ApiMessageRef>, anonymous_message?: boolean, mention_everyone?: boolean, avatar?: string, code?: number, topic_id?: string): Promise<import("../interfaces").ChannelMessageAck>;
    /** Send DM message */
    sendDMChannelMessage(channelDmId: string, msg: string, messOptions?: {
        [x: string]: any;
    }, attachments?: Array<any>, refs?: Array<any>, code?: number): Promise<import("../interfaces").ChannelMessageAck>;
    /** Update message */
    updateChatMessage(clan_id: string, channel_id: string, mode: number, is_public: boolean, message_id: string, content: any, mentions?: Array<ApiMessageMention>, attachments?: Array<ApiMessageAttachment>, hideEditted?: boolean): Promise<import("../interfaces").ChannelMessageAck>;
    /** Create DM channel */
    createDMchannel(userId: string): Promise<import("../interfaces").ApiChannelDescription | null>;
    /** List current user in channel voice */
    listChannelVoiceUsers(clanId: string, channelId: string, channelType: number, limit?: number, state?: number, cursor?: string): Promise<import("../interfaces").ApiVoiceChannelUserList>;
    /** Send token to user */
    sendToken(sendTokenData: TokenSentEvent): Promise<any>;
    /** React message */
    reactionMessage(id: string, clan_id: string, channel_id: string, mode: number, is_public: boolean, message_id: string, emoji_id: string, emoji: string, count: number, message_sender_id: string, action_delete: boolean): Promise<import("../interfaces").ApiMessageReaction>;
}
