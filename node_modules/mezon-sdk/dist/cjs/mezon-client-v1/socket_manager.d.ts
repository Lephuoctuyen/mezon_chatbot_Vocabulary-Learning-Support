import { WebSocketAdapter } from "../web_socket_adapter";
import { Session } from "../session";
import { Socket } from "../interfaces";
import { SessionManager } from "./session_manager";
import { MezonApi } from "../api";
import { ErrorEvent, CloseEvent } from "ws";
import { EventManager } from "./event_manager";
export declare class SocketManager {
    private host;
    private port;
    private useSSL;
    private adapter;
    private sessionManager;
    private apiClient;
    private apiKey;
    private eventManager;
    [key: string]: any;
    private socket;
    private isHardDisconnect;
    constructor(host: string, port: string, useSSL: boolean, adapter: WebSocketAdapter, sessionManager: SessionManager, apiClient: MezonApi, apiKey: string, eventManager: EventManager);
    createSocket(): void;
    getSocket(): Socket;
    connect(sockSession: Session): Promise<Session>;
    closeSocket(): void;
    isOpen(): boolean;
    onerror(evt: ErrorEvent): Promise<void>;
    onheartbeattimeout(): void;
    ondisconnect(e: CloseEvent): void;
    connectSocket(sessionToken: string): Promise<void>;
    retriesConnect(): Promise<void>;
}
