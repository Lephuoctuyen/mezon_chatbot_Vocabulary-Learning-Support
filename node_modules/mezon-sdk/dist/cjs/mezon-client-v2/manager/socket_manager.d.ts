import { ErrorEvent, CloseEvent } from "ws";
import { MezonApi } from "../../api";
import { WebSocketAdapter } from "../../web_socket_adapter";
import { SessionManager } from "./session_manager";
import { Socket } from "../../interfaces/socket";
import { Session } from "../../session";
import { EventManager } from "./event_manager";
import { MezonClient } from "../client/MezonClient";
import { ReactMessageData, RemoveMessageData, ReplyMessageData, UpdateMessageData } from "../../interfaces";
import { AsyncThrottleQueue } from "../utils/AsyncThrottleQueue";
export declare class SocketManager {
    private host;
    private port;
    private useSSL;
    private adapter;
    private sessionManager;
    private apiClient;
    private apiKey;
    private eventManager;
    private messageQueue;
    private client;
    [key: string]: any;
    private socket;
    private isHardDisconnect;
    constructor(host: string, port: string, useSSL: boolean, adapter: WebSocketAdapter, sessionManager: SessionManager, apiClient: MezonApi, apiKey: string, eventManager: EventManager, messageQueue: AsyncThrottleQueue, client: MezonClient);
    createSocket(): void;
    getSocket(): Socket;
    connect(sockSession: Session): Promise<Session>;
    closeSocket(): void;
    isOpen(): boolean;
    onerror(evt: ErrorEvent): Promise<void>;
    onheartbeattimeout(): void;
    ondisconnect(e: CloseEvent): void;
    connectSocket(sessionToken: string): Promise<void>;
    retriesConnect(): Promise<void>;
    writeChatMessage(dataWriteMessage: ReplyMessageData): Promise<import("../../interfaces").ChannelMessageAck>;
    updateChatMessage(dataUpdateMessage: UpdateMessageData): Promise<import("../../interfaces").ChannelMessageAck>;
    writeMessageReaction(dataReactionMessage: ReactMessageData): Promise<import("../../interfaces").ApiMessageReaction>;
    removeChatMessage(dataRemoveMessage: RemoveMessageData): Promise<import("../../interfaces").ChannelMessageAck>;
}
