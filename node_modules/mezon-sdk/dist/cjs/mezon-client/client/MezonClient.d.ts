/// <reference types="node" />
import { EventEmitter } from "events";
import { CacheManager } from "../utils/CacheManager";
import { Clan } from "../structures/Clan";
import { TextChannel } from "../structures/TextChannel";
import { AddClanUserEvent, ChannelCreatedEvent, ChannelDeletedEvent, ChannelMessage, ChannelUpdatedEvent, DropdownBoxSelected, GiveCoffeeEvent, MessageReaction, StreamingJoinedEvent, StreamingLeavedEvent, TokenSentEvent, UserChannelAddedEvent, UserChannelRemoved, UserClanRemovedEvent, VoiceEndedEvent, VoiceJoinedEvent, VoiceLeavedEvent, VoiceStartedEvent } from "../../interfaces";
import { MessageButtonClicked, Notifications, RoleAssignedEvent, RoleEvent, WebrtcSignalingFwd } from "../../rtapi/realtime";
import { CreateEventRequest } from "../../api/api";
import { Session } from "../../session";
export declare class MezonClient extends EventEmitter {
    readonly timeout: number;
    token: string;
    clientId: string | undefined;
    host: string;
    useSSL: boolean;
    port: string;
    loginBasePath: string | undefined;
    private apiClient;
    private socketManager;
    private channelManager;
    private sessionManager;
    private eventManager;
    private messageQueue;
    clans: CacheManager<string, Clan>;
    channels: CacheManager<string, TextChannel>;
    private messageDB;
    constructor(token?: string, host?: string, port?: string, useSSL?: boolean, timeout?: number);
    initManager(basePath: string, sessionApi?: Session): void;
    /** Login bot */
    login(): Promise<string>;
    /** Create DM channel */
    createDMchannel(userId: string): Promise<any>;
    sendToken(sendTokenData: TokenSentEvent): Promise<any>;
    /** Listen to messages user sends on the  channel, thread */
    onChannelMessage(listener: (e: ChannelMessage) => void): Promise<this>;
    /** Listen to channel created */
    onChannelCreated(listener: (e: ChannelCreatedEvent) => void): this;
    /** Listen to channel updated */
    onChannelUpdated(listener: (e: ChannelUpdatedEvent) => void): this;
    /** Listen to channel deleted */
    onChannelDeleted(listener: (e: ChannelDeletedEvent) => void): this;
    /** Listen to user send token to each other */
    onTokenSend(listener: (e: TokenSentEvent) => void): this;
    /** Listen to user react to messages on the channel, thread */
    onMessageReaction(listener: (e: MessageReaction) => void): this;
    /** Listen to user react to messages on the channel, thread */
    onUserChannelRemoved(listener: (e: UserChannelRemoved) => void): this;
    /** Listen to user leaved/removed in the channel */
    onUserClanRemoved(listener: (e: UserClanRemovedEvent) => void): this;
    /** Listen to user added in the channel */
    onUserChannelAdded(listener: (e: UserChannelAddedEvent) => void): this;
    /** Listen to users give coffee to each other */
    onGiveCoffee(listener: (e: GiveCoffeeEvent) => void): this;
    /** Listen to clan create new role */
    onRoleEvent(listener: (e: RoleEvent) => void): this;
    /** Listen to assigning a role to user */
    onRoleAssign(listener: (e: RoleAssignedEvent) => void): this;
    onNotification(listener: (e: Notifications) => void): this;
    /** Listen to user added in CLAN */
    onAddClanUser(listener: (e: AddClanUserEvent) => void): this;
    /** Listen to clan create a new event */
    onClanEventCreated(listener: (e: CreateEventRequest) => void): this;
    /** Listen to user lick a button on embed message */
    onMessageButtonClicked(listener: (e: MessageButtonClicked) => void): this;
    /** Listen to user joined a stream room */
    onStreamingJoinedEvent(listener: (e: StreamingJoinedEvent) => void): this;
    /** Listen to user leaved a stream room */
    onStreamingLeavedEvent(listener: (e: StreamingLeavedEvent) => void): this;
    /** Listen to user selected a input dropdown */
    onDropdownBoxSelected(listener: (e: DropdownBoxSelected) => void): this;
    /** Listen to user accepted call 1-1 */
    onWebrtcSignalingFwd(listener: (e: WebrtcSignalingFwd) => void): this;
    onVoiceStartedEvent(listener: (e: VoiceStartedEvent) => void): this;
    onVoiceEndedEvent(listener: (e: VoiceEndedEvent) => void): this;
    onVoiceJoinedEvent(listener: (e: VoiceJoinedEvent) => void): this;
    onVoiceLeavedEvent(listener: (e: VoiceLeavedEvent) => void): this;
    closeSocket(): void;
    getListFriends(limit?: number, state?: string, cursor?: string): Promise<any>;
    acceptFriend(userId: string, username: string): Promise<any>;
    addFriend(username: string): Promise<any>;
    private _fetchClanFromAPI;
    private _fetchChannelFromAPI;
    private _initChannelMessageCache;
    private _initUserClanCache;
    _updateCacheChannel(e: ChannelCreatedEvent | ChannelUpdatedEvent): void;
}
