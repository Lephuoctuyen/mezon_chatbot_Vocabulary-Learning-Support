"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Message = void 0;
const helper_1 = require("../../utils/helper");
class Message {
    constructor(initMessageData, channel, socketManager, messageQueue) {
        this.id = initMessageData.id;
        this.sender_id = initMessageData.sender_id;
        this.content = initMessageData.content;
        this.references = initMessageData === null || initMessageData === void 0 ? void 0 : initMessageData.references;
        this.mentions = initMessageData === null || initMessageData === void 0 ? void 0 : initMessageData.mentions;
        this.attachments = initMessageData === null || initMessageData === void 0 ? void 0 : initMessageData.attachments;
        this.reactions = initMessageData === null || initMessageData === void 0 ? void 0 : initMessageData.reactions;
        this.references = initMessageData === null || initMessageData === void 0 ? void 0 : initMessageData.references;
        this.topic_id = initMessageData === null || initMessageData === void 0 ? void 0 : initMessageData.topic_id;
        this.create_time_seconds = initMessageData === null || initMessageData === void 0 ? void 0 : initMessageData.create_time_seconds;
        this.channel = channel;
        this.socketManager = socketManager;
        this.messageQueue = messageQueue;
    }
    async reply(content, mentions, attachments, mention_everyone, anonymous_message, topic_id, code) {
        return await this.messageQueue.enqueue(async () => {
            const user = await this.channel.clan.users.fetch(this.sender_id);
            const references = [
                {
                    message_ref_id: this.id,
                    message_sender_id: this.sender_id,
                    message_sender_username: user.clan_nick || user.display_name || user.username,
                    mesages_sender_avatar: user.clan_avatar || user.avartar,
                    content: JSON.stringify(this.content),
                },
            ];
            const dataReply = {
                clan_id: this.channel.clan.id,
                mode: (0, helper_1.convertChanneltypeToChannelMode)(this.channel.channel_type),
                is_public: !this.channel.is_private,
                channel_id: this.channel.id,
                content,
                mentions,
                attachments,
                references,
                anonymous_message,
                mention_everyone,
                code,
                topic_id: topic_id || this.topic_id,
            };
            return await this.socketManager.writeChatMessage(dataReply);
        });
    }
    async update(content, topic_id) {
        return await this.messageQueue.enqueue(() => {
            const dataUpdate = {
                clan_id: this.channel.clan.id,
                channel_id: this.channel.id,
                mode: (0, helper_1.convertChanneltypeToChannelMode)(this.channel.channel_type),
                is_public: !this.channel.is_private,
                message_id: this.id,
                content,
                topic_id: topic_id || this.topic_id,
            };
            return this.socketManager.updateChatMessage(dataUpdate);
        });
    }
    async react(dataReactMessage) {
        return await this.messageQueue.enqueue(() => {
            var _a, _b;
            const dataReact = {
                id: (_a = dataReactMessage === null || dataReactMessage === void 0 ? void 0 : dataReactMessage.id) !== null && _a !== void 0 ? _a : "",
                clan_id: this.channel.clan.id,
                channel_id: this.channel.id,
                mode: (0, helper_1.convertChanneltypeToChannelMode)(this.channel.channel_type),
                is_public: !this.channel.is_private,
                message_id: this.id,
                emoji_id: dataReactMessage.emoji_id,
                emoji: dataReactMessage.emoji,
                count: dataReactMessage.count,
                message_sender_id: this.sender_id,
                action_delete: (_b = dataReactMessage === null || dataReactMessage === void 0 ? void 0 : dataReactMessage.action_delete) !== null && _b !== void 0 ? _b : false,
            };
            return this.socketManager.writeMessageReaction(dataReact);
        });
    }
    async delete() {
        return await this.messageQueue.enqueue(() => {
            const dataRemove = {
                clan_id: this.channel.clan.id,
                channel_id: this.channel.id,
                mode: (0, helper_1.convertChanneltypeToChannelMode)(this.channel.channel_type),
                is_public: !this.channel.is_private,
                message_id: this.id,
            };
            return this.socketManager.removeChatMessage(dataRemove);
        });
    }
}
exports.Message = Message;
//# sourceMappingURL=Message.js.map