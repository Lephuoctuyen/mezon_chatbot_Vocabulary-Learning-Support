export default class Collection<K, V> extends Map<K, V> {
    constructor(entries?: readonly (readonly [K, V])[] | null);
    get size(): number;
    set(key: K, value: V): this;
    delete(key: K): boolean;
    has(key: K): boolean;
    get(key: K): V | undefined;
    first(): V | undefined;
    firstKey(): K | undefined;
    last(): V | undefined;
    filter(fn: (value: V, key: K, collection: this) => boolean): Collection<K, V>;
    find(fn: (value: V, key: K, collection: this) => boolean): V | undefined;
    map<T>(fn: (value: V, key: K, collection: this) => T): T[];
    some(fn: (value: V, key: K, collection: this) => boolean): boolean;
    every(fn: (value: V, key: K, collection: this) => boolean): boolean;
    reduce<T>(fn: (acc: T, val: V, key: K, col: this) => T, initialValue: T): T;
    random(): V | undefined;
    sort(compareFn?: (a: V, b: V) => number): Collection<K, V>;
    clear(): void;
    keysArray(): K[];
    valuesArray(): V[];
    entriesArray(): [K, V][];
}
