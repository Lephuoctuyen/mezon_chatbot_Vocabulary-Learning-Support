"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.2
// source: rtapi/realtime.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelCreatedEvent = exports.StreamingEndedEvent = exports.StreamingStartedEvent = exports.StreamingJoinedEvent = exports.StreamingLeavedEvent = exports.VoiceEndedEvent = exports.VoiceStartedEvent = exports.VoiceJoinedEvent = exports.VoiceLeavedEvent = exports.MessageTypingEvent = exports.LastSeenMessageEvent = exports.LastPinMessageEvent = exports.StatusPresenceEvent = exports.StatusFollow = exports.Status = exports.Pong = exports.Ping = exports.BlockFriend = exports.RemoveFriend = exports.Notifications = exports.Error_ContextEntry = exports.Error = exports.ChannelPresenceEvent = exports.ChannelMessageRemove = exports.ChannelMessageUpdate = exports.ChannelMessageSend = exports.MarkAsRead = exports.VoiceReactionSend = exports.EphemeralMessageSend = exports.ChannelMessageAck = exports.ChannelLeave = exports.ChannelJoin = exports.ClanJoin = exports.Channel = exports.ClanEmoji = exports.ChannelDescription = exports.HashtagDm = exports.PermissionRoleChannel = exports.RoleAssignedEvent = exports.AddClanUserEvent = exports.SFUSignalingFwd = exports.WebrtcSignalingFwd = exports.IncomingCallPush = exports.ChannelCanvas = exports.FollowEvent = exports.Envelope = exports.error_CodeToJSON = exports.error_CodeFromJSON = exports.Error_Code = exports.protobufPackage = void 0;
exports.DeleteAccountEvent = exports.HandleParticipantMeetStateEvent = exports.UnpinMessageEvent = exports.JoinChannelAppData = exports.UserStatusEvent = exports.ChannelAppEvent = exports.SdTopicEvent = exports.DropdownBoxSelected = exports.ListActivity = exports.UnmuteEvent = exports.MessageButtonClicked = exports.PermissionChangedEvent = exports.PermissionSetEvent = exports.EventEmoji = exports.NotificationChannelCategorySetting = exports.CheckNameExistedEvent = exports.FCMTokens = exports.UserProfileRedis = exports.UserProfileUpdatedEvent = exports.ClanProfileUpdatedEvent = exports.ClanUpdatedEvent = exports.UserClanRemoved = exports.UserChannelRemoved = exports.UserChannelAdded = exports.CustomStatusEvent = exports.UserPresence = exports.StreamPresenceEvent = exports.StreamData = exports.Stream = exports.StatusUpdate = exports.StatusUnfollow = exports.ChannelUpdatedEvent = exports.StickerDeleteEvent = exports.StickerUpdateEvent = exports.StickerCreateEvent = exports.ClanDeletedEvent = exports.ChannelDeletedEvent = exports.RoleEvent = exports.CategoryEvent = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const api_1 = require("../api/api");
const timestamp_1 = require("../google/protobuf/timestamp");
const wrappers_1 = require("../google/protobuf/wrappers");
exports.protobufPackage = "mezon.realtime";
/** The selection of possible error codes. */
var Error_Code;
(function (Error_Code) {
    /** RUNTIME_EXCEPTION - An unexpected result from the server. */
    Error_Code[Error_Code["RUNTIME_EXCEPTION"] = 0] = "RUNTIME_EXCEPTION";
    /** UNRECOGNIZED_PAYLOAD - The server received a message which is not recognised. */
    Error_Code[Error_Code["UNRECOGNIZED_PAYLOAD"] = 1] = "UNRECOGNIZED_PAYLOAD";
    /** MISSING_PAYLOAD - A message was expected but contains no content. */
    Error_Code[Error_Code["MISSING_PAYLOAD"] = 2] = "MISSING_PAYLOAD";
    /** BAD_INPUT - Fields in the message have an invalid format. */
    Error_Code[Error_Code["BAD_INPUT"] = 3] = "BAD_INPUT";
    /** MATCH_NOT_FOUND - The match id was not found. */
    Error_Code[Error_Code["MATCH_NOT_FOUND"] = 4] = "MATCH_NOT_FOUND";
    /** MATCH_JOIN_REJECTED - The match join was rejected. */
    Error_Code[Error_Code["MATCH_JOIN_REJECTED"] = 5] = "MATCH_JOIN_REJECTED";
    /** RUNTIME_FUNCTION_NOT_FOUND - The runtime function does not exist on the server. */
    Error_Code[Error_Code["RUNTIME_FUNCTION_NOT_FOUND"] = 6] = "RUNTIME_FUNCTION_NOT_FOUND";
    /** RUNTIME_FUNCTION_EXCEPTION - The runtime function executed with an error. */
    Error_Code[Error_Code["RUNTIME_FUNCTION_EXCEPTION"] = 7] = "RUNTIME_FUNCTION_EXCEPTION";
    Error_Code[Error_Code["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Error_Code = exports.Error_Code || (exports.Error_Code = {}));
function error_CodeFromJSON(object) {
    switch (object) {
        case 0:
        case "RUNTIME_EXCEPTION":
            return Error_Code.RUNTIME_EXCEPTION;
        case 1:
        case "UNRECOGNIZED_PAYLOAD":
            return Error_Code.UNRECOGNIZED_PAYLOAD;
        case 2:
        case "MISSING_PAYLOAD":
            return Error_Code.MISSING_PAYLOAD;
        case 3:
        case "BAD_INPUT":
            return Error_Code.BAD_INPUT;
        case 4:
        case "MATCH_NOT_FOUND":
            return Error_Code.MATCH_NOT_FOUND;
        case 5:
        case "MATCH_JOIN_REJECTED":
            return Error_Code.MATCH_JOIN_REJECTED;
        case 6:
        case "RUNTIME_FUNCTION_NOT_FOUND":
            return Error_Code.RUNTIME_FUNCTION_NOT_FOUND;
        case 7:
        case "RUNTIME_FUNCTION_EXCEPTION":
            return Error_Code.RUNTIME_FUNCTION_EXCEPTION;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Error_Code.UNRECOGNIZED;
    }
}
exports.error_CodeFromJSON = error_CodeFromJSON;
function error_CodeToJSON(object) {
    switch (object) {
        case Error_Code.RUNTIME_EXCEPTION:
            return "RUNTIME_EXCEPTION";
        case Error_Code.UNRECOGNIZED_PAYLOAD:
            return "UNRECOGNIZED_PAYLOAD";
        case Error_Code.MISSING_PAYLOAD:
            return "MISSING_PAYLOAD";
        case Error_Code.BAD_INPUT:
            return "BAD_INPUT";
        case Error_Code.MATCH_NOT_FOUND:
            return "MATCH_NOT_FOUND";
        case Error_Code.MATCH_JOIN_REJECTED:
            return "MATCH_JOIN_REJECTED";
        case Error_Code.RUNTIME_FUNCTION_NOT_FOUND:
            return "RUNTIME_FUNCTION_NOT_FOUND";
        case Error_Code.RUNTIME_FUNCTION_EXCEPTION:
            return "RUNTIME_FUNCTION_EXCEPTION";
        case Error_Code.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.error_CodeToJSON = error_CodeToJSON;
function createBaseEnvelope() {
    return {
        cid: "",
        channel: undefined,
        clan_join: undefined,
        channel_join: undefined,
        channel_leave: undefined,
        channel_message: undefined,
        channel_message_ack: undefined,
        channel_message_send: undefined,
        channel_message_update: undefined,
        channel_message_remove: undefined,
        channel_presence_event: undefined,
        error: undefined,
        notifications: undefined,
        rpc: undefined,
        status: undefined,
        status_follow: undefined,
        status_presence_event: undefined,
        status_unfollow: undefined,
        status_update: undefined,
        stream_data: undefined,
        stream_presence_event: undefined,
        ping: undefined,
        pong: undefined,
        message_typing_event: undefined,
        last_seen_message_event: undefined,
        message_reaction_event: undefined,
        voice_joined_event: undefined,
        voice_leaved_event: undefined,
        voice_started_event: undefined,
        voice_ended_event: undefined,
        channel_created_event: undefined,
        channel_deleted_event: undefined,
        channel_updated_event: undefined,
        last_pin_message_event: undefined,
        custom_status_event: undefined,
        user_channel_added_event: undefined,
        user_channel_removed_event: undefined,
        user_clan_removed_event: undefined,
        clan_updated_event: undefined,
        clan_profile_updated_event: undefined,
        check_name_existed_event: undefined,
        user_profile_updated_event: undefined,
        add_clan_user_event: undefined,
        clan_event_created: undefined,
        role_assign_event: undefined,
        clan_deleted_event: undefined,
        give_coffee_event: undefined,
        sticker_create_event: undefined,
        sticker_update_event: undefined,
        sticker_delete_event: undefined,
        role_event: undefined,
        event_emoji: undefined,
        streaming_joined_event: undefined,
        streaming_leaved_event: undefined,
        streaming_started_event: undefined,
        streaming_ended_event: undefined,
        permission_set_event: undefined,
        permission_changed_event: undefined,
        token_sent_event: undefined,
        message_button_clicked: undefined,
        unmute_event: undefined,
        webrtc_signaling_fwd: undefined,
        list_activity: undefined,
        dropdown_box_selected: undefined,
        incoming_call_push: undefined,
        sd_topic_event: undefined,
        follow_event: undefined,
        channel_app_event: undefined,
        user_status_event: undefined,
        remove_friend: undefined,
        webhook_event: undefined,
        noti_user_channel: undefined,
        join_channel_app_data: undefined,
        canvas_event: undefined,
        unpin_message_event: undefined,
        category_event: undefined,
        handle_participant_meet_state_event: undefined,
        delete_account_event: undefined,
        ephemeral_message_send: undefined,
        block_friend: undefined,
        voice_reaction_send: undefined,
        mark_as_read: undefined,
    };
}
exports.Envelope = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.cid !== "") {
            writer.uint32(10).string(message.cid);
        }
        if (message.channel !== undefined) {
            exports.Channel.encode(message.channel, writer.uint32(18).fork()).ldelim();
        }
        if (message.clan_join !== undefined) {
            exports.ClanJoin.encode(message.clan_join, writer.uint32(26).fork()).ldelim();
        }
        if (message.channel_join !== undefined) {
            exports.ChannelJoin.encode(message.channel_join, writer.uint32(34).fork()).ldelim();
        }
        if (message.channel_leave !== undefined) {
            exports.ChannelLeave.encode(message.channel_leave, writer.uint32(42).fork()).ldelim();
        }
        if (message.channel_message !== undefined) {
            api_1.ChannelMessage.encode(message.channel_message, writer.uint32(50).fork()).ldelim();
        }
        if (message.channel_message_ack !== undefined) {
            exports.ChannelMessageAck.encode(message.channel_message_ack, writer.uint32(58).fork()).ldelim();
        }
        if (message.channel_message_send !== undefined) {
            exports.ChannelMessageSend.encode(message.channel_message_send, writer.uint32(66).fork()).ldelim();
        }
        if (message.channel_message_update !== undefined) {
            exports.ChannelMessageUpdate.encode(message.channel_message_update, writer.uint32(74).fork()).ldelim();
        }
        if (message.channel_message_remove !== undefined) {
            exports.ChannelMessageRemove.encode(message.channel_message_remove, writer.uint32(82).fork()).ldelim();
        }
        if (message.channel_presence_event !== undefined) {
            exports.ChannelPresenceEvent.encode(message.channel_presence_event, writer.uint32(90).fork()).ldelim();
        }
        if (message.error !== undefined) {
            exports.Error.encode(message.error, writer.uint32(98).fork()).ldelim();
        }
        if (message.notifications !== undefined) {
            exports.Notifications.encode(message.notifications, writer.uint32(106).fork()).ldelim();
        }
        if (message.rpc !== undefined) {
            api_1.Rpc.encode(message.rpc, writer.uint32(114).fork()).ldelim();
        }
        if (message.status !== undefined) {
            exports.Status.encode(message.status, writer.uint32(122).fork()).ldelim();
        }
        if (message.status_follow !== undefined) {
            exports.StatusFollow.encode(message.status_follow, writer.uint32(130).fork()).ldelim();
        }
        if (message.status_presence_event !== undefined) {
            exports.StatusPresenceEvent.encode(message.status_presence_event, writer.uint32(138).fork()).ldelim();
        }
        if (message.status_unfollow !== undefined) {
            exports.StatusUnfollow.encode(message.status_unfollow, writer.uint32(146).fork()).ldelim();
        }
        if (message.status_update !== undefined) {
            exports.StatusUpdate.encode(message.status_update, writer.uint32(154).fork()).ldelim();
        }
        if (message.stream_data !== undefined) {
            exports.StreamData.encode(message.stream_data, writer.uint32(162).fork()).ldelim();
        }
        if (message.stream_presence_event !== undefined) {
            exports.StreamPresenceEvent.encode(message.stream_presence_event, writer.uint32(170).fork()).ldelim();
        }
        if (message.ping !== undefined) {
            exports.Ping.encode(message.ping, writer.uint32(178).fork()).ldelim();
        }
        if (message.pong !== undefined) {
            exports.Pong.encode(message.pong, writer.uint32(186).fork()).ldelim();
        }
        if (message.message_typing_event !== undefined) {
            exports.MessageTypingEvent.encode(message.message_typing_event, writer.uint32(194).fork()).ldelim();
        }
        if (message.last_seen_message_event !== undefined) {
            exports.LastSeenMessageEvent.encode(message.last_seen_message_event, writer.uint32(202).fork()).ldelim();
        }
        if (message.message_reaction_event !== undefined) {
            api_1.MessageReaction.encode(message.message_reaction_event, writer.uint32(210).fork()).ldelim();
        }
        if (message.voice_joined_event !== undefined) {
            exports.VoiceJoinedEvent.encode(message.voice_joined_event, writer.uint32(218).fork()).ldelim();
        }
        if (message.voice_leaved_event !== undefined) {
            exports.VoiceLeavedEvent.encode(message.voice_leaved_event, writer.uint32(226).fork()).ldelim();
        }
        if (message.voice_started_event !== undefined) {
            exports.VoiceStartedEvent.encode(message.voice_started_event, writer.uint32(234).fork()).ldelim();
        }
        if (message.voice_ended_event !== undefined) {
            exports.VoiceEndedEvent.encode(message.voice_ended_event, writer.uint32(242).fork()).ldelim();
        }
        if (message.channel_created_event !== undefined) {
            exports.ChannelCreatedEvent.encode(message.channel_created_event, writer.uint32(250).fork()).ldelim();
        }
        if (message.channel_deleted_event !== undefined) {
            exports.ChannelDeletedEvent.encode(message.channel_deleted_event, writer.uint32(258).fork()).ldelim();
        }
        if (message.channel_updated_event !== undefined) {
            exports.ChannelUpdatedEvent.encode(message.channel_updated_event, writer.uint32(266).fork()).ldelim();
        }
        if (message.last_pin_message_event !== undefined) {
            exports.LastPinMessageEvent.encode(message.last_pin_message_event, writer.uint32(274).fork()).ldelim();
        }
        if (message.custom_status_event !== undefined) {
            exports.CustomStatusEvent.encode(message.custom_status_event, writer.uint32(282).fork()).ldelim();
        }
        if (message.user_channel_added_event !== undefined) {
            exports.UserChannelAdded.encode(message.user_channel_added_event, writer.uint32(290).fork()).ldelim();
        }
        if (message.user_channel_removed_event !== undefined) {
            exports.UserChannelRemoved.encode(message.user_channel_removed_event, writer.uint32(298).fork()).ldelim();
        }
        if (message.user_clan_removed_event !== undefined) {
            exports.UserClanRemoved.encode(message.user_clan_removed_event, writer.uint32(306).fork()).ldelim();
        }
        if (message.clan_updated_event !== undefined) {
            exports.ClanUpdatedEvent.encode(message.clan_updated_event, writer.uint32(314).fork()).ldelim();
        }
        if (message.clan_profile_updated_event !== undefined) {
            exports.ClanProfileUpdatedEvent.encode(message.clan_profile_updated_event, writer.uint32(322).fork()).ldelim();
        }
        if (message.check_name_existed_event !== undefined) {
            exports.CheckNameExistedEvent.encode(message.check_name_existed_event, writer.uint32(330).fork()).ldelim();
        }
        if (message.user_profile_updated_event !== undefined) {
            exports.UserProfileUpdatedEvent.encode(message.user_profile_updated_event, writer.uint32(338).fork()).ldelim();
        }
        if (message.add_clan_user_event !== undefined) {
            exports.AddClanUserEvent.encode(message.add_clan_user_event, writer.uint32(346).fork()).ldelim();
        }
        if (message.clan_event_created !== undefined) {
            api_1.CreateEventRequest.encode(message.clan_event_created, writer.uint32(354).fork()).ldelim();
        }
        if (message.role_assign_event !== undefined) {
            exports.RoleAssignedEvent.encode(message.role_assign_event, writer.uint32(362).fork()).ldelim();
        }
        if (message.clan_deleted_event !== undefined) {
            exports.ClanDeletedEvent.encode(message.clan_deleted_event, writer.uint32(370).fork()).ldelim();
        }
        if (message.give_coffee_event !== undefined) {
            api_1.GiveCoffeeEvent.encode(message.give_coffee_event, writer.uint32(378).fork()).ldelim();
        }
        if (message.sticker_create_event !== undefined) {
            exports.StickerCreateEvent.encode(message.sticker_create_event, writer.uint32(386).fork()).ldelim();
        }
        if (message.sticker_update_event !== undefined) {
            exports.StickerUpdateEvent.encode(message.sticker_update_event, writer.uint32(394).fork()).ldelim();
        }
        if (message.sticker_delete_event !== undefined) {
            exports.StickerDeleteEvent.encode(message.sticker_delete_event, writer.uint32(402).fork()).ldelim();
        }
        if (message.role_event !== undefined) {
            exports.RoleEvent.encode(message.role_event, writer.uint32(410).fork()).ldelim();
        }
        if (message.event_emoji !== undefined) {
            exports.EventEmoji.encode(message.event_emoji, writer.uint32(418).fork()).ldelim();
        }
        if (message.streaming_joined_event !== undefined) {
            exports.StreamingJoinedEvent.encode(message.streaming_joined_event, writer.uint32(426).fork()).ldelim();
        }
        if (message.streaming_leaved_event !== undefined) {
            exports.StreamingLeavedEvent.encode(message.streaming_leaved_event, writer.uint32(434).fork()).ldelim();
        }
        if (message.streaming_started_event !== undefined) {
            exports.StreamingStartedEvent.encode(message.streaming_started_event, writer.uint32(442).fork()).ldelim();
        }
        if (message.streaming_ended_event !== undefined) {
            exports.StreamingEndedEvent.encode(message.streaming_ended_event, writer.uint32(450).fork()).ldelim();
        }
        if (message.permission_set_event !== undefined) {
            exports.PermissionSetEvent.encode(message.permission_set_event, writer.uint32(458).fork()).ldelim();
        }
        if (message.permission_changed_event !== undefined) {
            exports.PermissionChangedEvent.encode(message.permission_changed_event, writer.uint32(466).fork()).ldelim();
        }
        if (message.token_sent_event !== undefined) {
            api_1.TokenSentEvent.encode(message.token_sent_event, writer.uint32(474).fork()).ldelim();
        }
        if (message.message_button_clicked !== undefined) {
            exports.MessageButtonClicked.encode(message.message_button_clicked, writer.uint32(482).fork()).ldelim();
        }
        if (message.unmute_event !== undefined) {
            exports.UnmuteEvent.encode(message.unmute_event, writer.uint32(490).fork()).ldelim();
        }
        if (message.webrtc_signaling_fwd !== undefined) {
            exports.WebrtcSignalingFwd.encode(message.webrtc_signaling_fwd, writer.uint32(498).fork()).ldelim();
        }
        if (message.list_activity !== undefined) {
            exports.ListActivity.encode(message.list_activity, writer.uint32(506).fork()).ldelim();
        }
        if (message.dropdown_box_selected !== undefined) {
            exports.DropdownBoxSelected.encode(message.dropdown_box_selected, writer.uint32(514).fork()).ldelim();
        }
        if (message.incoming_call_push !== undefined) {
            exports.IncomingCallPush.encode(message.incoming_call_push, writer.uint32(522).fork()).ldelim();
        }
        if (message.sd_topic_event !== undefined) {
            exports.SdTopicEvent.encode(message.sd_topic_event, writer.uint32(530).fork()).ldelim();
        }
        if (message.follow_event !== undefined) {
            exports.FollowEvent.encode(message.follow_event, writer.uint32(538).fork()).ldelim();
        }
        if (message.channel_app_event !== undefined) {
            exports.ChannelAppEvent.encode(message.channel_app_event, writer.uint32(546).fork()).ldelim();
        }
        if (message.user_status_event !== undefined) {
            exports.UserStatusEvent.encode(message.user_status_event, writer.uint32(554).fork()).ldelim();
        }
        if (message.remove_friend !== undefined) {
            exports.RemoveFriend.encode(message.remove_friend, writer.uint32(562).fork()).ldelim();
        }
        if (message.webhook_event !== undefined) {
            api_1.Webhook.encode(message.webhook_event, writer.uint32(570).fork()).ldelim();
        }
        if (message.noti_user_channel !== undefined) {
            api_1.NotificationUserChannel.encode(message.noti_user_channel, writer.uint32(578).fork()).ldelim();
        }
        if (message.join_channel_app_data !== undefined) {
            exports.JoinChannelAppData.encode(message.join_channel_app_data, writer.uint32(586).fork()).ldelim();
        }
        if (message.canvas_event !== undefined) {
            exports.ChannelCanvas.encode(message.canvas_event, writer.uint32(594).fork()).ldelim();
        }
        if (message.unpin_message_event !== undefined) {
            exports.UnpinMessageEvent.encode(message.unpin_message_event, writer.uint32(602).fork()).ldelim();
        }
        if (message.category_event !== undefined) {
            exports.CategoryEvent.encode(message.category_event, writer.uint32(610).fork()).ldelim();
        }
        if (message.handle_participant_meet_state_event !== undefined) {
            exports.HandleParticipantMeetStateEvent.encode(message.handle_participant_meet_state_event, writer.uint32(618).fork())
                .ldelim();
        }
        if (message.delete_account_event !== undefined) {
            exports.DeleteAccountEvent.encode(message.delete_account_event, writer.uint32(626).fork()).ldelim();
        }
        if (message.ephemeral_message_send !== undefined) {
            exports.EphemeralMessageSend.encode(message.ephemeral_message_send, writer.uint32(634).fork()).ldelim();
        }
        if (message.block_friend !== undefined) {
            exports.BlockFriend.encode(message.block_friend, writer.uint32(642).fork()).ldelim();
        }
        if (message.voice_reaction_send !== undefined) {
            exports.VoiceReactionSend.encode(message.voice_reaction_send, writer.uint32(650).fork()).ldelim();
        }
        if (message.mark_as_read !== undefined) {
            exports.MarkAsRead.encode(message.mark_as_read, writer.uint32(658).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnvelope();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.cid = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel = exports.Channel.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_join = exports.ClanJoin.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.channel_join = exports.ChannelJoin.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.channel_leave = exports.ChannelLeave.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.channel_message = api_1.ChannelMessage.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.channel_message_ack = exports.ChannelMessageAck.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.channel_message_send = exports.ChannelMessageSend.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.channel_message_update = exports.ChannelMessageUpdate.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.channel_message_remove = exports.ChannelMessageRemove.decode(reader, reader.uint32());
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.channel_presence_event = exports.ChannelPresenceEvent.decode(reader, reader.uint32());
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.error = exports.Error.decode(reader, reader.uint32());
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.notifications = exports.Notifications.decode(reader, reader.uint32());
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.rpc = api_1.Rpc.decode(reader, reader.uint32());
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.status = exports.Status.decode(reader, reader.uint32());
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.status_follow = exports.StatusFollow.decode(reader, reader.uint32());
                    continue;
                case 17:
                    if (tag !== 138) {
                        break;
                    }
                    message.status_presence_event = exports.StatusPresenceEvent.decode(reader, reader.uint32());
                    continue;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    message.status_unfollow = exports.StatusUnfollow.decode(reader, reader.uint32());
                    continue;
                case 19:
                    if (tag !== 154) {
                        break;
                    }
                    message.status_update = exports.StatusUpdate.decode(reader, reader.uint32());
                    continue;
                case 20:
                    if (tag !== 162) {
                        break;
                    }
                    message.stream_data = exports.StreamData.decode(reader, reader.uint32());
                    continue;
                case 21:
                    if (tag !== 170) {
                        break;
                    }
                    message.stream_presence_event = exports.StreamPresenceEvent.decode(reader, reader.uint32());
                    continue;
                case 22:
                    if (tag !== 178) {
                        break;
                    }
                    message.ping = exports.Ping.decode(reader, reader.uint32());
                    continue;
                case 23:
                    if (tag !== 186) {
                        break;
                    }
                    message.pong = exports.Pong.decode(reader, reader.uint32());
                    continue;
                case 24:
                    if (tag !== 194) {
                        break;
                    }
                    message.message_typing_event = exports.MessageTypingEvent.decode(reader, reader.uint32());
                    continue;
                case 25:
                    if (tag !== 202) {
                        break;
                    }
                    message.last_seen_message_event = exports.LastSeenMessageEvent.decode(reader, reader.uint32());
                    continue;
                case 26:
                    if (tag !== 210) {
                        break;
                    }
                    message.message_reaction_event = api_1.MessageReaction.decode(reader, reader.uint32());
                    continue;
                case 27:
                    if (tag !== 218) {
                        break;
                    }
                    message.voice_joined_event = exports.VoiceJoinedEvent.decode(reader, reader.uint32());
                    continue;
                case 28:
                    if (tag !== 226) {
                        break;
                    }
                    message.voice_leaved_event = exports.VoiceLeavedEvent.decode(reader, reader.uint32());
                    continue;
                case 29:
                    if (tag !== 234) {
                        break;
                    }
                    message.voice_started_event = exports.VoiceStartedEvent.decode(reader, reader.uint32());
                    continue;
                case 30:
                    if (tag !== 242) {
                        break;
                    }
                    message.voice_ended_event = exports.VoiceEndedEvent.decode(reader, reader.uint32());
                    continue;
                case 31:
                    if (tag !== 250) {
                        break;
                    }
                    message.channel_created_event = exports.ChannelCreatedEvent.decode(reader, reader.uint32());
                    continue;
                case 32:
                    if (tag !== 258) {
                        break;
                    }
                    message.channel_deleted_event = exports.ChannelDeletedEvent.decode(reader, reader.uint32());
                    continue;
                case 33:
                    if (tag !== 266) {
                        break;
                    }
                    message.channel_updated_event = exports.ChannelUpdatedEvent.decode(reader, reader.uint32());
                    continue;
                case 34:
                    if (tag !== 274) {
                        break;
                    }
                    message.last_pin_message_event = exports.LastPinMessageEvent.decode(reader, reader.uint32());
                    continue;
                case 35:
                    if (tag !== 282) {
                        break;
                    }
                    message.custom_status_event = exports.CustomStatusEvent.decode(reader, reader.uint32());
                    continue;
                case 36:
                    if (tag !== 290) {
                        break;
                    }
                    message.user_channel_added_event = exports.UserChannelAdded.decode(reader, reader.uint32());
                    continue;
                case 37:
                    if (tag !== 298) {
                        break;
                    }
                    message.user_channel_removed_event = exports.UserChannelRemoved.decode(reader, reader.uint32());
                    continue;
                case 38:
                    if (tag !== 306) {
                        break;
                    }
                    message.user_clan_removed_event = exports.UserClanRemoved.decode(reader, reader.uint32());
                    continue;
                case 39:
                    if (tag !== 314) {
                        break;
                    }
                    message.clan_updated_event = exports.ClanUpdatedEvent.decode(reader, reader.uint32());
                    continue;
                case 40:
                    if (tag !== 322) {
                        break;
                    }
                    message.clan_profile_updated_event = exports.ClanProfileUpdatedEvent.decode(reader, reader.uint32());
                    continue;
                case 41:
                    if (tag !== 330) {
                        break;
                    }
                    message.check_name_existed_event = exports.CheckNameExistedEvent.decode(reader, reader.uint32());
                    continue;
                case 42:
                    if (tag !== 338) {
                        break;
                    }
                    message.user_profile_updated_event = exports.UserProfileUpdatedEvent.decode(reader, reader.uint32());
                    continue;
                case 43:
                    if (tag !== 346) {
                        break;
                    }
                    message.add_clan_user_event = exports.AddClanUserEvent.decode(reader, reader.uint32());
                    continue;
                case 44:
                    if (tag !== 354) {
                        break;
                    }
                    message.clan_event_created = api_1.CreateEventRequest.decode(reader, reader.uint32());
                    continue;
                case 45:
                    if (tag !== 362) {
                        break;
                    }
                    message.role_assign_event = exports.RoleAssignedEvent.decode(reader, reader.uint32());
                    continue;
                case 46:
                    if (tag !== 370) {
                        break;
                    }
                    message.clan_deleted_event = exports.ClanDeletedEvent.decode(reader, reader.uint32());
                    continue;
                case 47:
                    if (tag !== 378) {
                        break;
                    }
                    message.give_coffee_event = api_1.GiveCoffeeEvent.decode(reader, reader.uint32());
                    continue;
                case 48:
                    if (tag !== 386) {
                        break;
                    }
                    message.sticker_create_event = exports.StickerCreateEvent.decode(reader, reader.uint32());
                    continue;
                case 49:
                    if (tag !== 394) {
                        break;
                    }
                    message.sticker_update_event = exports.StickerUpdateEvent.decode(reader, reader.uint32());
                    continue;
                case 50:
                    if (tag !== 402) {
                        break;
                    }
                    message.sticker_delete_event = exports.StickerDeleteEvent.decode(reader, reader.uint32());
                    continue;
                case 51:
                    if (tag !== 410) {
                        break;
                    }
                    message.role_event = exports.RoleEvent.decode(reader, reader.uint32());
                    continue;
                case 52:
                    if (tag !== 418) {
                        break;
                    }
                    message.event_emoji = exports.EventEmoji.decode(reader, reader.uint32());
                    continue;
                case 53:
                    if (tag !== 426) {
                        break;
                    }
                    message.streaming_joined_event = exports.StreamingJoinedEvent.decode(reader, reader.uint32());
                    continue;
                case 54:
                    if (tag !== 434) {
                        break;
                    }
                    message.streaming_leaved_event = exports.StreamingLeavedEvent.decode(reader, reader.uint32());
                    continue;
                case 55:
                    if (tag !== 442) {
                        break;
                    }
                    message.streaming_started_event = exports.StreamingStartedEvent.decode(reader, reader.uint32());
                    continue;
                case 56:
                    if (tag !== 450) {
                        break;
                    }
                    message.streaming_ended_event = exports.StreamingEndedEvent.decode(reader, reader.uint32());
                    continue;
                case 57:
                    if (tag !== 458) {
                        break;
                    }
                    message.permission_set_event = exports.PermissionSetEvent.decode(reader, reader.uint32());
                    continue;
                case 58:
                    if (tag !== 466) {
                        break;
                    }
                    message.permission_changed_event = exports.PermissionChangedEvent.decode(reader, reader.uint32());
                    continue;
                case 59:
                    if (tag !== 474) {
                        break;
                    }
                    message.token_sent_event = api_1.TokenSentEvent.decode(reader, reader.uint32());
                    continue;
                case 60:
                    if (tag !== 482) {
                        break;
                    }
                    message.message_button_clicked = exports.MessageButtonClicked.decode(reader, reader.uint32());
                    continue;
                case 61:
                    if (tag !== 490) {
                        break;
                    }
                    message.unmute_event = exports.UnmuteEvent.decode(reader, reader.uint32());
                    continue;
                case 62:
                    if (tag !== 498) {
                        break;
                    }
                    message.webrtc_signaling_fwd = exports.WebrtcSignalingFwd.decode(reader, reader.uint32());
                    continue;
                case 63:
                    if (tag !== 506) {
                        break;
                    }
                    message.list_activity = exports.ListActivity.decode(reader, reader.uint32());
                    continue;
                case 64:
                    if (tag !== 514) {
                        break;
                    }
                    message.dropdown_box_selected = exports.DropdownBoxSelected.decode(reader, reader.uint32());
                    continue;
                case 65:
                    if (tag !== 522) {
                        break;
                    }
                    message.incoming_call_push = exports.IncomingCallPush.decode(reader, reader.uint32());
                    continue;
                case 66:
                    if (tag !== 530) {
                        break;
                    }
                    message.sd_topic_event = exports.SdTopicEvent.decode(reader, reader.uint32());
                    continue;
                case 67:
                    if (tag !== 538) {
                        break;
                    }
                    message.follow_event = exports.FollowEvent.decode(reader, reader.uint32());
                    continue;
                case 68:
                    if (tag !== 546) {
                        break;
                    }
                    message.channel_app_event = exports.ChannelAppEvent.decode(reader, reader.uint32());
                    continue;
                case 69:
                    if (tag !== 554) {
                        break;
                    }
                    message.user_status_event = exports.UserStatusEvent.decode(reader, reader.uint32());
                    continue;
                case 70:
                    if (tag !== 562) {
                        break;
                    }
                    message.remove_friend = exports.RemoveFriend.decode(reader, reader.uint32());
                    continue;
                case 71:
                    if (tag !== 570) {
                        break;
                    }
                    message.webhook_event = api_1.Webhook.decode(reader, reader.uint32());
                    continue;
                case 72:
                    if (tag !== 578) {
                        break;
                    }
                    message.noti_user_channel = api_1.NotificationUserChannel.decode(reader, reader.uint32());
                    continue;
                case 73:
                    if (tag !== 586) {
                        break;
                    }
                    message.join_channel_app_data = exports.JoinChannelAppData.decode(reader, reader.uint32());
                    continue;
                case 74:
                    if (tag !== 594) {
                        break;
                    }
                    message.canvas_event = exports.ChannelCanvas.decode(reader, reader.uint32());
                    continue;
                case 75:
                    if (tag !== 602) {
                        break;
                    }
                    message.unpin_message_event = exports.UnpinMessageEvent.decode(reader, reader.uint32());
                    continue;
                case 76:
                    if (tag !== 610) {
                        break;
                    }
                    message.category_event = exports.CategoryEvent.decode(reader, reader.uint32());
                    continue;
                case 77:
                    if (tag !== 618) {
                        break;
                    }
                    message.handle_participant_meet_state_event = exports.HandleParticipantMeetStateEvent.decode(reader, reader.uint32());
                    continue;
                case 78:
                    if (tag !== 626) {
                        break;
                    }
                    message.delete_account_event = exports.DeleteAccountEvent.decode(reader, reader.uint32());
                    continue;
                case 79:
                    if (tag !== 634) {
                        break;
                    }
                    message.ephemeral_message_send = exports.EphemeralMessageSend.decode(reader, reader.uint32());
                    continue;
                case 80:
                    if (tag !== 642) {
                        break;
                    }
                    message.block_friend = exports.BlockFriend.decode(reader, reader.uint32());
                    continue;
                case 81:
                    if (tag !== 650) {
                        break;
                    }
                    message.voice_reaction_send = exports.VoiceReactionSend.decode(reader, reader.uint32());
                    continue;
                case 82:
                    if (tag !== 658) {
                        break;
                    }
                    message.mark_as_read = exports.MarkAsRead.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            cid: isSet(object.cid) ? globalThis.String(object.cid) : "",
            channel: isSet(object.channel) ? exports.Channel.fromJSON(object.channel) : undefined,
            clan_join: isSet(object.clan_join) ? exports.ClanJoin.fromJSON(object.clan_join) : undefined,
            channel_join: isSet(object.channel_join) ? exports.ChannelJoin.fromJSON(object.channel_join) : undefined,
            channel_leave: isSet(object.channel_leave) ? exports.ChannelLeave.fromJSON(object.channel_leave) : undefined,
            channel_message: isSet(object.channel_message) ? api_1.ChannelMessage.fromJSON(object.channel_message) : undefined,
            channel_message_ack: isSet(object.channel_message_ack)
                ? exports.ChannelMessageAck.fromJSON(object.channel_message_ack)
                : undefined,
            channel_message_send: isSet(object.channel_message_send)
                ? exports.ChannelMessageSend.fromJSON(object.channel_message_send)
                : undefined,
            channel_message_update: isSet(object.channel_message_update)
                ? exports.ChannelMessageUpdate.fromJSON(object.channel_message_update)
                : undefined,
            channel_message_remove: isSet(object.channel_message_remove)
                ? exports.ChannelMessageRemove.fromJSON(object.channel_message_remove)
                : undefined,
            channel_presence_event: isSet(object.channel_presence_event)
                ? exports.ChannelPresenceEvent.fromJSON(object.channel_presence_event)
                : undefined,
            error: isSet(object.error) ? exports.Error.fromJSON(object.error) : undefined,
            notifications: isSet(object.notifications) ? exports.Notifications.fromJSON(object.notifications) : undefined,
            rpc: isSet(object.rpc) ? api_1.Rpc.fromJSON(object.rpc) : undefined,
            status: isSet(object.status) ? exports.Status.fromJSON(object.status) : undefined,
            status_follow: isSet(object.status_follow) ? exports.StatusFollow.fromJSON(object.status_follow) : undefined,
            status_presence_event: isSet(object.status_presence_event)
                ? exports.StatusPresenceEvent.fromJSON(object.status_presence_event)
                : undefined,
            status_unfollow: isSet(object.status_unfollow) ? exports.StatusUnfollow.fromJSON(object.status_unfollow) : undefined,
            status_update: isSet(object.status_update) ? exports.StatusUpdate.fromJSON(object.status_update) : undefined,
            stream_data: isSet(object.stream_data) ? exports.StreamData.fromJSON(object.stream_data) : undefined,
            stream_presence_event: isSet(object.stream_presence_event)
                ? exports.StreamPresenceEvent.fromJSON(object.stream_presence_event)
                : undefined,
            ping: isSet(object.ping) ? exports.Ping.fromJSON(object.ping) : undefined,
            pong: isSet(object.pong) ? exports.Pong.fromJSON(object.pong) : undefined,
            message_typing_event: isSet(object.message_typing_event)
                ? exports.MessageTypingEvent.fromJSON(object.message_typing_event)
                : undefined,
            last_seen_message_event: isSet(object.last_seen_message_event)
                ? exports.LastSeenMessageEvent.fromJSON(object.last_seen_message_event)
                : undefined,
            message_reaction_event: isSet(object.message_reaction_event)
                ? api_1.MessageReaction.fromJSON(object.message_reaction_event)
                : undefined,
            voice_joined_event: isSet(object.voice_joined_event)
                ? exports.VoiceJoinedEvent.fromJSON(object.voice_joined_event)
                : undefined,
            voice_leaved_event: isSet(object.voice_leaved_event)
                ? exports.VoiceLeavedEvent.fromJSON(object.voice_leaved_event)
                : undefined,
            voice_started_event: isSet(object.voice_started_event)
                ? exports.VoiceStartedEvent.fromJSON(object.voice_started_event)
                : undefined,
            voice_ended_event: isSet(object.voice_ended_event)
                ? exports.VoiceEndedEvent.fromJSON(object.voice_ended_event)
                : undefined,
            channel_created_event: isSet(object.channel_created_event)
                ? exports.ChannelCreatedEvent.fromJSON(object.channel_created_event)
                : undefined,
            channel_deleted_event: isSet(object.channel_deleted_event)
                ? exports.ChannelDeletedEvent.fromJSON(object.channel_deleted_event)
                : undefined,
            channel_updated_event: isSet(object.channel_updated_event)
                ? exports.ChannelUpdatedEvent.fromJSON(object.channel_updated_event)
                : undefined,
            last_pin_message_event: isSet(object.last_pin_message_event)
                ? exports.LastPinMessageEvent.fromJSON(object.last_pin_message_event)
                : undefined,
            custom_status_event: isSet(object.custom_status_event)
                ? exports.CustomStatusEvent.fromJSON(object.custom_status_event)
                : undefined,
            user_channel_added_event: isSet(object.user_channel_added_event)
                ? exports.UserChannelAdded.fromJSON(object.user_channel_added_event)
                : undefined,
            user_channel_removed_event: isSet(object.user_channel_removed_event)
                ? exports.UserChannelRemoved.fromJSON(object.user_channel_removed_event)
                : undefined,
            user_clan_removed_event: isSet(object.user_clan_removed_event)
                ? exports.UserClanRemoved.fromJSON(object.user_clan_removed_event)
                : undefined,
            clan_updated_event: isSet(object.clan_updated_event)
                ? exports.ClanUpdatedEvent.fromJSON(object.clan_updated_event)
                : undefined,
            clan_profile_updated_event: isSet(object.clan_profile_updated_event)
                ? exports.ClanProfileUpdatedEvent.fromJSON(object.clan_profile_updated_event)
                : undefined,
            check_name_existed_event: isSet(object.check_name_existed_event)
                ? exports.CheckNameExistedEvent.fromJSON(object.check_name_existed_event)
                : undefined,
            user_profile_updated_event: isSet(object.user_profile_updated_event)
                ? exports.UserProfileUpdatedEvent.fromJSON(object.user_profile_updated_event)
                : undefined,
            add_clan_user_event: isSet(object.add_clan_user_event)
                ? exports.AddClanUserEvent.fromJSON(object.add_clan_user_event)
                : undefined,
            clan_event_created: isSet(object.clan_event_created)
                ? api_1.CreateEventRequest.fromJSON(object.clan_event_created)
                : undefined,
            role_assign_event: isSet(object.role_assign_event)
                ? exports.RoleAssignedEvent.fromJSON(object.role_assign_event)
                : undefined,
            clan_deleted_event: isSet(object.clan_deleted_event)
                ? exports.ClanDeletedEvent.fromJSON(object.clan_deleted_event)
                : undefined,
            give_coffee_event: isSet(object.give_coffee_event)
                ? api_1.GiveCoffeeEvent.fromJSON(object.give_coffee_event)
                : undefined,
            sticker_create_event: isSet(object.sticker_create_event)
                ? exports.StickerCreateEvent.fromJSON(object.sticker_create_event)
                : undefined,
            sticker_update_event: isSet(object.sticker_update_event)
                ? exports.StickerUpdateEvent.fromJSON(object.sticker_update_event)
                : undefined,
            sticker_delete_event: isSet(object.sticker_delete_event)
                ? exports.StickerDeleteEvent.fromJSON(object.sticker_delete_event)
                : undefined,
            role_event: isSet(object.role_event) ? exports.RoleEvent.fromJSON(object.role_event) : undefined,
            event_emoji: isSet(object.event_emoji) ? exports.EventEmoji.fromJSON(object.event_emoji) : undefined,
            streaming_joined_event: isSet(object.streaming_joined_event)
                ? exports.StreamingJoinedEvent.fromJSON(object.streaming_joined_event)
                : undefined,
            streaming_leaved_event: isSet(object.streaming_leaved_event)
                ? exports.StreamingLeavedEvent.fromJSON(object.streaming_leaved_event)
                : undefined,
            streaming_started_event: isSet(object.streaming_started_event)
                ? exports.StreamingStartedEvent.fromJSON(object.streaming_started_event)
                : undefined,
            streaming_ended_event: isSet(object.streaming_ended_event)
                ? exports.StreamingEndedEvent.fromJSON(object.streaming_ended_event)
                : undefined,
            permission_set_event: isSet(object.permission_set_event)
                ? exports.PermissionSetEvent.fromJSON(object.permission_set_event)
                : undefined,
            permission_changed_event: isSet(object.permission_changed_event)
                ? exports.PermissionChangedEvent.fromJSON(object.permission_changed_event)
                : undefined,
            token_sent_event: isSet(object.token_sent_event) ? api_1.TokenSentEvent.fromJSON(object.token_sent_event) : undefined,
            message_button_clicked: isSet(object.message_button_clicked)
                ? exports.MessageButtonClicked.fromJSON(object.message_button_clicked)
                : undefined,
            unmute_event: isSet(object.unmute_event) ? exports.UnmuteEvent.fromJSON(object.unmute_event) : undefined,
            webrtc_signaling_fwd: isSet(object.webrtc_signaling_fwd)
                ? exports.WebrtcSignalingFwd.fromJSON(object.webrtc_signaling_fwd)
                : undefined,
            list_activity: isSet(object.list_activity) ? exports.ListActivity.fromJSON(object.list_activity) : undefined,
            dropdown_box_selected: isSet(object.dropdown_box_selected)
                ? exports.DropdownBoxSelected.fromJSON(object.dropdown_box_selected)
                : undefined,
            incoming_call_push: isSet(object.incoming_call_push)
                ? exports.IncomingCallPush.fromJSON(object.incoming_call_push)
                : undefined,
            sd_topic_event: isSet(object.sd_topic_event) ? exports.SdTopicEvent.fromJSON(object.sd_topic_event) : undefined,
            follow_event: isSet(object.follow_event) ? exports.FollowEvent.fromJSON(object.follow_event) : undefined,
            channel_app_event: isSet(object.channel_app_event)
                ? exports.ChannelAppEvent.fromJSON(object.channel_app_event)
                : undefined,
            user_status_event: isSet(object.user_status_event)
                ? exports.UserStatusEvent.fromJSON(object.user_status_event)
                : undefined,
            remove_friend: isSet(object.remove_friend) ? exports.RemoveFriend.fromJSON(object.remove_friend) : undefined,
            webhook_event: isSet(object.webhook_event) ? api_1.Webhook.fromJSON(object.webhook_event) : undefined,
            noti_user_channel: isSet(object.noti_user_channel)
                ? api_1.NotificationUserChannel.fromJSON(object.noti_user_channel)
                : undefined,
            join_channel_app_data: isSet(object.join_channel_app_data)
                ? exports.JoinChannelAppData.fromJSON(object.join_channel_app_data)
                : undefined,
            canvas_event: isSet(object.canvas_event) ? exports.ChannelCanvas.fromJSON(object.canvas_event) : undefined,
            unpin_message_event: isSet(object.unpin_message_event)
                ? exports.UnpinMessageEvent.fromJSON(object.unpin_message_event)
                : undefined,
            category_event: isSet(object.category_event) ? exports.CategoryEvent.fromJSON(object.category_event) : undefined,
            handle_participant_meet_state_event: isSet(object.handle_participant_meet_state_event)
                ? exports.HandleParticipantMeetStateEvent.fromJSON(object.handle_participant_meet_state_event)
                : undefined,
            delete_account_event: isSet(object.delete_account_event)
                ? exports.DeleteAccountEvent.fromJSON(object.delete_account_event)
                : undefined,
            ephemeral_message_send: isSet(object.ephemeral_message_send)
                ? exports.EphemeralMessageSend.fromJSON(object.ephemeral_message_send)
                : undefined,
            block_friend: isSet(object.block_friend) ? exports.BlockFriend.fromJSON(object.block_friend) : undefined,
            voice_reaction_send: isSet(object.voice_reaction_send)
                ? exports.VoiceReactionSend.fromJSON(object.voice_reaction_send)
                : undefined,
            mark_as_read: isSet(object.mark_as_read) ? exports.MarkAsRead.fromJSON(object.mark_as_read) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.cid !== "") {
            obj.cid = message.cid;
        }
        if (message.channel !== undefined) {
            obj.channel = exports.Channel.toJSON(message.channel);
        }
        if (message.clan_join !== undefined) {
            obj.clan_join = exports.ClanJoin.toJSON(message.clan_join);
        }
        if (message.channel_join !== undefined) {
            obj.channel_join = exports.ChannelJoin.toJSON(message.channel_join);
        }
        if (message.channel_leave !== undefined) {
            obj.channel_leave = exports.ChannelLeave.toJSON(message.channel_leave);
        }
        if (message.channel_message !== undefined) {
            obj.channel_message = api_1.ChannelMessage.toJSON(message.channel_message);
        }
        if (message.channel_message_ack !== undefined) {
            obj.channel_message_ack = exports.ChannelMessageAck.toJSON(message.channel_message_ack);
        }
        if (message.channel_message_send !== undefined) {
            obj.channel_message_send = exports.ChannelMessageSend.toJSON(message.channel_message_send);
        }
        if (message.channel_message_update !== undefined) {
            obj.channel_message_update = exports.ChannelMessageUpdate.toJSON(message.channel_message_update);
        }
        if (message.channel_message_remove !== undefined) {
            obj.channel_message_remove = exports.ChannelMessageRemove.toJSON(message.channel_message_remove);
        }
        if (message.channel_presence_event !== undefined) {
            obj.channel_presence_event = exports.ChannelPresenceEvent.toJSON(message.channel_presence_event);
        }
        if (message.error !== undefined) {
            obj.error = exports.Error.toJSON(message.error);
        }
        if (message.notifications !== undefined) {
            obj.notifications = exports.Notifications.toJSON(message.notifications);
        }
        if (message.rpc !== undefined) {
            obj.rpc = api_1.Rpc.toJSON(message.rpc);
        }
        if (message.status !== undefined) {
            obj.status = exports.Status.toJSON(message.status);
        }
        if (message.status_follow !== undefined) {
            obj.status_follow = exports.StatusFollow.toJSON(message.status_follow);
        }
        if (message.status_presence_event !== undefined) {
            obj.status_presence_event = exports.StatusPresenceEvent.toJSON(message.status_presence_event);
        }
        if (message.status_unfollow !== undefined) {
            obj.status_unfollow = exports.StatusUnfollow.toJSON(message.status_unfollow);
        }
        if (message.status_update !== undefined) {
            obj.status_update = exports.StatusUpdate.toJSON(message.status_update);
        }
        if (message.stream_data !== undefined) {
            obj.stream_data = exports.StreamData.toJSON(message.stream_data);
        }
        if (message.stream_presence_event !== undefined) {
            obj.stream_presence_event = exports.StreamPresenceEvent.toJSON(message.stream_presence_event);
        }
        if (message.ping !== undefined) {
            obj.ping = exports.Ping.toJSON(message.ping);
        }
        if (message.pong !== undefined) {
            obj.pong = exports.Pong.toJSON(message.pong);
        }
        if (message.message_typing_event !== undefined) {
            obj.message_typing_event = exports.MessageTypingEvent.toJSON(message.message_typing_event);
        }
        if (message.last_seen_message_event !== undefined) {
            obj.last_seen_message_event = exports.LastSeenMessageEvent.toJSON(message.last_seen_message_event);
        }
        if (message.message_reaction_event !== undefined) {
            obj.message_reaction_event = api_1.MessageReaction.toJSON(message.message_reaction_event);
        }
        if (message.voice_joined_event !== undefined) {
            obj.voice_joined_event = exports.VoiceJoinedEvent.toJSON(message.voice_joined_event);
        }
        if (message.voice_leaved_event !== undefined) {
            obj.voice_leaved_event = exports.VoiceLeavedEvent.toJSON(message.voice_leaved_event);
        }
        if (message.voice_started_event !== undefined) {
            obj.voice_started_event = exports.VoiceStartedEvent.toJSON(message.voice_started_event);
        }
        if (message.voice_ended_event !== undefined) {
            obj.voice_ended_event = exports.VoiceEndedEvent.toJSON(message.voice_ended_event);
        }
        if (message.channel_created_event !== undefined) {
            obj.channel_created_event = exports.ChannelCreatedEvent.toJSON(message.channel_created_event);
        }
        if (message.channel_deleted_event !== undefined) {
            obj.channel_deleted_event = exports.ChannelDeletedEvent.toJSON(message.channel_deleted_event);
        }
        if (message.channel_updated_event !== undefined) {
            obj.channel_updated_event = exports.ChannelUpdatedEvent.toJSON(message.channel_updated_event);
        }
        if (message.last_pin_message_event !== undefined) {
            obj.last_pin_message_event = exports.LastPinMessageEvent.toJSON(message.last_pin_message_event);
        }
        if (message.custom_status_event !== undefined) {
            obj.custom_status_event = exports.CustomStatusEvent.toJSON(message.custom_status_event);
        }
        if (message.user_channel_added_event !== undefined) {
            obj.user_channel_added_event = exports.UserChannelAdded.toJSON(message.user_channel_added_event);
        }
        if (message.user_channel_removed_event !== undefined) {
            obj.user_channel_removed_event = exports.UserChannelRemoved.toJSON(message.user_channel_removed_event);
        }
        if (message.user_clan_removed_event !== undefined) {
            obj.user_clan_removed_event = exports.UserClanRemoved.toJSON(message.user_clan_removed_event);
        }
        if (message.clan_updated_event !== undefined) {
            obj.clan_updated_event = exports.ClanUpdatedEvent.toJSON(message.clan_updated_event);
        }
        if (message.clan_profile_updated_event !== undefined) {
            obj.clan_profile_updated_event = exports.ClanProfileUpdatedEvent.toJSON(message.clan_profile_updated_event);
        }
        if (message.check_name_existed_event !== undefined) {
            obj.check_name_existed_event = exports.CheckNameExistedEvent.toJSON(message.check_name_existed_event);
        }
        if (message.user_profile_updated_event !== undefined) {
            obj.user_profile_updated_event = exports.UserProfileUpdatedEvent.toJSON(message.user_profile_updated_event);
        }
        if (message.add_clan_user_event !== undefined) {
            obj.add_clan_user_event = exports.AddClanUserEvent.toJSON(message.add_clan_user_event);
        }
        if (message.clan_event_created !== undefined) {
            obj.clan_event_created = api_1.CreateEventRequest.toJSON(message.clan_event_created);
        }
        if (message.role_assign_event !== undefined) {
            obj.role_assign_event = exports.RoleAssignedEvent.toJSON(message.role_assign_event);
        }
        if (message.clan_deleted_event !== undefined) {
            obj.clan_deleted_event = exports.ClanDeletedEvent.toJSON(message.clan_deleted_event);
        }
        if (message.give_coffee_event !== undefined) {
            obj.give_coffee_event = api_1.GiveCoffeeEvent.toJSON(message.give_coffee_event);
        }
        if (message.sticker_create_event !== undefined) {
            obj.sticker_create_event = exports.StickerCreateEvent.toJSON(message.sticker_create_event);
        }
        if (message.sticker_update_event !== undefined) {
            obj.sticker_update_event = exports.StickerUpdateEvent.toJSON(message.sticker_update_event);
        }
        if (message.sticker_delete_event !== undefined) {
            obj.sticker_delete_event = exports.StickerDeleteEvent.toJSON(message.sticker_delete_event);
        }
        if (message.role_event !== undefined) {
            obj.role_event = exports.RoleEvent.toJSON(message.role_event);
        }
        if (message.event_emoji !== undefined) {
            obj.event_emoji = exports.EventEmoji.toJSON(message.event_emoji);
        }
        if (message.streaming_joined_event !== undefined) {
            obj.streaming_joined_event = exports.StreamingJoinedEvent.toJSON(message.streaming_joined_event);
        }
        if (message.streaming_leaved_event !== undefined) {
            obj.streaming_leaved_event = exports.StreamingLeavedEvent.toJSON(message.streaming_leaved_event);
        }
        if (message.streaming_started_event !== undefined) {
            obj.streaming_started_event = exports.StreamingStartedEvent.toJSON(message.streaming_started_event);
        }
        if (message.streaming_ended_event !== undefined) {
            obj.streaming_ended_event = exports.StreamingEndedEvent.toJSON(message.streaming_ended_event);
        }
        if (message.permission_set_event !== undefined) {
            obj.permission_set_event = exports.PermissionSetEvent.toJSON(message.permission_set_event);
        }
        if (message.permission_changed_event !== undefined) {
            obj.permission_changed_event = exports.PermissionChangedEvent.toJSON(message.permission_changed_event);
        }
        if (message.token_sent_event !== undefined) {
            obj.token_sent_event = api_1.TokenSentEvent.toJSON(message.token_sent_event);
        }
        if (message.message_button_clicked !== undefined) {
            obj.message_button_clicked = exports.MessageButtonClicked.toJSON(message.message_button_clicked);
        }
        if (message.unmute_event !== undefined) {
            obj.unmute_event = exports.UnmuteEvent.toJSON(message.unmute_event);
        }
        if (message.webrtc_signaling_fwd !== undefined) {
            obj.webrtc_signaling_fwd = exports.WebrtcSignalingFwd.toJSON(message.webrtc_signaling_fwd);
        }
        if (message.list_activity !== undefined) {
            obj.list_activity = exports.ListActivity.toJSON(message.list_activity);
        }
        if (message.dropdown_box_selected !== undefined) {
            obj.dropdown_box_selected = exports.DropdownBoxSelected.toJSON(message.dropdown_box_selected);
        }
        if (message.incoming_call_push !== undefined) {
            obj.incoming_call_push = exports.IncomingCallPush.toJSON(message.incoming_call_push);
        }
        if (message.sd_topic_event !== undefined) {
            obj.sd_topic_event = exports.SdTopicEvent.toJSON(message.sd_topic_event);
        }
        if (message.follow_event !== undefined) {
            obj.follow_event = exports.FollowEvent.toJSON(message.follow_event);
        }
        if (message.channel_app_event !== undefined) {
            obj.channel_app_event = exports.ChannelAppEvent.toJSON(message.channel_app_event);
        }
        if (message.user_status_event !== undefined) {
            obj.user_status_event = exports.UserStatusEvent.toJSON(message.user_status_event);
        }
        if (message.remove_friend !== undefined) {
            obj.remove_friend = exports.RemoveFriend.toJSON(message.remove_friend);
        }
        if (message.webhook_event !== undefined) {
            obj.webhook_event = api_1.Webhook.toJSON(message.webhook_event);
        }
        if (message.noti_user_channel !== undefined) {
            obj.noti_user_channel = api_1.NotificationUserChannel.toJSON(message.noti_user_channel);
        }
        if (message.join_channel_app_data !== undefined) {
            obj.join_channel_app_data = exports.JoinChannelAppData.toJSON(message.join_channel_app_data);
        }
        if (message.canvas_event !== undefined) {
            obj.canvas_event = exports.ChannelCanvas.toJSON(message.canvas_event);
        }
        if (message.unpin_message_event !== undefined) {
            obj.unpin_message_event = exports.UnpinMessageEvent.toJSON(message.unpin_message_event);
        }
        if (message.category_event !== undefined) {
            obj.category_event = exports.CategoryEvent.toJSON(message.category_event);
        }
        if (message.handle_participant_meet_state_event !== undefined) {
            obj.handle_participant_meet_state_event = exports.HandleParticipantMeetStateEvent.toJSON(message.handle_participant_meet_state_event);
        }
        if (message.delete_account_event !== undefined) {
            obj.delete_account_event = exports.DeleteAccountEvent.toJSON(message.delete_account_event);
        }
        if (message.ephemeral_message_send !== undefined) {
            obj.ephemeral_message_send = exports.EphemeralMessageSend.toJSON(message.ephemeral_message_send);
        }
        if (message.block_friend !== undefined) {
            obj.block_friend = exports.BlockFriend.toJSON(message.block_friend);
        }
        if (message.voice_reaction_send !== undefined) {
            obj.voice_reaction_send = exports.VoiceReactionSend.toJSON(message.voice_reaction_send);
        }
        if (message.mark_as_read !== undefined) {
            obj.mark_as_read = exports.MarkAsRead.toJSON(message.mark_as_read);
        }
        return obj;
    },
    create(base) {
        return exports.Envelope.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEnvelope();
        message.cid = (_a = object.cid) !== null && _a !== void 0 ? _a : "";
        message.channel = (object.channel !== undefined && object.channel !== null)
            ? exports.Channel.fromPartial(object.channel)
            : undefined;
        message.clan_join = (object.clan_join !== undefined && object.clan_join !== null)
            ? exports.ClanJoin.fromPartial(object.clan_join)
            : undefined;
        message.channel_join = (object.channel_join !== undefined && object.channel_join !== null)
            ? exports.ChannelJoin.fromPartial(object.channel_join)
            : undefined;
        message.channel_leave = (object.channel_leave !== undefined && object.channel_leave !== null)
            ? exports.ChannelLeave.fromPartial(object.channel_leave)
            : undefined;
        message.channel_message = (object.channel_message !== undefined && object.channel_message !== null)
            ? api_1.ChannelMessage.fromPartial(object.channel_message)
            : undefined;
        message.channel_message_ack = (object.channel_message_ack !== undefined && object.channel_message_ack !== null)
            ? exports.ChannelMessageAck.fromPartial(object.channel_message_ack)
            : undefined;
        message.channel_message_send = (object.channel_message_send !== undefined && object.channel_message_send !== null)
            ? exports.ChannelMessageSend.fromPartial(object.channel_message_send)
            : undefined;
        message.channel_message_update =
            (object.channel_message_update !== undefined && object.channel_message_update !== null)
                ? exports.ChannelMessageUpdate.fromPartial(object.channel_message_update)
                : undefined;
        message.channel_message_remove =
            (object.channel_message_remove !== undefined && object.channel_message_remove !== null)
                ? exports.ChannelMessageRemove.fromPartial(object.channel_message_remove)
                : undefined;
        message.channel_presence_event =
            (object.channel_presence_event !== undefined && object.channel_presence_event !== null)
                ? exports.ChannelPresenceEvent.fromPartial(object.channel_presence_event)
                : undefined;
        message.error = (object.error !== undefined && object.error !== null) ? exports.Error.fromPartial(object.error) : undefined;
        message.notifications = (object.notifications !== undefined && object.notifications !== null)
            ? exports.Notifications.fromPartial(object.notifications)
            : undefined;
        message.rpc = (object.rpc !== undefined && object.rpc !== null) ? api_1.Rpc.fromPartial(object.rpc) : undefined;
        message.status = (object.status !== undefined && object.status !== null)
            ? exports.Status.fromPartial(object.status)
            : undefined;
        message.status_follow = (object.status_follow !== undefined && object.status_follow !== null)
            ? exports.StatusFollow.fromPartial(object.status_follow)
            : undefined;
        message.status_presence_event =
            (object.status_presence_event !== undefined && object.status_presence_event !== null)
                ? exports.StatusPresenceEvent.fromPartial(object.status_presence_event)
                : undefined;
        message.status_unfollow = (object.status_unfollow !== undefined && object.status_unfollow !== null)
            ? exports.StatusUnfollow.fromPartial(object.status_unfollow)
            : undefined;
        message.status_update = (object.status_update !== undefined && object.status_update !== null)
            ? exports.StatusUpdate.fromPartial(object.status_update)
            : undefined;
        message.stream_data = (object.stream_data !== undefined && object.stream_data !== null)
            ? exports.StreamData.fromPartial(object.stream_data)
            : undefined;
        message.stream_presence_event =
            (object.stream_presence_event !== undefined && object.stream_presence_event !== null)
                ? exports.StreamPresenceEvent.fromPartial(object.stream_presence_event)
                : undefined;
        message.ping = (object.ping !== undefined && object.ping !== null) ? exports.Ping.fromPartial(object.ping) : undefined;
        message.pong = (object.pong !== undefined && object.pong !== null) ? exports.Pong.fromPartial(object.pong) : undefined;
        message.message_typing_event = (object.message_typing_event !== undefined && object.message_typing_event !== null)
            ? exports.MessageTypingEvent.fromPartial(object.message_typing_event)
            : undefined;
        message.last_seen_message_event =
            (object.last_seen_message_event !== undefined && object.last_seen_message_event !== null)
                ? exports.LastSeenMessageEvent.fromPartial(object.last_seen_message_event)
                : undefined;
        message.message_reaction_event =
            (object.message_reaction_event !== undefined && object.message_reaction_event !== null)
                ? api_1.MessageReaction.fromPartial(object.message_reaction_event)
                : undefined;
        message.voice_joined_event = (object.voice_joined_event !== undefined && object.voice_joined_event !== null)
            ? exports.VoiceJoinedEvent.fromPartial(object.voice_joined_event)
            : undefined;
        message.voice_leaved_event = (object.voice_leaved_event !== undefined && object.voice_leaved_event !== null)
            ? exports.VoiceLeavedEvent.fromPartial(object.voice_leaved_event)
            : undefined;
        message.voice_started_event = (object.voice_started_event !== undefined && object.voice_started_event !== null)
            ? exports.VoiceStartedEvent.fromPartial(object.voice_started_event)
            : undefined;
        message.voice_ended_event = (object.voice_ended_event !== undefined && object.voice_ended_event !== null)
            ? exports.VoiceEndedEvent.fromPartial(object.voice_ended_event)
            : undefined;
        message.channel_created_event =
            (object.channel_created_event !== undefined && object.channel_created_event !== null)
                ? exports.ChannelCreatedEvent.fromPartial(object.channel_created_event)
                : undefined;
        message.channel_deleted_event =
            (object.channel_deleted_event !== undefined && object.channel_deleted_event !== null)
                ? exports.ChannelDeletedEvent.fromPartial(object.channel_deleted_event)
                : undefined;
        message.channel_updated_event =
            (object.channel_updated_event !== undefined && object.channel_updated_event !== null)
                ? exports.ChannelUpdatedEvent.fromPartial(object.channel_updated_event)
                : undefined;
        message.last_pin_message_event =
            (object.last_pin_message_event !== undefined && object.last_pin_message_event !== null)
                ? exports.LastPinMessageEvent.fromPartial(object.last_pin_message_event)
                : undefined;
        message.custom_status_event = (object.custom_status_event !== undefined && object.custom_status_event !== null)
            ? exports.CustomStatusEvent.fromPartial(object.custom_status_event)
            : undefined;
        message.user_channel_added_event =
            (object.user_channel_added_event !== undefined && object.user_channel_added_event !== null)
                ? exports.UserChannelAdded.fromPartial(object.user_channel_added_event)
                : undefined;
        message.user_channel_removed_event =
            (object.user_channel_removed_event !== undefined && object.user_channel_removed_event !== null)
                ? exports.UserChannelRemoved.fromPartial(object.user_channel_removed_event)
                : undefined;
        message.user_clan_removed_event =
            (object.user_clan_removed_event !== undefined && object.user_clan_removed_event !== null)
                ? exports.UserClanRemoved.fromPartial(object.user_clan_removed_event)
                : undefined;
        message.clan_updated_event = (object.clan_updated_event !== undefined && object.clan_updated_event !== null)
            ? exports.ClanUpdatedEvent.fromPartial(object.clan_updated_event)
            : undefined;
        message.clan_profile_updated_event =
            (object.clan_profile_updated_event !== undefined && object.clan_profile_updated_event !== null)
                ? exports.ClanProfileUpdatedEvent.fromPartial(object.clan_profile_updated_event)
                : undefined;
        message.check_name_existed_event =
            (object.check_name_existed_event !== undefined && object.check_name_existed_event !== null)
                ? exports.CheckNameExistedEvent.fromPartial(object.check_name_existed_event)
                : undefined;
        message.user_profile_updated_event =
            (object.user_profile_updated_event !== undefined && object.user_profile_updated_event !== null)
                ? exports.UserProfileUpdatedEvent.fromPartial(object.user_profile_updated_event)
                : undefined;
        message.add_clan_user_event = (object.add_clan_user_event !== undefined && object.add_clan_user_event !== null)
            ? exports.AddClanUserEvent.fromPartial(object.add_clan_user_event)
            : undefined;
        message.clan_event_created = (object.clan_event_created !== undefined && object.clan_event_created !== null)
            ? api_1.CreateEventRequest.fromPartial(object.clan_event_created)
            : undefined;
        message.role_assign_event = (object.role_assign_event !== undefined && object.role_assign_event !== null)
            ? exports.RoleAssignedEvent.fromPartial(object.role_assign_event)
            : undefined;
        message.clan_deleted_event = (object.clan_deleted_event !== undefined && object.clan_deleted_event !== null)
            ? exports.ClanDeletedEvent.fromPartial(object.clan_deleted_event)
            : undefined;
        message.give_coffee_event = (object.give_coffee_event !== undefined && object.give_coffee_event !== null)
            ? api_1.GiveCoffeeEvent.fromPartial(object.give_coffee_event)
            : undefined;
        message.sticker_create_event = (object.sticker_create_event !== undefined && object.sticker_create_event !== null)
            ? exports.StickerCreateEvent.fromPartial(object.sticker_create_event)
            : undefined;
        message.sticker_update_event = (object.sticker_update_event !== undefined && object.sticker_update_event !== null)
            ? exports.StickerUpdateEvent.fromPartial(object.sticker_update_event)
            : undefined;
        message.sticker_delete_event = (object.sticker_delete_event !== undefined && object.sticker_delete_event !== null)
            ? exports.StickerDeleteEvent.fromPartial(object.sticker_delete_event)
            : undefined;
        message.role_event = (object.role_event !== undefined && object.role_event !== null)
            ? exports.RoleEvent.fromPartial(object.role_event)
            : undefined;
        message.event_emoji = (object.event_emoji !== undefined && object.event_emoji !== null)
            ? exports.EventEmoji.fromPartial(object.event_emoji)
            : undefined;
        message.streaming_joined_event =
            (object.streaming_joined_event !== undefined && object.streaming_joined_event !== null)
                ? exports.StreamingJoinedEvent.fromPartial(object.streaming_joined_event)
                : undefined;
        message.streaming_leaved_event =
            (object.streaming_leaved_event !== undefined && object.streaming_leaved_event !== null)
                ? exports.StreamingLeavedEvent.fromPartial(object.streaming_leaved_event)
                : undefined;
        message.streaming_started_event =
            (object.streaming_started_event !== undefined && object.streaming_started_event !== null)
                ? exports.StreamingStartedEvent.fromPartial(object.streaming_started_event)
                : undefined;
        message.streaming_ended_event =
            (object.streaming_ended_event !== undefined && object.streaming_ended_event !== null)
                ? exports.StreamingEndedEvent.fromPartial(object.streaming_ended_event)
                : undefined;
        message.permission_set_event = (object.permission_set_event !== undefined && object.permission_set_event !== null)
            ? exports.PermissionSetEvent.fromPartial(object.permission_set_event)
            : undefined;
        message.permission_changed_event =
            (object.permission_changed_event !== undefined && object.permission_changed_event !== null)
                ? exports.PermissionChangedEvent.fromPartial(object.permission_changed_event)
                : undefined;
        message.token_sent_event = (object.token_sent_event !== undefined && object.token_sent_event !== null)
            ? api_1.TokenSentEvent.fromPartial(object.token_sent_event)
            : undefined;
        message.message_button_clicked =
            (object.message_button_clicked !== undefined && object.message_button_clicked !== null)
                ? exports.MessageButtonClicked.fromPartial(object.message_button_clicked)
                : undefined;
        message.unmute_event = (object.unmute_event !== undefined && object.unmute_event !== null)
            ? exports.UnmuteEvent.fromPartial(object.unmute_event)
            : undefined;
        message.webrtc_signaling_fwd = (object.webrtc_signaling_fwd !== undefined && object.webrtc_signaling_fwd !== null)
            ? exports.WebrtcSignalingFwd.fromPartial(object.webrtc_signaling_fwd)
            : undefined;
        message.list_activity = (object.list_activity !== undefined && object.list_activity !== null)
            ? exports.ListActivity.fromPartial(object.list_activity)
            : undefined;
        message.dropdown_box_selected =
            (object.dropdown_box_selected !== undefined && object.dropdown_box_selected !== null)
                ? exports.DropdownBoxSelected.fromPartial(object.dropdown_box_selected)
                : undefined;
        message.incoming_call_push = (object.incoming_call_push !== undefined && object.incoming_call_push !== null)
            ? exports.IncomingCallPush.fromPartial(object.incoming_call_push)
            : undefined;
        message.sd_topic_event = (object.sd_topic_event !== undefined && object.sd_topic_event !== null)
            ? exports.SdTopicEvent.fromPartial(object.sd_topic_event)
            : undefined;
        message.follow_event = (object.follow_event !== undefined && object.follow_event !== null)
            ? exports.FollowEvent.fromPartial(object.follow_event)
            : undefined;
        message.channel_app_event = (object.channel_app_event !== undefined && object.channel_app_event !== null)
            ? exports.ChannelAppEvent.fromPartial(object.channel_app_event)
            : undefined;
        message.user_status_event = (object.user_status_event !== undefined && object.user_status_event !== null)
            ? exports.UserStatusEvent.fromPartial(object.user_status_event)
            : undefined;
        message.remove_friend = (object.remove_friend !== undefined && object.remove_friend !== null)
            ? exports.RemoveFriend.fromPartial(object.remove_friend)
            : undefined;
        message.webhook_event = (object.webhook_event !== undefined && object.webhook_event !== null)
            ? api_1.Webhook.fromPartial(object.webhook_event)
            : undefined;
        message.noti_user_channel = (object.noti_user_channel !== undefined && object.noti_user_channel !== null)
            ? api_1.NotificationUserChannel.fromPartial(object.noti_user_channel)
            : undefined;
        message.join_channel_app_data =
            (object.join_channel_app_data !== undefined && object.join_channel_app_data !== null)
                ? exports.JoinChannelAppData.fromPartial(object.join_channel_app_data)
                : undefined;
        message.canvas_event = (object.canvas_event !== undefined && object.canvas_event !== null)
            ? exports.ChannelCanvas.fromPartial(object.canvas_event)
            : undefined;
        message.unpin_message_event = (object.unpin_message_event !== undefined && object.unpin_message_event !== null)
            ? exports.UnpinMessageEvent.fromPartial(object.unpin_message_event)
            : undefined;
        message.category_event = (object.category_event !== undefined && object.category_event !== null)
            ? exports.CategoryEvent.fromPartial(object.category_event)
            : undefined;
        message.handle_participant_meet_state_event =
            (object.handle_participant_meet_state_event !== undefined && object.handle_participant_meet_state_event !== null)
                ? exports.HandleParticipantMeetStateEvent.fromPartial(object.handle_participant_meet_state_event)
                : undefined;
        message.delete_account_event = (object.delete_account_event !== undefined && object.delete_account_event !== null)
            ? exports.DeleteAccountEvent.fromPartial(object.delete_account_event)
            : undefined;
        message.ephemeral_message_send =
            (object.ephemeral_message_send !== undefined && object.ephemeral_message_send !== null)
                ? exports.EphemeralMessageSend.fromPartial(object.ephemeral_message_send)
                : undefined;
        message.block_friend = (object.block_friend !== undefined && object.block_friend !== null)
            ? exports.BlockFriend.fromPartial(object.block_friend)
            : undefined;
        message.voice_reaction_send = (object.voice_reaction_send !== undefined && object.voice_reaction_send !== null)
            ? exports.VoiceReactionSend.fromPartial(object.voice_reaction_send)
            : undefined;
        message.mark_as_read = (object.mark_as_read !== undefined && object.mark_as_read !== null)
            ? exports.MarkAsRead.fromPartial(object.mark_as_read)
            : undefined;
        return message;
    },
};
function createBaseFollowEvent() {
    return {};
}
exports.FollowEvent = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFollowEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.FollowEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseFollowEvent();
        return message;
    },
};
function createBaseChannelCanvas() {
    return {
        id: "",
        title: "",
        content: "",
        creator_id: "",
        editor_id: "",
        is_default: false,
        channel_id: "",
        status: 0,
    };
}
exports.ChannelCanvas = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.content !== "") {
            writer.uint32(26).string(message.content);
        }
        if (message.creator_id !== "") {
            writer.uint32(34).string(message.creator_id);
        }
        if (message.editor_id !== "") {
            writer.uint32(42).string(message.editor_id);
        }
        if (message.is_default !== false) {
            writer.uint32(48).bool(message.is_default);
        }
        if (message.channel_id !== "") {
            writer.uint32(58).string(message.channel_id);
        }
        if (message.status !== 0) {
            writer.uint32(64).int32(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelCanvas();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.editor_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.is_default = reader.bool();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            content: isSet(object.content) ? globalThis.String(object.content) : "",
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            editor_id: isSet(object.editor_id) ? globalThis.String(object.editor_id) : "",
            is_default: isSet(object.is_default) ? globalThis.Boolean(object.is_default) : false,
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            status: isSet(object.status) ? globalThis.Number(object.status) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.content !== "") {
            obj.content = message.content;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.editor_id !== "") {
            obj.editor_id = message.editor_id;
        }
        if (message.is_default !== false) {
            obj.is_default = message.is_default;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.status !== 0) {
            obj.status = Math.round(message.status);
        }
        return obj;
    },
    create(base) {
        return exports.ChannelCanvas.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseChannelCanvas();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.title = (_b = object.title) !== null && _b !== void 0 ? _b : "";
        message.content = (_c = object.content) !== null && _c !== void 0 ? _c : "";
        message.creator_id = (_d = object.creator_id) !== null && _d !== void 0 ? _d : "";
        message.editor_id = (_e = object.editor_id) !== null && _e !== void 0 ? _e : "";
        message.is_default = (_f = object.is_default) !== null && _f !== void 0 ? _f : false;
        message.channel_id = (_g = object.channel_id) !== null && _g !== void 0 ? _g : "";
        message.status = (_h = object.status) !== null && _h !== void 0 ? _h : 0;
        return message;
    },
};
function createBaseIncomingCallPush() {
    return { receiver_id: "", json_data: "", channel_id: "", caller_id: "" };
}
exports.IncomingCallPush = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.receiver_id !== "") {
            writer.uint32(10).string(message.receiver_id);
        }
        if (message.json_data !== "") {
            writer.uint32(26).string(message.json_data);
        }
        if (message.channel_id !== "") {
            writer.uint32(34).string(message.channel_id);
        }
        if (message.caller_id !== "") {
            writer.uint32(42).string(message.caller_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIncomingCallPush();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.receiver_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.json_data = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.caller_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            receiver_id: isSet(object.receiver_id) ? globalThis.String(object.receiver_id) : "",
            json_data: isSet(object.json_data) ? globalThis.String(object.json_data) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            caller_id: isSet(object.caller_id) ? globalThis.String(object.caller_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.receiver_id !== "") {
            obj.receiver_id = message.receiver_id;
        }
        if (message.json_data !== "") {
            obj.json_data = message.json_data;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.caller_id !== "") {
            obj.caller_id = message.caller_id;
        }
        return obj;
    },
    create(base) {
        return exports.IncomingCallPush.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseIncomingCallPush();
        message.receiver_id = (_a = object.receiver_id) !== null && _a !== void 0 ? _a : "";
        message.json_data = (_b = object.json_data) !== null && _b !== void 0 ? _b : "";
        message.channel_id = (_c = object.channel_id) !== null && _c !== void 0 ? _c : "";
        message.caller_id = (_d = object.caller_id) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseWebrtcSignalingFwd() {
    return { receiver_id: "", data_type: 0, json_data: "", channel_id: "", caller_id: "" };
}
exports.WebrtcSignalingFwd = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.receiver_id !== "") {
            writer.uint32(10).string(message.receiver_id);
        }
        if (message.data_type !== 0) {
            writer.uint32(16).int32(message.data_type);
        }
        if (message.json_data !== "") {
            writer.uint32(26).string(message.json_data);
        }
        if (message.channel_id !== "") {
            writer.uint32(34).string(message.channel_id);
        }
        if (message.caller_id !== "") {
            writer.uint32(42).string(message.caller_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebrtcSignalingFwd();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.receiver_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.data_type = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.json_data = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.caller_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            receiver_id: isSet(object.receiver_id) ? globalThis.String(object.receiver_id) : "",
            data_type: isSet(object.data_type) ? globalThis.Number(object.data_type) : 0,
            json_data: isSet(object.json_data) ? globalThis.String(object.json_data) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            caller_id: isSet(object.caller_id) ? globalThis.String(object.caller_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.receiver_id !== "") {
            obj.receiver_id = message.receiver_id;
        }
        if (message.data_type !== 0) {
            obj.data_type = Math.round(message.data_type);
        }
        if (message.json_data !== "") {
            obj.json_data = message.json_data;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.caller_id !== "") {
            obj.caller_id = message.caller_id;
        }
        return obj;
    },
    create(base) {
        return exports.WebrtcSignalingFwd.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseWebrtcSignalingFwd();
        message.receiver_id = (_a = object.receiver_id) !== null && _a !== void 0 ? _a : "";
        message.data_type = (_b = object.data_type) !== null && _b !== void 0 ? _b : 0;
        message.json_data = (_c = object.json_data) !== null && _c !== void 0 ? _c : "";
        message.channel_id = (_d = object.channel_id) !== null && _d !== void 0 ? _d : "";
        message.caller_id = (_e = object.caller_id) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseSFUSignalingFwd() {
    return { clan_id: "", channel_id: "", data_type: 0, json_data: "", user_id: "" };
}
exports.SFUSignalingFwd = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.data_type !== 0) {
            writer.uint32(24).int32(message.data_type);
        }
        if (message.json_data !== "") {
            writer.uint32(34).string(message.json_data);
        }
        if (message.user_id !== "") {
            writer.uint32(42).string(message.user_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSFUSignalingFwd();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.data_type = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.json_data = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            data_type: isSet(object.data_type) ? globalThis.Number(object.data_type) : 0,
            json_data: isSet(object.json_data) ? globalThis.String(object.json_data) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.data_type !== 0) {
            obj.data_type = Math.round(message.data_type);
        }
        if (message.json_data !== "") {
            obj.json_data = message.json_data;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        return obj;
    },
    create(base) {
        return exports.SFUSignalingFwd.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseSFUSignalingFwd();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.data_type = (_c = object.data_type) !== null && _c !== void 0 ? _c : 0;
        message.json_data = (_d = object.json_data) !== null && _d !== void 0 ? _d : "";
        message.user_id = (_e = object.user_id) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseAddClanUserEvent() {
    return { clan_id: "", user: undefined, invitor: "" };
}
exports.AddClanUserEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.user !== undefined) {
            exports.UserProfileRedis.encode(message.user, writer.uint32(18).fork()).ldelim();
        }
        if (message.invitor !== "") {
            writer.uint32(26).string(message.invitor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddClanUserEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user = exports.UserProfileRedis.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.invitor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            user: isSet(object.user) ? exports.UserProfileRedis.fromJSON(object.user) : undefined,
            invitor: isSet(object.invitor) ? globalThis.String(object.invitor) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.user !== undefined) {
            obj.user = exports.UserProfileRedis.toJSON(message.user);
        }
        if (message.invitor !== "") {
            obj.invitor = message.invitor;
        }
        return obj;
    },
    create(base) {
        return exports.AddClanUserEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAddClanUserEvent();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.user = (object.user !== undefined && object.user !== null)
            ? exports.UserProfileRedis.fromPartial(object.user)
            : undefined;
        message.invitor = (_b = object.invitor) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseRoleAssignedEvent() {
    return { ClanId: "", role_id: "", user_ids_assigned: [], user_ids_removed: [] };
}
exports.RoleAssignedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.ClanId !== "") {
            writer.uint32(10).string(message.ClanId);
        }
        if (message.role_id !== "") {
            writer.uint32(18).string(message.role_id);
        }
        for (const v of message.user_ids_assigned) {
            writer.uint32(26).string(v);
        }
        for (const v of message.user_ids_removed) {
            writer.uint32(34).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRoleAssignedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.ClanId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.role_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.user_ids_assigned.push(reader.string());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.user_ids_removed.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ClanId: isSet(object.ClanId) ? globalThis.String(object.ClanId) : "",
            role_id: isSet(object.role_id) ? globalThis.String(object.role_id) : "",
            user_ids_assigned: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_ids_assigned)
                ? object.user_ids_assigned.map((e) => globalThis.String(e))
                : [],
            user_ids_removed: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_ids_removed)
                ? object.user_ids_removed.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.ClanId !== "") {
            obj.ClanId = message.ClanId;
        }
        if (message.role_id !== "") {
            obj.role_id = message.role_id;
        }
        if ((_a = message.user_ids_assigned) === null || _a === void 0 ? void 0 : _a.length) {
            obj.user_ids_assigned = message.user_ids_assigned;
        }
        if ((_b = message.user_ids_removed) === null || _b === void 0 ? void 0 : _b.length) {
            obj.user_ids_removed = message.user_ids_removed;
        }
        return obj;
    },
    create(base) {
        return exports.RoleAssignedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseRoleAssignedEvent();
        message.ClanId = (_a = object.ClanId) !== null && _a !== void 0 ? _a : "";
        message.role_id = (_b = object.role_id) !== null && _b !== void 0 ? _b : "";
        message.user_ids_assigned = ((_c = object.user_ids_assigned) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.user_ids_removed = ((_d = object.user_ids_removed) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        return message;
    },
};
function createBasePermissionRoleChannel() {
    return { permission_id: "", active: false };
}
exports.PermissionRoleChannel = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.permission_id !== "") {
            writer.uint32(10).string(message.permission_id);
        }
        if (message.active !== false) {
            writer.uint32(16).bool(message.active);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePermissionRoleChannel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.permission_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.active = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            permission_id: isSet(object.permission_id) ? globalThis.String(object.permission_id) : "",
            active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.permission_id !== "") {
            obj.permission_id = message.permission_id;
        }
        if (message.active !== false) {
            obj.active = message.active;
        }
        return obj;
    },
    create(base) {
        return exports.PermissionRoleChannel.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBasePermissionRoleChannel();
        message.permission_id = (_a = object.permission_id) !== null && _a !== void 0 ? _a : "";
        message.active = (_b = object.active) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseHashtagDm() {
    return {
        channel_id: "",
        channel_label: "",
        clan_id: "",
        clan_name: "",
        meeting_code: "",
        type: 0,
        channel_private: 0,
        parent_id: "",
    };
}
exports.HashtagDm = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        if (message.channel_label !== "") {
            writer.uint32(18).string(message.channel_label);
        }
        if (message.clan_id !== "") {
            writer.uint32(26).string(message.clan_id);
        }
        if (message.clan_name !== "") {
            writer.uint32(34).string(message.clan_name);
        }
        if (message.meeting_code !== "") {
            writer.uint32(42).string(message.meeting_code);
        }
        if (message.type !== 0) {
            writer.uint32(48).int32(message.type);
        }
        if (message.channel_private !== 0) {
            writer.uint32(56).int32(message.channel_private);
        }
        if (message.parent_id !== "") {
            writer.uint32(66).string(message.parent_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHashtagDm();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_label = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clan_name = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.meeting_code = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.channel_private = reader.int32();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.parent_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            channel_label: isSet(object.channel_label) ? globalThis.String(object.channel_label) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
            meeting_code: isSet(object.meeting_code) ? globalThis.String(object.meeting_code) : "",
            type: isSet(object.type) ? globalThis.Number(object.type) : 0,
            channel_private: isSet(object.channel_private) ? globalThis.Number(object.channel_private) : 0,
            parent_id: isSet(object.parent_id) ? globalThis.String(object.parent_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.channel_label !== "") {
            obj.channel_label = message.channel_label;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.clan_name !== "") {
            obj.clan_name = message.clan_name;
        }
        if (message.meeting_code !== "") {
            obj.meeting_code = message.meeting_code;
        }
        if (message.type !== 0) {
            obj.type = Math.round(message.type);
        }
        if (message.channel_private !== 0) {
            obj.channel_private = Math.round(message.channel_private);
        }
        if (message.parent_id !== "") {
            obj.parent_id = message.parent_id;
        }
        return obj;
    },
    create(base) {
        return exports.HashtagDm.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseHashtagDm();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        message.channel_label = (_b = object.channel_label) !== null && _b !== void 0 ? _b : "";
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : "";
        message.clan_name = (_d = object.clan_name) !== null && _d !== void 0 ? _d : "";
        message.meeting_code = (_e = object.meeting_code) !== null && _e !== void 0 ? _e : "";
        message.type = (_f = object.type) !== null && _f !== void 0 ? _f : 0;
        message.channel_private = (_g = object.channel_private) !== null && _g !== void 0 ? _g : 0;
        message.parent_id = (_h = object.parent_id) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseChannelDescription() {
    return {
        clan_id: "",
        channel_id: "",
        type: undefined,
        channel_label: "",
        channel_private: 0,
        meeting_code: "",
        clan_name: "",
        parent_id: "",
        last_sent_message: undefined,
    };
}
exports.ChannelDescription = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.type !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.type }, writer.uint32(26).fork()).ldelim();
        }
        if (message.channel_label !== "") {
            writer.uint32(34).string(message.channel_label);
        }
        if (message.channel_private !== 0) {
            writer.uint32(40).int32(message.channel_private);
        }
        if (message.meeting_code !== "") {
            writer.uint32(50).string(message.meeting_code);
        }
        if (message.clan_name !== "") {
            writer.uint32(58).string(message.clan_name);
        }
        if (message.parent_id !== "") {
            writer.uint32(66).string(message.parent_id);
        }
        if (message.last_sent_message !== undefined) {
            api_1.ChannelMessageHeader.encode(message.last_sent_message, writer.uint32(98).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelDescription();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.type = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.channel_label = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.channel_private = reader.int32();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.meeting_code = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.clan_name = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.parent_id = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.last_sent_message = api_1.ChannelMessageHeader.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            type: isSet(object.type) ? Number(object.type) : undefined,
            channel_label: isSet(object.channel_label) ? globalThis.String(object.channel_label) : "",
            channel_private: isSet(object.channel_private) ? globalThis.Number(object.channel_private) : 0,
            meeting_code: isSet(object.meeting_code) ? globalThis.String(object.meeting_code) : "",
            clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
            parent_id: isSet(object.parent_id) ? globalThis.String(object.parent_id) : "",
            last_sent_message: isSet(object.last_sent_message)
                ? api_1.ChannelMessageHeader.fromJSON(object.last_sent_message)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.type !== undefined) {
            obj.type = message.type;
        }
        if (message.channel_label !== "") {
            obj.channel_label = message.channel_label;
        }
        if (message.channel_private !== 0) {
            obj.channel_private = Math.round(message.channel_private);
        }
        if (message.meeting_code !== "") {
            obj.meeting_code = message.meeting_code;
        }
        if (message.clan_name !== "") {
            obj.clan_name = message.clan_name;
        }
        if (message.parent_id !== "") {
            obj.parent_id = message.parent_id;
        }
        if (message.last_sent_message !== undefined) {
            obj.last_sent_message = api_1.ChannelMessageHeader.toJSON(message.last_sent_message);
        }
        return obj;
    },
    create(base) {
        return exports.ChannelDescription.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseChannelDescription();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.type = (_c = object.type) !== null && _c !== void 0 ? _c : undefined;
        message.channel_label = (_d = object.channel_label) !== null && _d !== void 0 ? _d : "";
        message.channel_private = (_e = object.channel_private) !== null && _e !== void 0 ? _e : 0;
        message.meeting_code = (_f = object.meeting_code) !== null && _f !== void 0 ? _f : "";
        message.clan_name = (_g = object.clan_name) !== null && _g !== void 0 ? _g : "";
        message.parent_id = (_h = object.parent_id) !== null && _h !== void 0 ? _h : "";
        message.last_sent_message = (object.last_sent_message !== undefined && object.last_sent_message !== null)
            ? api_1.ChannelMessageHeader.fromPartial(object.last_sent_message)
            : undefined;
        return message;
    },
};
function createBaseClanEmoji() {
    return { id: "", src: "", shortname: "", category: "", creator_id: "", clan_id: "", logo: "", clan_name: "" };
}
exports.ClanEmoji = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.src !== "") {
            writer.uint32(18).string(message.src);
        }
        if (message.shortname !== "") {
            writer.uint32(26).string(message.shortname);
        }
        if (message.category !== "") {
            writer.uint32(34).string(message.category);
        }
        if (message.creator_id !== "") {
            writer.uint32(42).string(message.creator_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(50).string(message.clan_id);
        }
        if (message.logo !== "") {
            writer.uint32(58).string(message.logo);
        }
        if (message.clan_name !== "") {
            writer.uint32(66).string(message.clan_name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanEmoji();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.src = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.shortname = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.category = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.logo = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.clan_name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            src: isSet(object.src) ? globalThis.String(object.src) : "",
            shortname: isSet(object.shortname) ? globalThis.String(object.shortname) : "",
            category: isSet(object.category) ? globalThis.String(object.category) : "",
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
            clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.src !== "") {
            obj.src = message.src;
        }
        if (message.shortname !== "") {
            obj.shortname = message.shortname;
        }
        if (message.category !== "") {
            obj.category = message.category;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.logo !== "") {
            obj.logo = message.logo;
        }
        if (message.clan_name !== "") {
            obj.clan_name = message.clan_name;
        }
        return obj;
    },
    create(base) {
        return exports.ClanEmoji.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseClanEmoji();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.src = (_b = object.src) !== null && _b !== void 0 ? _b : "";
        message.shortname = (_c = object.shortname) !== null && _c !== void 0 ? _c : "";
        message.category = (_d = object.category) !== null && _d !== void 0 ? _d : "";
        message.creator_id = (_e = object.creator_id) !== null && _e !== void 0 ? _e : "";
        message.clan_id = (_f = object.clan_id) !== null && _f !== void 0 ? _f : "";
        message.logo = (_g = object.logo) !== null && _g !== void 0 ? _g : "";
        message.clan_name = (_h = object.clan_name) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseChannel() {
    return { id: "", presences: [], self: undefined, chanel_label: "", clan_logo: "", category_name: "" };
}
exports.Channel = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        for (const v of message.presences) {
            exports.UserPresence.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.self !== undefined) {
            exports.UserPresence.encode(message.self, writer.uint32(26).fork()).ldelim();
        }
        if (message.chanel_label !== "") {
            writer.uint32(34).string(message.chanel_label);
        }
        if (message.clan_logo !== "") {
            writer.uint32(42).string(message.clan_logo);
        }
        if (message.category_name !== "") {
            writer.uint32(50).string(message.category_name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.presences.push(exports.UserPresence.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.self = exports.UserPresence.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.chanel_label = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.clan_logo = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.category_name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            presences: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.presences)
                ? object.presences.map((e) => exports.UserPresence.fromJSON(e))
                : [],
            self: isSet(object.self) ? exports.UserPresence.fromJSON(object.self) : undefined,
            chanel_label: isSet(object.chanel_label) ? globalThis.String(object.chanel_label) : "",
            clan_logo: isSet(object.clan_logo) ? globalThis.String(object.clan_logo) : "",
            category_name: isSet(object.category_name) ? globalThis.String(object.category_name) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if ((_a = message.presences) === null || _a === void 0 ? void 0 : _a.length) {
            obj.presences = message.presences.map((e) => exports.UserPresence.toJSON(e));
        }
        if (message.self !== undefined) {
            obj.self = exports.UserPresence.toJSON(message.self);
        }
        if (message.chanel_label !== "") {
            obj.chanel_label = message.chanel_label;
        }
        if (message.clan_logo !== "") {
            obj.clan_logo = message.clan_logo;
        }
        if (message.category_name !== "") {
            obj.category_name = message.category_name;
        }
        return obj;
    },
    create(base) {
        return exports.Channel.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseChannel();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.presences = ((_b = object.presences) === null || _b === void 0 ? void 0 : _b.map((e) => exports.UserPresence.fromPartial(e))) || [];
        message.self = (object.self !== undefined && object.self !== null)
            ? exports.UserPresence.fromPartial(object.self)
            : undefined;
        message.chanel_label = (_c = object.chanel_label) !== null && _c !== void 0 ? _c : "";
        message.clan_logo = (_d = object.clan_logo) !== null && _d !== void 0 ? _d : "";
        message.category_name = (_e = object.category_name) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseClanJoin() {
    return { clan_id: "" };
}
exports.ClanJoin = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanJoin();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.ClanJoin.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseClanJoin();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseChannelJoin() {
    return { clan_id: "", channel_id: "", channel_type: 0, is_public: false };
}
exports.ChannelJoin = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.channel_type !== 0) {
            writer.uint32(24).int32(message.channel_type);
        }
        if (message.is_public !== false) {
            writer.uint32(32).bool(message.is_public);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelJoin();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.channel_type = reader.int32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.is_public = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            channel_type: isSet(object.channel_type) ? globalThis.Number(object.channel_type) : 0,
            is_public: isSet(object.is_public) ? globalThis.Boolean(object.is_public) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.channel_type !== 0) {
            obj.channel_type = Math.round(message.channel_type);
        }
        if (message.is_public !== false) {
            obj.is_public = message.is_public;
        }
        return obj;
    },
    create(base) {
        return exports.ChannelJoin.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseChannelJoin();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.channel_type = (_c = object.channel_type) !== null && _c !== void 0 ? _c : 0;
        message.is_public = (_d = object.is_public) !== null && _d !== void 0 ? _d : false;
        return message;
    },
};
function createBaseChannelLeave() {
    return { clan_id: "", channel_id: "", channel_type: 0, is_public: false };
}
exports.ChannelLeave = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.channel_type !== 0) {
            writer.uint32(24).int32(message.channel_type);
        }
        if (message.is_public !== false) {
            writer.uint32(32).bool(message.is_public);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelLeave();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.channel_type = reader.int32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.is_public = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            channel_type: isSet(object.channel_type) ? globalThis.Number(object.channel_type) : 0,
            is_public: isSet(object.is_public) ? globalThis.Boolean(object.is_public) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.channel_type !== 0) {
            obj.channel_type = Math.round(message.channel_type);
        }
        if (message.is_public !== false) {
            obj.is_public = message.is_public;
        }
        return obj;
    },
    create(base) {
        return exports.ChannelLeave.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseChannelLeave();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.channel_type = (_c = object.channel_type) !== null && _c !== void 0 ? _c : 0;
        message.is_public = (_d = object.is_public) !== null && _d !== void 0 ? _d : false;
        return message;
    },
};
function createBaseChannelMessageAck() {
    return {
        channel_id: "",
        message_id: "",
        code: undefined,
        username: "",
        create_time: undefined,
        update_time: undefined,
        persistent: undefined,
        clan_logo: "",
        category_name: "",
    };
}
exports.ChannelMessageAck = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        if (message.message_id !== "") {
            writer.uint32(18).string(message.message_id);
        }
        if (message.code !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.code }, writer.uint32(26).fork()).ldelim();
        }
        if (message.username !== "") {
            writer.uint32(34).string(message.username);
        }
        if (message.create_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.create_time), writer.uint32(42).fork()).ldelim();
        }
        if (message.update_time !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.update_time), writer.uint32(50).fork()).ldelim();
        }
        if (message.persistent !== undefined) {
            wrappers_1.BoolValue.encode({ value: message.persistent }, writer.uint32(58).fork()).ldelim();
        }
        if (message.clan_logo !== "") {
            writer.uint32(66).string(message.clan_logo);
        }
        if (message.category_name !== "") {
            writer.uint32(74).string(message.category_name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelMessageAck();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.code = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.create_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.update_time = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.persistent = wrappers_1.BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.clan_logo = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.category_name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
            code: isSet(object.code) ? Number(object.code) : undefined,
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            create_time: isSet(object.create_time) ? fromJsonTimestamp(object.create_time) : undefined,
            update_time: isSet(object.update_time) ? fromJsonTimestamp(object.update_time) : undefined,
            persistent: isSet(object.persistent) ? Boolean(object.persistent) : undefined,
            clan_logo: isSet(object.clan_logo) ? globalThis.String(object.clan_logo) : "",
            category_name: isSet(object.category_name) ? globalThis.String(object.category_name) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.message_id !== "") {
            obj.message_id = message.message_id;
        }
        if (message.code !== undefined) {
            obj.code = message.code;
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.create_time !== undefined) {
            obj.create_time = message.create_time.toISOString();
        }
        if (message.update_time !== undefined) {
            obj.update_time = message.update_time.toISOString();
        }
        if (message.persistent !== undefined) {
            obj.persistent = message.persistent;
        }
        if (message.clan_logo !== "") {
            obj.clan_logo = message.clan_logo;
        }
        if (message.category_name !== "") {
            obj.category_name = message.category_name;
        }
        return obj;
    },
    create(base) {
        return exports.ChannelMessageAck.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseChannelMessageAck();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        message.message_id = (_b = object.message_id) !== null && _b !== void 0 ? _b : "";
        message.code = (_c = object.code) !== null && _c !== void 0 ? _c : undefined;
        message.username = (_d = object.username) !== null && _d !== void 0 ? _d : "";
        message.create_time = (_e = object.create_time) !== null && _e !== void 0 ? _e : undefined;
        message.update_time = (_f = object.update_time) !== null && _f !== void 0 ? _f : undefined;
        message.persistent = (_g = object.persistent) !== null && _g !== void 0 ? _g : undefined;
        message.clan_logo = (_h = object.clan_logo) !== null && _h !== void 0 ? _h : "";
        message.category_name = (_j = object.category_name) !== null && _j !== void 0 ? _j : "";
        return message;
    },
};
function createBaseEphemeralMessageSend() {
    return { message: undefined, receiver_id: "" };
}
exports.EphemeralMessageSend = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.message !== undefined) {
            exports.ChannelMessageSend.encode(message.message, writer.uint32(10).fork()).ldelim();
        }
        if (message.receiver_id !== "") {
            writer.uint32(18).string(message.receiver_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEphemeralMessageSend();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = exports.ChannelMessageSend.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.receiver_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            message: isSet(object.message) ? exports.ChannelMessageSend.fromJSON(object.message) : undefined,
            receiver_id: isSet(object.receiver_id) ? globalThis.String(object.receiver_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.message !== undefined) {
            obj.message = exports.ChannelMessageSend.toJSON(message.message);
        }
        if (message.receiver_id !== "") {
            obj.receiver_id = message.receiver_id;
        }
        return obj;
    },
    create(base) {
        return exports.EphemeralMessageSend.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEphemeralMessageSend();
        message.message = (object.message !== undefined && object.message !== null)
            ? exports.ChannelMessageSend.fromPartial(object.message)
            : undefined;
        message.receiver_id = (_a = object.receiver_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseVoiceReactionSend() {
    return { emojis: [], channel_id: "", sender_id: "" };
}
exports.VoiceReactionSend = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.emojis) {
            writer.uint32(10).string(v);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.sender_id !== "") {
            writer.uint32(26).string(message.sender_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVoiceReactionSend();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.emojis.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.sender_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            emojis: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.emojis) ? object.emojis.map((e) => globalThis.String(e)) : [],
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            sender_id: isSet(object.sender_id) ? globalThis.String(object.sender_id) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.emojis) === null || _a === void 0 ? void 0 : _a.length) {
            obj.emojis = message.emojis;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.sender_id !== "") {
            obj.sender_id = message.sender_id;
        }
        return obj;
    },
    create(base) {
        return exports.VoiceReactionSend.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseVoiceReactionSend();
        message.emojis = ((_a = object.emojis) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.sender_id = (_c = object.sender_id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseMarkAsRead() {
    return { channel_id: "", category_id: "", clan_id: "" };
}
exports.MarkAsRead = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        if (message.category_id !== "") {
            writer.uint32(18).string(message.category_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(26).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMarkAsRead();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.category_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            category_id: isSet(object.category_id) ? globalThis.String(object.category_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.category_id !== "") {
            obj.category_id = message.category_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.MarkAsRead.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMarkAsRead();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        message.category_id = (_b = object.category_id) !== null && _b !== void 0 ? _b : "";
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseChannelMessageSend() {
    return {
        clan_id: "",
        channel_id: "",
        content: "",
        mentions: [],
        attachments: [],
        references: [],
        mode: 0,
        anonymous_message: false,
        mention_everyone: false,
        avatar: "",
        is_public: false,
        code: 0,
        topic_id: "",
    };
}
exports.ChannelMessageSend = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.content !== "") {
            writer.uint32(26).string(message.content);
        }
        for (const v of message.mentions) {
            api_1.MessageMention.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.attachments) {
            api_1.MessageAttachment.encode(v, writer.uint32(42).fork()).ldelim();
        }
        for (const v of message.references) {
            api_1.MessageRef.encode(v, writer.uint32(50).fork()).ldelim();
        }
        if (message.mode !== 0) {
            writer.uint32(56).int32(message.mode);
        }
        if (message.anonymous_message !== false) {
            writer.uint32(64).bool(message.anonymous_message);
        }
        if (message.mention_everyone !== false) {
            writer.uint32(72).bool(message.mention_everyone);
        }
        if (message.avatar !== "") {
            writer.uint32(82).string(message.avatar);
        }
        if (message.is_public !== false) {
            writer.uint32(88).bool(message.is_public);
        }
        if (message.code !== 0) {
            writer.uint32(96).int32(message.code);
        }
        if (message.topic_id !== "") {
            writer.uint32(106).string(message.topic_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelMessageSend();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.mentions.push(api_1.MessageMention.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.attachments.push(api_1.MessageAttachment.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.references.push(api_1.MessageRef.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.mode = reader.int32();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.anonymous_message = reader.bool();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.mention_everyone = reader.bool();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.avatar = reader.string();
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.is_public = reader.bool();
                    continue;
                case 12:
                    if (tag !== 96) {
                        break;
                    }
                    message.code = reader.int32();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.topic_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            content: isSet(object.content) ? globalThis.String(object.content) : "",
            mentions: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.mentions)
                ? object.mentions.map((e) => api_1.MessageMention.fromJSON(e))
                : [],
            attachments: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.attachments)
                ? object.attachments.map((e) => api_1.MessageAttachment.fromJSON(e))
                : [],
            references: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.references)
                ? object.references.map((e) => api_1.MessageRef.fromJSON(e))
                : [],
            mode: isSet(object.mode) ? globalThis.Number(object.mode) : 0,
            anonymous_message: isSet(object.anonymous_message) ? globalThis.Boolean(object.anonymous_message) : false,
            mention_everyone: isSet(object.mention_everyone) ? globalThis.Boolean(object.mention_everyone) : false,
            avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
            is_public: isSet(object.is_public) ? globalThis.Boolean(object.is_public) : false,
            code: isSet(object.code) ? globalThis.Number(object.code) : 0,
            topic_id: isSet(object.topic_id) ? globalThis.String(object.topic_id) : "",
        };
    },
    toJSON(message) {
        var _a, _b, _c;
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.content !== "") {
            obj.content = message.content;
        }
        if ((_a = message.mentions) === null || _a === void 0 ? void 0 : _a.length) {
            obj.mentions = message.mentions.map((e) => api_1.MessageMention.toJSON(e));
        }
        if ((_b = message.attachments) === null || _b === void 0 ? void 0 : _b.length) {
            obj.attachments = message.attachments.map((e) => api_1.MessageAttachment.toJSON(e));
        }
        if ((_c = message.references) === null || _c === void 0 ? void 0 : _c.length) {
            obj.references = message.references.map((e) => api_1.MessageRef.toJSON(e));
        }
        if (message.mode !== 0) {
            obj.mode = Math.round(message.mode);
        }
        if (message.anonymous_message !== false) {
            obj.anonymous_message = message.anonymous_message;
        }
        if (message.mention_everyone !== false) {
            obj.mention_everyone = message.mention_everyone;
        }
        if (message.avatar !== "") {
            obj.avatar = message.avatar;
        }
        if (message.is_public !== false) {
            obj.is_public = message.is_public;
        }
        if (message.code !== 0) {
            obj.code = Math.round(message.code);
        }
        if (message.topic_id !== "") {
            obj.topic_id = message.topic_id;
        }
        return obj;
    },
    create(base) {
        return exports.ChannelMessageSend.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = createBaseChannelMessageSend();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.content = (_c = object.content) !== null && _c !== void 0 ? _c : "";
        message.mentions = ((_d = object.mentions) === null || _d === void 0 ? void 0 : _d.map((e) => api_1.MessageMention.fromPartial(e))) || [];
        message.attachments = ((_e = object.attachments) === null || _e === void 0 ? void 0 : _e.map((e) => api_1.MessageAttachment.fromPartial(e))) || [];
        message.references = ((_f = object.references) === null || _f === void 0 ? void 0 : _f.map((e) => api_1.MessageRef.fromPartial(e))) || [];
        message.mode = (_g = object.mode) !== null && _g !== void 0 ? _g : 0;
        message.anonymous_message = (_h = object.anonymous_message) !== null && _h !== void 0 ? _h : false;
        message.mention_everyone = (_j = object.mention_everyone) !== null && _j !== void 0 ? _j : false;
        message.avatar = (_k = object.avatar) !== null && _k !== void 0 ? _k : "";
        message.is_public = (_l = object.is_public) !== null && _l !== void 0 ? _l : false;
        message.code = (_m = object.code) !== null && _m !== void 0 ? _m : 0;
        message.topic_id = (_o = object.topic_id) !== null && _o !== void 0 ? _o : "";
        return message;
    },
};
function createBaseChannelMessageUpdate() {
    return {
        clan_id: "",
        channel_id: "",
        message_id: "",
        content: "",
        mentions: [],
        attachments: [],
        mode: 0,
        is_public: false,
        hide_editted: false,
        topic_id: "",
        is_update_msg_topic: false,
    };
}
exports.ChannelMessageUpdate = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.message_id !== "") {
            writer.uint32(26).string(message.message_id);
        }
        if (message.content !== "") {
            writer.uint32(34).string(message.content);
        }
        for (const v of message.mentions) {
            api_1.MessageMention.encode(v, writer.uint32(42).fork()).ldelim();
        }
        for (const v of message.attachments) {
            api_1.MessageAttachment.encode(v, writer.uint32(50).fork()).ldelim();
        }
        if (message.mode !== 0) {
            writer.uint32(56).int32(message.mode);
        }
        if (message.is_public !== false) {
            writer.uint32(64).bool(message.is_public);
        }
        if (message.hide_editted !== false) {
            writer.uint32(72).bool(message.hide_editted);
        }
        if (message.topic_id !== "") {
            writer.uint32(82).string(message.topic_id);
        }
        if (message.is_update_msg_topic !== false) {
            writer.uint32(88).bool(message.is_update_msg_topic);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelMessageUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.mentions.push(api_1.MessageMention.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.attachments.push(api_1.MessageAttachment.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.mode = reader.int32();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.is_public = reader.bool();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.hide_editted = reader.bool();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.topic_id = reader.string();
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.is_update_msg_topic = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
            content: isSet(object.content) ? globalThis.String(object.content) : "",
            mentions: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.mentions)
                ? object.mentions.map((e) => api_1.MessageMention.fromJSON(e))
                : [],
            attachments: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.attachments)
                ? object.attachments.map((e) => api_1.MessageAttachment.fromJSON(e))
                : [],
            mode: isSet(object.mode) ? globalThis.Number(object.mode) : 0,
            is_public: isSet(object.is_public) ? globalThis.Boolean(object.is_public) : false,
            hide_editted: isSet(object.hide_editted) ? globalThis.Boolean(object.hide_editted) : false,
            topic_id: isSet(object.topic_id) ? globalThis.String(object.topic_id) : "",
            is_update_msg_topic: isSet(object.is_update_msg_topic) ? globalThis.Boolean(object.is_update_msg_topic) : false,
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.message_id !== "") {
            obj.message_id = message.message_id;
        }
        if (message.content !== "") {
            obj.content = message.content;
        }
        if ((_a = message.mentions) === null || _a === void 0 ? void 0 : _a.length) {
            obj.mentions = message.mentions.map((e) => api_1.MessageMention.toJSON(e));
        }
        if ((_b = message.attachments) === null || _b === void 0 ? void 0 : _b.length) {
            obj.attachments = message.attachments.map((e) => api_1.MessageAttachment.toJSON(e));
        }
        if (message.mode !== 0) {
            obj.mode = Math.round(message.mode);
        }
        if (message.is_public !== false) {
            obj.is_public = message.is_public;
        }
        if (message.hide_editted !== false) {
            obj.hide_editted = message.hide_editted;
        }
        if (message.topic_id !== "") {
            obj.topic_id = message.topic_id;
        }
        if (message.is_update_msg_topic !== false) {
            obj.is_update_msg_topic = message.is_update_msg_topic;
        }
        return obj;
    },
    create(base) {
        return exports.ChannelMessageUpdate.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseChannelMessageUpdate();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.message_id = (_c = object.message_id) !== null && _c !== void 0 ? _c : "";
        message.content = (_d = object.content) !== null && _d !== void 0 ? _d : "";
        message.mentions = ((_e = object.mentions) === null || _e === void 0 ? void 0 : _e.map((e) => api_1.MessageMention.fromPartial(e))) || [];
        message.attachments = ((_f = object.attachments) === null || _f === void 0 ? void 0 : _f.map((e) => api_1.MessageAttachment.fromPartial(e))) || [];
        message.mode = (_g = object.mode) !== null && _g !== void 0 ? _g : 0;
        message.is_public = (_h = object.is_public) !== null && _h !== void 0 ? _h : false;
        message.hide_editted = (_j = object.hide_editted) !== null && _j !== void 0 ? _j : false;
        message.topic_id = (_k = object.topic_id) !== null && _k !== void 0 ? _k : "";
        message.is_update_msg_topic = (_l = object.is_update_msg_topic) !== null && _l !== void 0 ? _l : false;
        return message;
    },
};
function createBaseChannelMessageRemove() {
    return {
        clan_id: "",
        channel_id: "",
        message_id: "",
        mode: 0,
        is_public: false,
        has_attachment: false,
        topic_id: "",
    };
}
exports.ChannelMessageRemove = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.message_id !== "") {
            writer.uint32(26).string(message.message_id);
        }
        if (message.mode !== 0) {
            writer.uint32(32).int32(message.mode);
        }
        if (message.is_public !== false) {
            writer.uint32(40).bool(message.is_public);
        }
        if (message.has_attachment !== false) {
            writer.uint32(48).bool(message.has_attachment);
        }
        if (message.topic_id !== "") {
            writer.uint32(58).string(message.topic_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelMessageRemove();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.mode = reader.int32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.is_public = reader.bool();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.has_attachment = reader.bool();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.topic_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
            mode: isSet(object.mode) ? globalThis.Number(object.mode) : 0,
            is_public: isSet(object.is_public) ? globalThis.Boolean(object.is_public) : false,
            has_attachment: isSet(object.has_attachment) ? globalThis.Boolean(object.has_attachment) : false,
            topic_id: isSet(object.topic_id) ? globalThis.String(object.topic_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.message_id !== "") {
            obj.message_id = message.message_id;
        }
        if (message.mode !== 0) {
            obj.mode = Math.round(message.mode);
        }
        if (message.is_public !== false) {
            obj.is_public = message.is_public;
        }
        if (message.has_attachment !== false) {
            obj.has_attachment = message.has_attachment;
        }
        if (message.topic_id !== "") {
            obj.topic_id = message.topic_id;
        }
        return obj;
    },
    create(base) {
        return exports.ChannelMessageRemove.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseChannelMessageRemove();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.message_id = (_c = object.message_id) !== null && _c !== void 0 ? _c : "";
        message.mode = (_d = object.mode) !== null && _d !== void 0 ? _d : 0;
        message.is_public = (_e = object.is_public) !== null && _e !== void 0 ? _e : false;
        message.has_attachment = (_f = object.has_attachment) !== null && _f !== void 0 ? _f : false;
        message.topic_id = (_g = object.topic_id) !== null && _g !== void 0 ? _g : "";
        return message;
    },
};
function createBaseChannelPresenceEvent() {
    return { channel_id: "", joins: [], leaves: [], clan_logo: "", category_name: "", mode: 0 };
}
exports.ChannelPresenceEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        for (const v of message.joins) {
            exports.UserPresence.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.leaves) {
            exports.UserPresence.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (message.clan_logo !== "") {
            writer.uint32(34).string(message.clan_logo);
        }
        if (message.category_name !== "") {
            writer.uint32(42).string(message.category_name);
        }
        if (message.mode !== 0) {
            writer.uint32(48).int32(message.mode);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelPresenceEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.joins.push(exports.UserPresence.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.leaves.push(exports.UserPresence.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clan_logo = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.category_name = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.mode = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            joins: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.joins) ? object.joins.map((e) => exports.UserPresence.fromJSON(e)) : [],
            leaves: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.leaves) ? object.leaves.map((e) => exports.UserPresence.fromJSON(e)) : [],
            clan_logo: isSet(object.clan_logo) ? globalThis.String(object.clan_logo) : "",
            category_name: isSet(object.category_name) ? globalThis.String(object.category_name) : "",
            mode: isSet(object.mode) ? globalThis.Number(object.mode) : 0,
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if ((_a = message.joins) === null || _a === void 0 ? void 0 : _a.length) {
            obj.joins = message.joins.map((e) => exports.UserPresence.toJSON(e));
        }
        if ((_b = message.leaves) === null || _b === void 0 ? void 0 : _b.length) {
            obj.leaves = message.leaves.map((e) => exports.UserPresence.toJSON(e));
        }
        if (message.clan_logo !== "") {
            obj.clan_logo = message.clan_logo;
        }
        if (message.category_name !== "") {
            obj.category_name = message.category_name;
        }
        if (message.mode !== 0) {
            obj.mode = Math.round(message.mode);
        }
        return obj;
    },
    create(base) {
        return exports.ChannelPresenceEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseChannelPresenceEvent();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        message.joins = ((_b = object.joins) === null || _b === void 0 ? void 0 : _b.map((e) => exports.UserPresence.fromPartial(e))) || [];
        message.leaves = ((_c = object.leaves) === null || _c === void 0 ? void 0 : _c.map((e) => exports.UserPresence.fromPartial(e))) || [];
        message.clan_logo = (_d = object.clan_logo) !== null && _d !== void 0 ? _d : "";
        message.category_name = (_e = object.category_name) !== null && _e !== void 0 ? _e : "";
        message.mode = (_f = object.mode) !== null && _f !== void 0 ? _f : 0;
        return message;
    },
};
function createBaseError() {
    return { code: 0, message: "", context: {} };
}
exports.Error = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.code !== 0) {
            writer.uint32(8).int32(message.code);
        }
        if (message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        Object.entries(message.context).forEach(([key, value]) => {
            exports.Error_ContextEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.code = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = exports.Error_ContextEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.context[entry3.key] = entry3.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code: isSet(object.code) ? globalThis.Number(object.code) : 0,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
            context: isObject(object.context)
                ? Object.entries(object.context).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== 0) {
            obj.code = Math.round(message.code);
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        if (message.context) {
            const entries = Object.entries(message.context);
            if (entries.length > 0) {
                obj.context = {};
                entries.forEach(([k, v]) => {
                    obj.context[k] = v;
                });
            }
        }
        return obj;
    },
    create(base) {
        return exports.Error.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseError();
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : 0;
        message.message = (_b = object.message) !== null && _b !== void 0 ? _b : "";
        message.context = Object.entries((_c = object.context) !== null && _c !== void 0 ? _c : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseError_ContextEntry() {
    return { key: "", value: "" };
}
exports.Error_ContextEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseError_ContextEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.Error_ContextEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseError_ContextEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseNotifications() {
    return { notifications: [] };
}
exports.Notifications = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.notifications) {
            api_1.Notification.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNotifications();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.notifications.push(api_1.Notification.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            notifications: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.notifications)
                ? object.notifications.map((e) => api_1.Notification.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.notifications) === null || _a === void 0 ? void 0 : _a.length) {
            obj.notifications = message.notifications.map((e) => api_1.Notification.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Notifications.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseNotifications();
        message.notifications = ((_a = object.notifications) === null || _a === void 0 ? void 0 : _a.map((e) => api_1.Notification.fromPartial(e))) || [];
        return message;
    },
};
function createBaseRemoveFriend() {
    return { user_id: "" };
}
exports.RemoveFriend = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user_id !== "") {
            writer.uint32(10).string(message.user_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFriend();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveFriend.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRemoveFriend();
        message.user_id = (_a = object.user_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseBlockFriend() {
    return { user_id: "" };
}
exports.BlockFriend = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user_id !== "") {
            writer.uint32(10).string(message.user_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockFriend();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        return obj;
    },
    create(base) {
        return exports.BlockFriend.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBlockFriend();
        message.user_id = (_a = object.user_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBasePing() {
    return {};
}
exports.Ping = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePing();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.Ping.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBasePing();
        return message;
    },
};
function createBasePong() {
    return {};
}
exports.Pong = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePong();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.Pong.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBasePong();
        return message;
    },
};
function createBaseStatus() {
    return { presences: [] };
}
exports.Status = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.presences) {
            exports.UserPresence.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStatus();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.presences.push(exports.UserPresence.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            presences: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.presences)
                ? object.presences.map((e) => exports.UserPresence.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.presences) === null || _a === void 0 ? void 0 : _a.length) {
            obj.presences = message.presences.map((e) => exports.UserPresence.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Status.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseStatus();
        message.presences = ((_a = object.presences) === null || _a === void 0 ? void 0 : _a.map((e) => exports.UserPresence.fromPartial(e))) || [];
        return message;
    },
};
function createBaseStatusFollow() {
    return { user_ids: [], usernames: [] };
}
exports.StatusFollow = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.user_ids) {
            writer.uint32(10).string(v);
        }
        for (const v of message.usernames) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStatusFollow();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user_ids.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.usernames.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_ids) ? object.user_ids.map((e) => globalThis.String(e)) : [],
            usernames: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.usernames)
                ? object.usernames.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if ((_a = message.user_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.user_ids = message.user_ids;
        }
        if ((_b = message.usernames) === null || _b === void 0 ? void 0 : _b.length) {
            obj.usernames = message.usernames;
        }
        return obj;
    },
    create(base) {
        return exports.StatusFollow.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseStatusFollow();
        message.user_ids = ((_a = object.user_ids) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.usernames = ((_b = object.usernames) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseStatusPresenceEvent() {
    return { joins: [], leaves: [] };
}
exports.StatusPresenceEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.joins) {
            exports.UserPresence.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.leaves) {
            exports.UserPresence.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStatusPresenceEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.joins.push(exports.UserPresence.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.leaves.push(exports.UserPresence.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            joins: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.joins) ? object.joins.map((e) => exports.UserPresence.fromJSON(e)) : [],
            leaves: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.leaves) ? object.leaves.map((e) => exports.UserPresence.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if ((_a = message.joins) === null || _a === void 0 ? void 0 : _a.length) {
            obj.joins = message.joins.map((e) => exports.UserPresence.toJSON(e));
        }
        if ((_b = message.leaves) === null || _b === void 0 ? void 0 : _b.length) {
            obj.leaves = message.leaves.map((e) => exports.UserPresence.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.StatusPresenceEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseStatusPresenceEvent();
        message.joins = ((_a = object.joins) === null || _a === void 0 ? void 0 : _a.map((e) => exports.UserPresence.fromPartial(e))) || [];
        message.leaves = ((_b = object.leaves) === null || _b === void 0 ? void 0 : _b.map((e) => exports.UserPresence.fromPartial(e))) || [];
        return message;
    },
};
function createBaseLastPinMessageEvent() {
    return {
        clan_id: "",
        channel_id: "",
        message_id: "",
        mode: 0,
        user_id: "",
        timestamp_seconds: 0,
        operation: 0,
        is_public: false,
    };
}
exports.LastPinMessageEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.message_id !== "") {
            writer.uint32(26).string(message.message_id);
        }
        if (message.mode !== 0) {
            writer.uint32(32).int32(message.mode);
        }
        if (message.user_id !== "") {
            writer.uint32(42).string(message.user_id);
        }
        if (message.timestamp_seconds !== 0) {
            writer.uint32(48).uint32(message.timestamp_seconds);
        }
        if (message.operation !== 0) {
            writer.uint32(56).int32(message.operation);
        }
        if (message.is_public !== false) {
            writer.uint32(64).bool(message.is_public);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLastPinMessageEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.mode = reader.int32();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.timestamp_seconds = reader.uint32();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.operation = reader.int32();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.is_public = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
            mode: isSet(object.mode) ? globalThis.Number(object.mode) : 0,
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            timestamp_seconds: isSet(object.timestamp_seconds) ? globalThis.Number(object.timestamp_seconds) : 0,
            operation: isSet(object.operation) ? globalThis.Number(object.operation) : 0,
            is_public: isSet(object.is_public) ? globalThis.Boolean(object.is_public) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.message_id !== "") {
            obj.message_id = message.message_id;
        }
        if (message.mode !== 0) {
            obj.mode = Math.round(message.mode);
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.timestamp_seconds !== 0) {
            obj.timestamp_seconds = Math.round(message.timestamp_seconds);
        }
        if (message.operation !== 0) {
            obj.operation = Math.round(message.operation);
        }
        if (message.is_public !== false) {
            obj.is_public = message.is_public;
        }
        return obj;
    },
    create(base) {
        return exports.LastPinMessageEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseLastPinMessageEvent();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.message_id = (_c = object.message_id) !== null && _c !== void 0 ? _c : "";
        message.mode = (_d = object.mode) !== null && _d !== void 0 ? _d : 0;
        message.user_id = (_e = object.user_id) !== null && _e !== void 0 ? _e : "";
        message.timestamp_seconds = (_f = object.timestamp_seconds) !== null && _f !== void 0 ? _f : 0;
        message.operation = (_g = object.operation) !== null && _g !== void 0 ? _g : 0;
        message.is_public = (_h = object.is_public) !== null && _h !== void 0 ? _h : false;
        return message;
    },
};
function createBaseLastSeenMessageEvent() {
    return { clan_id: "", channel_id: "", message_id: "", mode: 0, timestamp_seconds: 0, badge_count: 0 };
}
exports.LastSeenMessageEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.message_id !== "") {
            writer.uint32(26).string(message.message_id);
        }
        if (message.mode !== 0) {
            writer.uint32(32).int32(message.mode);
        }
        if (message.timestamp_seconds !== 0) {
            writer.uint32(40).uint32(message.timestamp_seconds);
        }
        if (message.badge_count !== 0) {
            writer.uint32(48).int32(message.badge_count);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLastSeenMessageEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.mode = reader.int32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.timestamp_seconds = reader.uint32();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.badge_count = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
            mode: isSet(object.mode) ? globalThis.Number(object.mode) : 0,
            timestamp_seconds: isSet(object.timestamp_seconds) ? globalThis.Number(object.timestamp_seconds) : 0,
            badge_count: isSet(object.badge_count) ? globalThis.Number(object.badge_count) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.message_id !== "") {
            obj.message_id = message.message_id;
        }
        if (message.mode !== 0) {
            obj.mode = Math.round(message.mode);
        }
        if (message.timestamp_seconds !== 0) {
            obj.timestamp_seconds = Math.round(message.timestamp_seconds);
        }
        if (message.badge_count !== 0) {
            obj.badge_count = Math.round(message.badge_count);
        }
        return obj;
    },
    create(base) {
        return exports.LastSeenMessageEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseLastSeenMessageEvent();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.message_id = (_c = object.message_id) !== null && _c !== void 0 ? _c : "";
        message.mode = (_d = object.mode) !== null && _d !== void 0 ? _d : 0;
        message.timestamp_seconds = (_e = object.timestamp_seconds) !== null && _e !== void 0 ? _e : 0;
        message.badge_count = (_f = object.badge_count) !== null && _f !== void 0 ? _f : 0;
        return message;
    },
};
function createBaseMessageTypingEvent() {
    return {
        clan_id: "",
        channel_id: "",
        sender_id: "",
        mode: 0,
        is_public: false,
        sender_username: "",
        sender_display_name: "",
    };
}
exports.MessageTypingEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.sender_id !== "") {
            writer.uint32(26).string(message.sender_id);
        }
        if (message.mode !== 0) {
            writer.uint32(32).int32(message.mode);
        }
        if (message.is_public !== false) {
            writer.uint32(40).bool(message.is_public);
        }
        if (message.sender_username !== "") {
            writer.uint32(50).string(message.sender_username);
        }
        if (message.sender_display_name !== "") {
            writer.uint32(58).string(message.sender_display_name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessageTypingEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.sender_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.mode = reader.int32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.is_public = reader.bool();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.sender_username = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.sender_display_name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            sender_id: isSet(object.sender_id) ? globalThis.String(object.sender_id) : "",
            mode: isSet(object.mode) ? globalThis.Number(object.mode) : 0,
            is_public: isSet(object.is_public) ? globalThis.Boolean(object.is_public) : false,
            sender_username: isSet(object.sender_username) ? globalThis.String(object.sender_username) : "",
            sender_display_name: isSet(object.sender_display_name) ? globalThis.String(object.sender_display_name) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.sender_id !== "") {
            obj.sender_id = message.sender_id;
        }
        if (message.mode !== 0) {
            obj.mode = Math.round(message.mode);
        }
        if (message.is_public !== false) {
            obj.is_public = message.is_public;
        }
        if (message.sender_username !== "") {
            obj.sender_username = message.sender_username;
        }
        if (message.sender_display_name !== "") {
            obj.sender_display_name = message.sender_display_name;
        }
        return obj;
    },
    create(base) {
        return exports.MessageTypingEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseMessageTypingEvent();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.sender_id = (_c = object.sender_id) !== null && _c !== void 0 ? _c : "";
        message.mode = (_d = object.mode) !== null && _d !== void 0 ? _d : 0;
        message.is_public = (_e = object.is_public) !== null && _e !== void 0 ? _e : false;
        message.sender_username = (_f = object.sender_username) !== null && _f !== void 0 ? _f : "";
        message.sender_display_name = (_g = object.sender_display_name) !== null && _g !== void 0 ? _g : "";
        return message;
    },
};
function createBaseVoiceLeavedEvent() {
    return { id: "", clan_id: "", voice_channel_id: "", voice_user_id: "" };
}
exports.VoiceLeavedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        if (message.voice_channel_id !== "") {
            writer.uint32(26).string(message.voice_channel_id);
        }
        if (message.voice_user_id !== "") {
            writer.uint32(34).string(message.voice_user_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVoiceLeavedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.voice_channel_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.voice_user_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            voice_channel_id: isSet(object.voice_channel_id) ? globalThis.String(object.voice_channel_id) : "",
            voice_user_id: isSet(object.voice_user_id) ? globalThis.String(object.voice_user_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.voice_channel_id !== "") {
            obj.voice_channel_id = message.voice_channel_id;
        }
        if (message.voice_user_id !== "") {
            obj.voice_user_id = message.voice_user_id;
        }
        return obj;
    },
    create(base) {
        return exports.VoiceLeavedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseVoiceLeavedEvent();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        message.voice_channel_id = (_c = object.voice_channel_id) !== null && _c !== void 0 ? _c : "";
        message.voice_user_id = (_d = object.voice_user_id) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseVoiceJoinedEvent() {
    return {
        clan_id: "",
        clan_name: "",
        id: "",
        participant: "",
        user_id: "",
        voice_channel_label: "",
        voice_channel_id: "",
        last_screenshot: "",
    };
}
exports.VoiceJoinedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.clan_name !== "") {
            writer.uint32(18).string(message.clan_name);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        if (message.participant !== "") {
            writer.uint32(34).string(message.participant);
        }
        if (message.user_id !== "") {
            writer.uint32(42).string(message.user_id);
        }
        if (message.voice_channel_label !== "") {
            writer.uint32(50).string(message.voice_channel_label);
        }
        if (message.voice_channel_id !== "") {
            writer.uint32(58).string(message.voice_channel_id);
        }
        if (message.last_screenshot !== "") {
            writer.uint32(66).string(message.last_screenshot);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVoiceJoinedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.participant = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.voice_channel_label = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.voice_channel_id = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.last_screenshot = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            participant: isSet(object.participant) ? globalThis.String(object.participant) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            voice_channel_label: isSet(object.voice_channel_label) ? globalThis.String(object.voice_channel_label) : "",
            voice_channel_id: isSet(object.voice_channel_id) ? globalThis.String(object.voice_channel_id) : "",
            last_screenshot: isSet(object.last_screenshot) ? globalThis.String(object.last_screenshot) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.clan_name !== "") {
            obj.clan_name = message.clan_name;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.participant !== "") {
            obj.participant = message.participant;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.voice_channel_label !== "") {
            obj.voice_channel_label = message.voice_channel_label;
        }
        if (message.voice_channel_id !== "") {
            obj.voice_channel_id = message.voice_channel_id;
        }
        if (message.last_screenshot !== "") {
            obj.last_screenshot = message.last_screenshot;
        }
        return obj;
    },
    create(base) {
        return exports.VoiceJoinedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseVoiceJoinedEvent();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.clan_name = (_b = object.clan_name) !== null && _b !== void 0 ? _b : "";
        message.id = (_c = object.id) !== null && _c !== void 0 ? _c : "";
        message.participant = (_d = object.participant) !== null && _d !== void 0 ? _d : "";
        message.user_id = (_e = object.user_id) !== null && _e !== void 0 ? _e : "";
        message.voice_channel_label = (_f = object.voice_channel_label) !== null && _f !== void 0 ? _f : "";
        message.voice_channel_id = (_g = object.voice_channel_id) !== null && _g !== void 0 ? _g : "";
        message.last_screenshot = (_h = object.last_screenshot) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseVoiceStartedEvent() {
    return { id: "", clan_id: "", voice_channel_id: "" };
}
exports.VoiceStartedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        if (message.voice_channel_id !== "") {
            writer.uint32(26).string(message.voice_channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVoiceStartedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.voice_channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            voice_channel_id: isSet(object.voice_channel_id) ? globalThis.String(object.voice_channel_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.voice_channel_id !== "") {
            obj.voice_channel_id = message.voice_channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.VoiceStartedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseVoiceStartedEvent();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        message.voice_channel_id = (_c = object.voice_channel_id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseVoiceEndedEvent() {
    return { id: "", clan_id: "", voice_channel_id: "" };
}
exports.VoiceEndedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        if (message.voice_channel_id !== "") {
            writer.uint32(26).string(message.voice_channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVoiceEndedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.voice_channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            voice_channel_id: isSet(object.voice_channel_id) ? globalThis.String(object.voice_channel_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.voice_channel_id !== "") {
            obj.voice_channel_id = message.voice_channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.VoiceEndedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseVoiceEndedEvent();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        message.voice_channel_id = (_c = object.voice_channel_id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseStreamingLeavedEvent() {
    return { id: "", clan_id: "", streaming_channel_id: "", streaming_user_id: "" };
}
exports.StreamingLeavedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        if (message.streaming_channel_id !== "") {
            writer.uint32(26).string(message.streaming_channel_id);
        }
        if (message.streaming_user_id !== "") {
            writer.uint32(34).string(message.streaming_user_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStreamingLeavedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.streaming_channel_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.streaming_user_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            streaming_channel_id: isSet(object.streaming_channel_id) ? globalThis.String(object.streaming_channel_id) : "",
            streaming_user_id: isSet(object.streaming_user_id) ? globalThis.String(object.streaming_user_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.streaming_channel_id !== "") {
            obj.streaming_channel_id = message.streaming_channel_id;
        }
        if (message.streaming_user_id !== "") {
            obj.streaming_user_id = message.streaming_user_id;
        }
        return obj;
    },
    create(base) {
        return exports.StreamingLeavedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseStreamingLeavedEvent();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        message.streaming_channel_id = (_c = object.streaming_channel_id) !== null && _c !== void 0 ? _c : "";
        message.streaming_user_id = (_d = object.streaming_user_id) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseStreamingJoinedEvent() {
    return {
        clan_id: "",
        clan_name: "",
        id: "",
        participant: "",
        user_id: "",
        streaming_channel_label: "",
        streaming_channel_id: "",
    };
}
exports.StreamingJoinedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.clan_name !== "") {
            writer.uint32(18).string(message.clan_name);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        if (message.participant !== "") {
            writer.uint32(34).string(message.participant);
        }
        if (message.user_id !== "") {
            writer.uint32(42).string(message.user_id);
        }
        if (message.streaming_channel_label !== "") {
            writer.uint32(50).string(message.streaming_channel_label);
        }
        if (message.streaming_channel_id !== "") {
            writer.uint32(58).string(message.streaming_channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStreamingJoinedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.participant = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.streaming_channel_label = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.streaming_channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            participant: isSet(object.participant) ? globalThis.String(object.participant) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            streaming_channel_label: isSet(object.streaming_channel_label)
                ? globalThis.String(object.streaming_channel_label)
                : "",
            streaming_channel_id: isSet(object.streaming_channel_id) ? globalThis.String(object.streaming_channel_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.clan_name !== "") {
            obj.clan_name = message.clan_name;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.participant !== "") {
            obj.participant = message.participant;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.streaming_channel_label !== "") {
            obj.streaming_channel_label = message.streaming_channel_label;
        }
        if (message.streaming_channel_id !== "") {
            obj.streaming_channel_id = message.streaming_channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.StreamingJoinedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseStreamingJoinedEvent();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.clan_name = (_b = object.clan_name) !== null && _b !== void 0 ? _b : "";
        message.id = (_c = object.id) !== null && _c !== void 0 ? _c : "";
        message.participant = (_d = object.participant) !== null && _d !== void 0 ? _d : "";
        message.user_id = (_e = object.user_id) !== null && _e !== void 0 ? _e : "";
        message.streaming_channel_label = (_f = object.streaming_channel_label) !== null && _f !== void 0 ? _f : "";
        message.streaming_channel_id = (_g = object.streaming_channel_id) !== null && _g !== void 0 ? _g : "";
        return message;
    },
};
function createBaseStreamingStartedEvent() {
    return { clan_id: "", channel_id: "", streaming_url: "", is_streaming: false };
}
exports.StreamingStartedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.streaming_url !== "") {
            writer.uint32(26).string(message.streaming_url);
        }
        if (message.is_streaming !== false) {
            writer.uint32(32).bool(message.is_streaming);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStreamingStartedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.streaming_url = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.is_streaming = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            streaming_url: isSet(object.streaming_url) ? globalThis.String(object.streaming_url) : "",
            is_streaming: isSet(object.is_streaming) ? globalThis.Boolean(object.is_streaming) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.streaming_url !== "") {
            obj.streaming_url = message.streaming_url;
        }
        if (message.is_streaming !== false) {
            obj.is_streaming = message.is_streaming;
        }
        return obj;
    },
    create(base) {
        return exports.StreamingStartedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseStreamingStartedEvent();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.streaming_url = (_c = object.streaming_url) !== null && _c !== void 0 ? _c : "";
        message.is_streaming = (_d = object.is_streaming) !== null && _d !== void 0 ? _d : false;
        return message;
    },
};
function createBaseStreamingEndedEvent() {
    return { clan_id: "", channel_id: "" };
}
exports.StreamingEndedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStreamingEndedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        return obj;
    },
    create(base) {
        return exports.StreamingEndedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseStreamingEndedEvent();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseChannelCreatedEvent() {
    return {
        clan_id: "",
        category_id: "",
        creator_id: "",
        parent_id: "",
        channel_id: "",
        channel_label: "",
        channel_private: 0,
        channel_type: undefined,
        status: 0,
        app_id: "",
        clan_name: "",
    };
}
exports.ChannelCreatedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.category_id !== "") {
            writer.uint32(18).string(message.category_id);
        }
        if (message.creator_id !== "") {
            writer.uint32(26).string(message.creator_id);
        }
        if (message.parent_id !== "") {
            writer.uint32(34).string(message.parent_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(42).string(message.channel_id);
        }
        if (message.channel_label !== "") {
            writer.uint32(50).string(message.channel_label);
        }
        if (message.channel_private !== 0) {
            writer.uint32(56).int32(message.channel_private);
        }
        if (message.channel_type !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.channel_type }, writer.uint32(66).fork()).ldelim();
        }
        if (message.status !== 0) {
            writer.uint32(72).int32(message.status);
        }
        if (message.app_id !== "") {
            writer.uint32(82).string(message.app_id);
        }
        if (message.clan_name !== "") {
            writer.uint32(90).string(message.clan_name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelCreatedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.category_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.parent_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.channel_label = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.channel_private = reader.int32();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.channel_type = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.app_id = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.clan_name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            category_id: isSet(object.category_id) ? globalThis.String(object.category_id) : "",
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            parent_id: isSet(object.parent_id) ? globalThis.String(object.parent_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            channel_label: isSet(object.channel_label) ? globalThis.String(object.channel_label) : "",
            channel_private: isSet(object.channel_private) ? globalThis.Number(object.channel_private) : 0,
            channel_type: isSet(object.channel_type) ? Number(object.channel_type) : undefined,
            status: isSet(object.status) ? globalThis.Number(object.status) : 0,
            app_id: isSet(object.app_id) ? globalThis.String(object.app_id) : "",
            clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.category_id !== "") {
            obj.category_id = message.category_id;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.parent_id !== "") {
            obj.parent_id = message.parent_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.channel_label !== "") {
            obj.channel_label = message.channel_label;
        }
        if (message.channel_private !== 0) {
            obj.channel_private = Math.round(message.channel_private);
        }
        if (message.channel_type !== undefined) {
            obj.channel_type = message.channel_type;
        }
        if (message.status !== 0) {
            obj.status = Math.round(message.status);
        }
        if (message.app_id !== "") {
            obj.app_id = message.app_id;
        }
        if (message.clan_name !== "") {
            obj.clan_name = message.clan_name;
        }
        return obj;
    },
    create(base) {
        return exports.ChannelCreatedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseChannelCreatedEvent();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.category_id = (_b = object.category_id) !== null && _b !== void 0 ? _b : "";
        message.creator_id = (_c = object.creator_id) !== null && _c !== void 0 ? _c : "";
        message.parent_id = (_d = object.parent_id) !== null && _d !== void 0 ? _d : "";
        message.channel_id = (_e = object.channel_id) !== null && _e !== void 0 ? _e : "";
        message.channel_label = (_f = object.channel_label) !== null && _f !== void 0 ? _f : "";
        message.channel_private = (_g = object.channel_private) !== null && _g !== void 0 ? _g : 0;
        message.channel_type = (_h = object.channel_type) !== null && _h !== void 0 ? _h : undefined;
        message.status = (_j = object.status) !== null && _j !== void 0 ? _j : 0;
        message.app_id = (_k = object.app_id) !== null && _k !== void 0 ? _k : "";
        message.clan_name = (_l = object.clan_name) !== null && _l !== void 0 ? _l : "";
        return message;
    },
};
function createBaseCategoryEvent() {
    return { creator_id: "", clan_id: "", category_name: "", id: "", status: 0 };
}
exports.CategoryEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.creator_id !== "") {
            writer.uint32(10).string(message.creator_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        if (message.category_name !== "") {
            writer.uint32(26).string(message.category_name);
        }
        if (message.id !== "") {
            writer.uint32(34).string(message.id);
        }
        if (message.status !== 0) {
            writer.uint32(40).int32(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCategoryEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.category_name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            category_name: isSet(object.category_name) ? globalThis.String(object.category_name) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            status: isSet(object.status) ? globalThis.Number(object.status) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.category_name !== "") {
            obj.category_name = message.category_name;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.status !== 0) {
            obj.status = Math.round(message.status);
        }
        return obj;
    },
    create(base) {
        return exports.CategoryEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseCategoryEvent();
        message.creator_id = (_a = object.creator_id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        message.category_name = (_c = object.category_name) !== null && _c !== void 0 ? _c : "";
        message.id = (_d = object.id) !== null && _d !== void 0 ? _d : "";
        message.status = (_e = object.status) !== null && _e !== void 0 ? _e : 0;
        return message;
    },
};
function createBaseRoleEvent() {
    return {
        role: undefined,
        status: 0,
        user_id: "",
        user_add_ids: [],
        user_remove_ids: [],
        active_permission_ids: [],
        remove_permission_ids: [],
    };
}
exports.RoleEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.role !== undefined) {
            api_1.Role.encode(message.role, writer.uint32(10).fork()).ldelim();
        }
        if (message.status !== 0) {
            writer.uint32(16).int32(message.status);
        }
        if (message.user_id !== "") {
            writer.uint32(26).string(message.user_id);
        }
        for (const v of message.user_add_ids) {
            writer.uint32(34).string(v);
        }
        for (const v of message.user_remove_ids) {
            writer.uint32(42).string(v);
        }
        for (const v of message.active_permission_ids) {
            writer.uint32(50).string(v);
        }
        for (const v of message.remove_permission_ids) {
            writer.uint32(58).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRoleEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.role = api_1.Role.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.user_add_ids.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.user_remove_ids.push(reader.string());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.active_permission_ids.push(reader.string());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.remove_permission_ids.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            role: isSet(object.role) ? api_1.Role.fromJSON(object.role) : undefined,
            status: isSet(object.status) ? globalThis.Number(object.status) : 0,
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            user_add_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_add_ids)
                ? object.user_add_ids.map((e) => globalThis.String(e))
                : [],
            user_remove_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_remove_ids)
                ? object.user_remove_ids.map((e) => globalThis.String(e))
                : [],
            active_permission_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.active_permission_ids)
                ? object.active_permission_ids.map((e) => globalThis.String(e))
                : [],
            remove_permission_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.remove_permission_ids)
                ? object.remove_permission_ids.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d;
        const obj = {};
        if (message.role !== undefined) {
            obj.role = api_1.Role.toJSON(message.role);
        }
        if (message.status !== 0) {
            obj.status = Math.round(message.status);
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if ((_a = message.user_add_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.user_add_ids = message.user_add_ids;
        }
        if ((_b = message.user_remove_ids) === null || _b === void 0 ? void 0 : _b.length) {
            obj.user_remove_ids = message.user_remove_ids;
        }
        if ((_c = message.active_permission_ids) === null || _c === void 0 ? void 0 : _c.length) {
            obj.active_permission_ids = message.active_permission_ids;
        }
        if ((_d = message.remove_permission_ids) === null || _d === void 0 ? void 0 : _d.length) {
            obj.remove_permission_ids = message.remove_permission_ids;
        }
        return obj;
    },
    create(base) {
        return exports.RoleEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseRoleEvent();
        message.role = (object.role !== undefined && object.role !== null) ? api_1.Role.fromPartial(object.role) : undefined;
        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : 0;
        message.user_id = (_b = object.user_id) !== null && _b !== void 0 ? _b : "";
        message.user_add_ids = ((_c = object.user_add_ids) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.user_remove_ids = ((_d = object.user_remove_ids) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.active_permission_ids = ((_e = object.active_permission_ids) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.remove_permission_ids = ((_f = object.remove_permission_ids) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        return message;
    },
};
function createBaseChannelDeletedEvent() {
    return { clan_id: "", category_id: "", parent_id: "", channel_id: "", deletor: "" };
}
exports.ChannelDeletedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.category_id !== "") {
            writer.uint32(18).string(message.category_id);
        }
        if (message.parent_id !== "") {
            writer.uint32(26).string(message.parent_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(34).string(message.channel_id);
        }
        if (message.deletor !== "") {
            writer.uint32(42).string(message.deletor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelDeletedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.category_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.parent_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.deletor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            category_id: isSet(object.category_id) ? globalThis.String(object.category_id) : "",
            parent_id: isSet(object.parent_id) ? globalThis.String(object.parent_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            deletor: isSet(object.deletor) ? globalThis.String(object.deletor) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.category_id !== "") {
            obj.category_id = message.category_id;
        }
        if (message.parent_id !== "") {
            obj.parent_id = message.parent_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.deletor !== "") {
            obj.deletor = message.deletor;
        }
        return obj;
    },
    create(base) {
        return exports.ChannelDeletedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseChannelDeletedEvent();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.category_id = (_b = object.category_id) !== null && _b !== void 0 ? _b : "";
        message.parent_id = (_c = object.parent_id) !== null && _c !== void 0 ? _c : "";
        message.channel_id = (_d = object.channel_id) !== null && _d !== void 0 ? _d : "";
        message.deletor = (_e = object.deletor) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseClanDeletedEvent() {
    return { clan_id: "", deletor: "" };
}
exports.ClanDeletedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.deletor !== "") {
            writer.uint32(18).string(message.deletor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanDeletedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.deletor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            deletor: isSet(object.deletor) ? globalThis.String(object.deletor) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.deletor !== "") {
            obj.deletor = message.deletor;
        }
        return obj;
    },
    create(base) {
        return exports.ClanDeletedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseClanDeletedEvent();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.deletor = (_b = object.deletor) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseStickerCreateEvent() {
    return {
        clan_id: "",
        source: "",
        shortname: "",
        category: "",
        creator_id: "",
        sticker_id: "",
        logo: "",
        clan_name: "",
    };
}
exports.StickerCreateEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.source !== "") {
            writer.uint32(18).string(message.source);
        }
        if (message.shortname !== "") {
            writer.uint32(26).string(message.shortname);
        }
        if (message.category !== "") {
            writer.uint32(34).string(message.category);
        }
        if (message.creator_id !== "") {
            writer.uint32(42).string(message.creator_id);
        }
        if (message.sticker_id !== "") {
            writer.uint32(50).string(message.sticker_id);
        }
        if (message.logo !== "") {
            writer.uint32(58).string(message.logo);
        }
        if (message.clan_name !== "") {
            writer.uint32(66).string(message.clan_name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStickerCreateEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.source = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.shortname = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.category = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.sticker_id = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.logo = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.clan_name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            source: isSet(object.source) ? globalThis.String(object.source) : "",
            shortname: isSet(object.shortname) ? globalThis.String(object.shortname) : "",
            category: isSet(object.category) ? globalThis.String(object.category) : "",
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            sticker_id: isSet(object.sticker_id) ? globalThis.String(object.sticker_id) : "",
            logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
            clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.source !== "") {
            obj.source = message.source;
        }
        if (message.shortname !== "") {
            obj.shortname = message.shortname;
        }
        if (message.category !== "") {
            obj.category = message.category;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.sticker_id !== "") {
            obj.sticker_id = message.sticker_id;
        }
        if (message.logo !== "") {
            obj.logo = message.logo;
        }
        if (message.clan_name !== "") {
            obj.clan_name = message.clan_name;
        }
        return obj;
    },
    create(base) {
        return exports.StickerCreateEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseStickerCreateEvent();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.source = (_b = object.source) !== null && _b !== void 0 ? _b : "";
        message.shortname = (_c = object.shortname) !== null && _c !== void 0 ? _c : "";
        message.category = (_d = object.category) !== null && _d !== void 0 ? _d : "";
        message.creator_id = (_e = object.creator_id) !== null && _e !== void 0 ? _e : "";
        message.sticker_id = (_f = object.sticker_id) !== null && _f !== void 0 ? _f : "";
        message.logo = (_g = object.logo) !== null && _g !== void 0 ? _g : "";
        message.clan_name = (_h = object.clan_name) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseStickerUpdateEvent() {
    return { shortname: "", sticker_id: "", user_id: "" };
}
exports.StickerUpdateEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.shortname !== "") {
            writer.uint32(10).string(message.shortname);
        }
        if (message.sticker_id !== "") {
            writer.uint32(18).string(message.sticker_id);
        }
        if (message.user_id !== "") {
            writer.uint32(26).string(message.user_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStickerUpdateEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.shortname = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.sticker_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            shortname: isSet(object.shortname) ? globalThis.String(object.shortname) : "",
            sticker_id: isSet(object.sticker_id) ? globalThis.String(object.sticker_id) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.shortname !== "") {
            obj.shortname = message.shortname;
        }
        if (message.sticker_id !== "") {
            obj.sticker_id = message.sticker_id;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        return obj;
    },
    create(base) {
        return exports.StickerUpdateEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseStickerUpdateEvent();
        message.shortname = (_a = object.shortname) !== null && _a !== void 0 ? _a : "";
        message.sticker_id = (_b = object.sticker_id) !== null && _b !== void 0 ? _b : "";
        message.user_id = (_c = object.user_id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseStickerDeleteEvent() {
    return { sticker_id: "", user_id: "" };
}
exports.StickerDeleteEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sticker_id !== "") {
            writer.uint32(18).string(message.sticker_id);
        }
        if (message.user_id !== "") {
            writer.uint32(26).string(message.user_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStickerDeleteEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.sticker_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sticker_id: isSet(object.sticker_id) ? globalThis.String(object.sticker_id) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sticker_id !== "") {
            obj.sticker_id = message.sticker_id;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        return obj;
    },
    create(base) {
        return exports.StickerDeleteEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseStickerDeleteEvent();
        message.sticker_id = (_a = object.sticker_id) !== null && _a !== void 0 ? _a : "";
        message.user_id = (_b = object.user_id) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseChannelUpdatedEvent() {
    return {
        clan_id: "",
        category_id: "",
        creator_id: "",
        parent_id: "",
        channel_id: "",
        channel_label: "",
        channel_type: undefined,
        status: 0,
        meeting_code: "",
        is_error: false,
        channel_private: false,
        app_id: "",
        e2ee: 0,
        topic: "",
        age_restricted: 0,
        active: 0,
    };
}
exports.ChannelUpdatedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.category_id !== "") {
            writer.uint32(18).string(message.category_id);
        }
        if (message.creator_id !== "") {
            writer.uint32(26).string(message.creator_id);
        }
        if (message.parent_id !== "") {
            writer.uint32(34).string(message.parent_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(42).string(message.channel_id);
        }
        if (message.channel_label !== "") {
            writer.uint32(50).string(message.channel_label);
        }
        if (message.channel_type !== undefined) {
            wrappers_1.Int32Value.encode({ value: message.channel_type }, writer.uint32(58).fork()).ldelim();
        }
        if (message.status !== 0) {
            writer.uint32(64).int32(message.status);
        }
        if (message.meeting_code !== "") {
            writer.uint32(74).string(message.meeting_code);
        }
        if (message.is_error !== false) {
            writer.uint32(80).bool(message.is_error);
        }
        if (message.channel_private !== false) {
            writer.uint32(88).bool(message.channel_private);
        }
        if (message.app_id !== "") {
            writer.uint32(98).string(message.app_id);
        }
        if (message.e2ee !== 0) {
            writer.uint32(104).int32(message.e2ee);
        }
        if (message.topic !== "") {
            writer.uint32(114).string(message.topic);
        }
        if (message.age_restricted !== 0) {
            writer.uint32(120).int32(message.age_restricted);
        }
        if (message.active !== 0) {
            writer.uint32(128).int32(message.active);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelUpdatedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.category_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.creator_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.parent_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.channel_label = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.channel_type = wrappers_1.Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.meeting_code = reader.string();
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.is_error = reader.bool();
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.channel_private = reader.bool();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.app_id = reader.string();
                    continue;
                case 13:
                    if (tag !== 104) {
                        break;
                    }
                    message.e2ee = reader.int32();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.topic = reader.string();
                    continue;
                case 15:
                    if (tag !== 120) {
                        break;
                    }
                    message.age_restricted = reader.int32();
                    continue;
                case 16:
                    if (tag !== 128) {
                        break;
                    }
                    message.active = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            category_id: isSet(object.category_id) ? globalThis.String(object.category_id) : "",
            creator_id: isSet(object.creator_id) ? globalThis.String(object.creator_id) : "",
            parent_id: isSet(object.parent_id) ? globalThis.String(object.parent_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            channel_label: isSet(object.channel_label) ? globalThis.String(object.channel_label) : "",
            channel_type: isSet(object.channel_type) ? Number(object.channel_type) : undefined,
            status: isSet(object.status) ? globalThis.Number(object.status) : 0,
            meeting_code: isSet(object.meeting_code) ? globalThis.String(object.meeting_code) : "",
            is_error: isSet(object.is_error) ? globalThis.Boolean(object.is_error) : false,
            channel_private: isSet(object.channel_private) ? globalThis.Boolean(object.channel_private) : false,
            app_id: isSet(object.app_id) ? globalThis.String(object.app_id) : "",
            e2ee: isSet(object.e2ee) ? globalThis.Number(object.e2ee) : 0,
            topic: isSet(object.topic) ? globalThis.String(object.topic) : "",
            age_restricted: isSet(object.age_restricted) ? globalThis.Number(object.age_restricted) : 0,
            active: isSet(object.active) ? globalThis.Number(object.active) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.category_id !== "") {
            obj.category_id = message.category_id;
        }
        if (message.creator_id !== "") {
            obj.creator_id = message.creator_id;
        }
        if (message.parent_id !== "") {
            obj.parent_id = message.parent_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.channel_label !== "") {
            obj.channel_label = message.channel_label;
        }
        if (message.channel_type !== undefined) {
            obj.channel_type = message.channel_type;
        }
        if (message.status !== 0) {
            obj.status = Math.round(message.status);
        }
        if (message.meeting_code !== "") {
            obj.meeting_code = message.meeting_code;
        }
        if (message.is_error !== false) {
            obj.is_error = message.is_error;
        }
        if (message.channel_private !== false) {
            obj.channel_private = message.channel_private;
        }
        if (message.app_id !== "") {
            obj.app_id = message.app_id;
        }
        if (message.e2ee !== 0) {
            obj.e2ee = Math.round(message.e2ee);
        }
        if (message.topic !== "") {
            obj.topic = message.topic;
        }
        if (message.age_restricted !== 0) {
            obj.age_restricted = Math.round(message.age_restricted);
        }
        if (message.active !== 0) {
            obj.active = Math.round(message.active);
        }
        return obj;
    },
    create(base) {
        return exports.ChannelUpdatedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
        const message = createBaseChannelUpdatedEvent();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.category_id = (_b = object.category_id) !== null && _b !== void 0 ? _b : "";
        message.creator_id = (_c = object.creator_id) !== null && _c !== void 0 ? _c : "";
        message.parent_id = (_d = object.parent_id) !== null && _d !== void 0 ? _d : "";
        message.channel_id = (_e = object.channel_id) !== null && _e !== void 0 ? _e : "";
        message.channel_label = (_f = object.channel_label) !== null && _f !== void 0 ? _f : "";
        message.channel_type = (_g = object.channel_type) !== null && _g !== void 0 ? _g : undefined;
        message.status = (_h = object.status) !== null && _h !== void 0 ? _h : 0;
        message.meeting_code = (_j = object.meeting_code) !== null && _j !== void 0 ? _j : "";
        message.is_error = (_k = object.is_error) !== null && _k !== void 0 ? _k : false;
        message.channel_private = (_l = object.channel_private) !== null && _l !== void 0 ? _l : false;
        message.app_id = (_m = object.app_id) !== null && _m !== void 0 ? _m : "";
        message.e2ee = (_o = object.e2ee) !== null && _o !== void 0 ? _o : 0;
        message.topic = (_p = object.topic) !== null && _p !== void 0 ? _p : "";
        message.age_restricted = (_q = object.age_restricted) !== null && _q !== void 0 ? _q : 0;
        message.active = (_r = object.active) !== null && _r !== void 0 ? _r : 0;
        return message;
    },
};
function createBaseStatusUnfollow() {
    return { user_ids: [] };
}
exports.StatusUnfollow = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.user_ids) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStatusUnfollow();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user_ids.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_ids) ? object.user_ids.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.user_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.user_ids = message.user_ids;
        }
        return obj;
    },
    create(base) {
        return exports.StatusUnfollow.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseStatusUnfollow();
        message.user_ids = ((_a = object.user_ids) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseStatusUpdate() {
    return { status: undefined };
}
exports.StatusUpdate = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.status !== undefined) {
            wrappers_1.StringValue.encode({ value: message.status }, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStatusUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.status = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { status: isSet(object.status) ? String(object.status) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.status !== undefined) {
            obj.status = message.status;
        }
        return obj;
    },
    create(base) {
        return exports.StatusUpdate.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseStatusUpdate();
        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : undefined;
        return message;
    },
};
function createBaseStream() {
    return { mode: 0, channel_id: "", clan_id: "", label: "" };
}
exports.Stream = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.mode !== 0) {
            writer.uint32(8).int32(message.mode);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(26).string(message.clan_id);
        }
        if (message.label !== "") {
            writer.uint32(34).string(message.label);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStream();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.mode = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.label = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            mode: isSet(object.mode) ? globalThis.Number(object.mode) : 0,
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            label: isSet(object.label) ? globalThis.String(object.label) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.mode !== 0) {
            obj.mode = Math.round(message.mode);
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.label !== "") {
            obj.label = message.label;
        }
        return obj;
    },
    create(base) {
        return exports.Stream.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseStream();
        message.mode = (_a = object.mode) !== null && _a !== void 0 ? _a : 0;
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : "";
        message.label = (_d = object.label) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseStreamData() {
    return { stream: undefined, sender: undefined, data: "", reliable: false };
}
exports.StreamData = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.stream !== undefined) {
            exports.Stream.encode(message.stream, writer.uint32(10).fork()).ldelim();
        }
        if (message.sender !== undefined) {
            exports.UserPresence.encode(message.sender, writer.uint32(18).fork()).ldelim();
        }
        if (message.data !== "") {
            writer.uint32(26).string(message.data);
        }
        if (message.reliable !== false) {
            writer.uint32(32).bool(message.reliable);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStreamData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.stream = exports.Stream.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.sender = exports.UserPresence.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.data = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.reliable = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            stream: isSet(object.stream) ? exports.Stream.fromJSON(object.stream) : undefined,
            sender: isSet(object.sender) ? exports.UserPresence.fromJSON(object.sender) : undefined,
            data: isSet(object.data) ? globalThis.String(object.data) : "",
            reliable: isSet(object.reliable) ? globalThis.Boolean(object.reliable) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.stream !== undefined) {
            obj.stream = exports.Stream.toJSON(message.stream);
        }
        if (message.sender !== undefined) {
            obj.sender = exports.UserPresence.toJSON(message.sender);
        }
        if (message.data !== "") {
            obj.data = message.data;
        }
        if (message.reliable !== false) {
            obj.reliable = message.reliable;
        }
        return obj;
    },
    create(base) {
        return exports.StreamData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseStreamData();
        message.stream = (object.stream !== undefined && object.stream !== null)
            ? exports.Stream.fromPartial(object.stream)
            : undefined;
        message.sender = (object.sender !== undefined && object.sender !== null)
            ? exports.UserPresence.fromPartial(object.sender)
            : undefined;
        message.data = (_a = object.data) !== null && _a !== void 0 ? _a : "";
        message.reliable = (_b = object.reliable) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseStreamPresenceEvent() {
    return { stream: undefined, joins: [], leaves: [] };
}
exports.StreamPresenceEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.stream !== undefined) {
            exports.Stream.encode(message.stream, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.joins) {
            exports.UserPresence.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.leaves) {
            exports.UserPresence.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStreamPresenceEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.stream = exports.Stream.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.joins.push(exports.UserPresence.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.leaves.push(exports.UserPresence.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            stream: isSet(object.stream) ? exports.Stream.fromJSON(object.stream) : undefined,
            joins: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.joins) ? object.joins.map((e) => exports.UserPresence.fromJSON(e)) : [],
            leaves: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.leaves) ? object.leaves.map((e) => exports.UserPresence.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.stream !== undefined) {
            obj.stream = exports.Stream.toJSON(message.stream);
        }
        if ((_a = message.joins) === null || _a === void 0 ? void 0 : _a.length) {
            obj.joins = message.joins.map((e) => exports.UserPresence.toJSON(e));
        }
        if ((_b = message.leaves) === null || _b === void 0 ? void 0 : _b.length) {
            obj.leaves = message.leaves.map((e) => exports.UserPresence.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.StreamPresenceEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseStreamPresenceEvent();
        message.stream = (object.stream !== undefined && object.stream !== null)
            ? exports.Stream.fromPartial(object.stream)
            : undefined;
        message.joins = ((_a = object.joins) === null || _a === void 0 ? void 0 : _a.map((e) => exports.UserPresence.fromPartial(e))) || [];
        message.leaves = ((_b = object.leaves) === null || _b === void 0 ? void 0 : _b.map((e) => exports.UserPresence.fromPartial(e))) || [];
        return message;
    },
};
function createBaseUserPresence() {
    return {
        user_id: "",
        session_id: "",
        username: "",
        persistence: false,
        status: undefined,
        is_mobile: false,
        metadata: "",
    };
}
exports.UserPresence = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user_id !== "") {
            writer.uint32(10).string(message.user_id);
        }
        if (message.session_id !== "") {
            writer.uint32(18).string(message.session_id);
        }
        if (message.username !== "") {
            writer.uint32(26).string(message.username);
        }
        if (message.persistence !== false) {
            writer.uint32(32).bool(message.persistence);
        }
        if (message.status !== undefined) {
            wrappers_1.StringValue.encode({ value: message.status }, writer.uint32(42).fork()).ldelim();
        }
        if (message.is_mobile !== false) {
            writer.uint32(48).bool(message.is_mobile);
        }
        if (message.metadata !== "") {
            writer.uint32(58).string(message.metadata);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserPresence();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.session_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.persistence = reader.bool();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.status = wrappers_1.StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.is_mobile = reader.bool();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.metadata = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            session_id: isSet(object.session_id) ? globalThis.String(object.session_id) : "",
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            persistence: isSet(object.persistence) ? globalThis.Boolean(object.persistence) : false,
            status: isSet(object.status) ? String(object.status) : undefined,
            is_mobile: isSet(object.is_mobile) ? globalThis.Boolean(object.is_mobile) : false,
            metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.session_id !== "") {
            obj.session_id = message.session_id;
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.persistence !== false) {
            obj.persistence = message.persistence;
        }
        if (message.status !== undefined) {
            obj.status = message.status;
        }
        if (message.is_mobile !== false) {
            obj.is_mobile = message.is_mobile;
        }
        if (message.metadata !== "") {
            obj.metadata = message.metadata;
        }
        return obj;
    },
    create(base) {
        return exports.UserPresence.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseUserPresence();
        message.user_id = (_a = object.user_id) !== null && _a !== void 0 ? _a : "";
        message.session_id = (_b = object.session_id) !== null && _b !== void 0 ? _b : "";
        message.username = (_c = object.username) !== null && _c !== void 0 ? _c : "";
        message.persistence = (_d = object.persistence) !== null && _d !== void 0 ? _d : false;
        message.status = (_e = object.status) !== null && _e !== void 0 ? _e : undefined;
        message.is_mobile = (_f = object.is_mobile) !== null && _f !== void 0 ? _f : false;
        message.metadata = (_g = object.metadata) !== null && _g !== void 0 ? _g : "";
        return message;
    },
};
function createBaseCustomStatusEvent() {
    return { clan_id: "", user_id: "", username: "", status: "", time_reset: 0, no_clear: false };
}
exports.CustomStatusEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.user_id !== "") {
            writer.uint32(18).string(message.user_id);
        }
        if (message.username !== "") {
            writer.uint32(26).string(message.username);
        }
        if (message.status !== "") {
            writer.uint32(34).string(message.status);
        }
        if (message.time_reset !== 0) {
            writer.uint32(40).int32(message.time_reset);
        }
        if (message.no_clear !== false) {
            writer.uint32(48).bool(message.no_clear);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCustomStatusEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.status = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.time_reset = reader.int32();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.no_clear = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            status: isSet(object.status) ? globalThis.String(object.status) : "",
            time_reset: isSet(object.time_reset) ? globalThis.Number(object.time_reset) : 0,
            no_clear: isSet(object.no_clear) ? globalThis.Boolean(object.no_clear) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.status !== "") {
            obj.status = message.status;
        }
        if (message.time_reset !== 0) {
            obj.time_reset = Math.round(message.time_reset);
        }
        if (message.no_clear !== false) {
            obj.no_clear = message.no_clear;
        }
        return obj;
    },
    create(base) {
        return exports.CustomStatusEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseCustomStatusEvent();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.user_id = (_b = object.user_id) !== null && _b !== void 0 ? _b : "";
        message.username = (_c = object.username) !== null && _c !== void 0 ? _c : "";
        message.status = (_d = object.status) !== null && _d !== void 0 ? _d : "";
        message.time_reset = (_e = object.time_reset) !== null && _e !== void 0 ? _e : 0;
        message.no_clear = (_f = object.no_clear) !== null && _f !== void 0 ? _f : false;
        return message;
    },
};
function createBaseUserChannelAdded() {
    return {
        channel_desc: undefined,
        users: [],
        status: "",
        clan_id: "",
        caller: undefined,
        create_time_second: 0,
        active: 0,
    };
}
exports.UserChannelAdded = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_desc !== undefined) {
            api_1.ChannelDescription.encode(message.channel_desc, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.users) {
            exports.UserProfileRedis.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.status !== "") {
            writer.uint32(26).string(message.status);
        }
        if (message.clan_id !== "") {
            writer.uint32(34).string(message.clan_id);
        }
        if (message.caller !== undefined) {
            exports.UserProfileRedis.encode(message.caller, writer.uint32(42).fork()).ldelim();
        }
        if (message.create_time_second !== 0) {
            writer.uint32(48).uint32(message.create_time_second);
        }
        if (message.active !== 0) {
            writer.uint32(56).int32(message.active);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserChannelAdded();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_desc = api_1.ChannelDescription.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.users.push(exports.UserProfileRedis.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.status = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.caller = exports.UserProfileRedis.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.create_time_second = reader.uint32();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.active = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_desc: isSet(object.channel_desc) ? api_1.ChannelDescription.fromJSON(object.channel_desc) : undefined,
            users: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.users) ? object.users.map((e) => exports.UserProfileRedis.fromJSON(e)) : [],
            status: isSet(object.status) ? globalThis.String(object.status) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            caller: isSet(object.caller) ? exports.UserProfileRedis.fromJSON(object.caller) : undefined,
            create_time_second: isSet(object.create_time_second) ? globalThis.Number(object.create_time_second) : 0,
            active: isSet(object.active) ? globalThis.Number(object.active) : 0,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.channel_desc !== undefined) {
            obj.channel_desc = api_1.ChannelDescription.toJSON(message.channel_desc);
        }
        if ((_a = message.users) === null || _a === void 0 ? void 0 : _a.length) {
            obj.users = message.users.map((e) => exports.UserProfileRedis.toJSON(e));
        }
        if (message.status !== "") {
            obj.status = message.status;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.caller !== undefined) {
            obj.caller = exports.UserProfileRedis.toJSON(message.caller);
        }
        if (message.create_time_second !== 0) {
            obj.create_time_second = Math.round(message.create_time_second);
        }
        if (message.active !== 0) {
            obj.active = Math.round(message.active);
        }
        return obj;
    },
    create(base) {
        return exports.UserChannelAdded.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseUserChannelAdded();
        message.channel_desc = (object.channel_desc !== undefined && object.channel_desc !== null)
            ? api_1.ChannelDescription.fromPartial(object.channel_desc)
            : undefined;
        message.users = ((_a = object.users) === null || _a === void 0 ? void 0 : _a.map((e) => exports.UserProfileRedis.fromPartial(e))) || [];
        message.status = (_b = object.status) !== null && _b !== void 0 ? _b : "";
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : "";
        message.caller = (object.caller !== undefined && object.caller !== null)
            ? exports.UserProfileRedis.fromPartial(object.caller)
            : undefined;
        message.create_time_second = (_d = object.create_time_second) !== null && _d !== void 0 ? _d : 0;
        message.active = (_e = object.active) !== null && _e !== void 0 ? _e : 0;
        return message;
    },
};
function createBaseUserChannelRemoved() {
    return { channel_id: "", user_ids: [], channel_type: 0, clan_id: "", badge_counts: [] };
}
exports.UserChannelRemoved = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        for (const v of message.user_ids) {
            writer.uint32(18).string(v);
        }
        if (message.channel_type !== 0) {
            writer.uint32(24).int32(message.channel_type);
        }
        if (message.clan_id !== "") {
            writer.uint32(34).string(message.clan_id);
        }
        writer.uint32(50).fork();
        for (const v of message.badge_counts) {
            writer.int32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserChannelRemoved();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user_ids.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.channel_type = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 6:
                    if (tag === 48) {
                        message.badge_counts.push(reader.int32());
                        continue;
                    }
                    if (tag === 50) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.badge_counts.push(reader.int32());
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            user_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_ids) ? object.user_ids.map((e) => globalThis.String(e)) : [],
            channel_type: isSet(object.channel_type) ? globalThis.Number(object.channel_type) : 0,
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            badge_counts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.badge_counts)
                ? object.badge_counts.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if ((_a = message.user_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.user_ids = message.user_ids;
        }
        if (message.channel_type !== 0) {
            obj.channel_type = Math.round(message.channel_type);
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if ((_b = message.badge_counts) === null || _b === void 0 ? void 0 : _b.length) {
            obj.badge_counts = message.badge_counts.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.UserChannelRemoved.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseUserChannelRemoved();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        message.user_ids = ((_b = object.user_ids) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.channel_type = (_c = object.channel_type) !== null && _c !== void 0 ? _c : 0;
        message.clan_id = (_d = object.clan_id) !== null && _d !== void 0 ? _d : "";
        message.badge_counts = ((_e = object.badge_counts) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        return message;
    },
};
function createBaseUserClanRemoved() {
    return { clan_id: "", user_ids: [] };
}
exports.UserClanRemoved = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        for (const v of message.user_ids) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserClanRemoved();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.user_ids.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            user_ids: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.user_ids) ? object.user_ids.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if ((_a = message.user_ids) === null || _a === void 0 ? void 0 : _a.length) {
            obj.user_ids = message.user_ids;
        }
        return obj;
    },
    create(base) {
        return exports.UserClanRemoved.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUserClanRemoved();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.user_ids = ((_b = object.user_ids) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseClanUpdatedEvent() {
    return {
        clan_id: "",
        clan_name: "",
        logo: "",
        banner: "",
        status: 0,
        is_onboarding: false,
        welcome_channel_id: "",
        onboarding_banner: "",
    };
}
exports.ClanUpdatedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.clan_name !== "") {
            writer.uint32(18).string(message.clan_name);
        }
        if (message.logo !== "") {
            writer.uint32(26).string(message.logo);
        }
        if (message.banner !== "") {
            writer.uint32(34).string(message.banner);
        }
        if (message.status !== 0) {
            writer.uint32(40).int32(message.status);
        }
        if (message.is_onboarding !== false) {
            writer.uint32(48).bool(message.is_onboarding);
        }
        if (message.welcome_channel_id !== "") {
            writer.uint32(58).string(message.welcome_channel_id);
        }
        if (message.onboarding_banner !== "") {
            writer.uint32(66).string(message.onboarding_banner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanUpdatedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.logo = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.banner = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.is_onboarding = reader.bool();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.welcome_channel_id = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.onboarding_banner = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
            logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
            banner: isSet(object.banner) ? globalThis.String(object.banner) : "",
            status: isSet(object.status) ? globalThis.Number(object.status) : 0,
            is_onboarding: isSet(object.is_onboarding) ? globalThis.Boolean(object.is_onboarding) : false,
            welcome_channel_id: isSet(object.welcome_channel_id) ? globalThis.String(object.welcome_channel_id) : "",
            onboarding_banner: isSet(object.onboarding_banner) ? globalThis.String(object.onboarding_banner) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.clan_name !== "") {
            obj.clan_name = message.clan_name;
        }
        if (message.logo !== "") {
            obj.logo = message.logo;
        }
        if (message.banner !== "") {
            obj.banner = message.banner;
        }
        if (message.status !== 0) {
            obj.status = Math.round(message.status);
        }
        if (message.is_onboarding !== false) {
            obj.is_onboarding = message.is_onboarding;
        }
        if (message.welcome_channel_id !== "") {
            obj.welcome_channel_id = message.welcome_channel_id;
        }
        if (message.onboarding_banner !== "") {
            obj.onboarding_banner = message.onboarding_banner;
        }
        return obj;
    },
    create(base) {
        return exports.ClanUpdatedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseClanUpdatedEvent();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.clan_name = (_b = object.clan_name) !== null && _b !== void 0 ? _b : "";
        message.logo = (_c = object.logo) !== null && _c !== void 0 ? _c : "";
        message.banner = (_d = object.banner) !== null && _d !== void 0 ? _d : "";
        message.status = (_e = object.status) !== null && _e !== void 0 ? _e : 0;
        message.is_onboarding = (_f = object.is_onboarding) !== null && _f !== void 0 ? _f : false;
        message.welcome_channel_id = (_g = object.welcome_channel_id) !== null && _g !== void 0 ? _g : "";
        message.onboarding_banner = (_h = object.onboarding_banner) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseClanProfileUpdatedEvent() {
    return { user_id: "", clan_nick: "", clan_avatar: "", clan_id: "" };
}
exports.ClanProfileUpdatedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user_id !== "") {
            writer.uint32(10).string(message.user_id);
        }
        if (message.clan_nick !== "") {
            writer.uint32(18).string(message.clan_nick);
        }
        if (message.clan_avatar !== "") {
            writer.uint32(26).string(message.clan_avatar);
        }
        if (message.clan_id !== "") {
            writer.uint32(34).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClanProfileUpdatedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_nick = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_avatar = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            clan_nick: isSet(object.clan_nick) ? globalThis.String(object.clan_nick) : "",
            clan_avatar: isSet(object.clan_avatar) ? globalThis.String(object.clan_avatar) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.clan_nick !== "") {
            obj.clan_nick = message.clan_nick;
        }
        if (message.clan_avatar !== "") {
            obj.clan_avatar = message.clan_avatar;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.ClanProfileUpdatedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseClanProfileUpdatedEvent();
        message.user_id = (_a = object.user_id) !== null && _a !== void 0 ? _a : "";
        message.clan_nick = (_b = object.clan_nick) !== null && _b !== void 0 ? _b : "";
        message.clan_avatar = (_c = object.clan_avatar) !== null && _c !== void 0 ? _c : "";
        message.clan_id = (_d = object.clan_id) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseUserProfileUpdatedEvent() {
    return {
        user_id: "",
        display_name: "",
        avatar: "",
        about_me: "",
        channel_id: "",
        clan_id: "",
        encrypt_private_key: "",
    };
}
exports.UserProfileUpdatedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user_id !== "") {
            writer.uint32(10).string(message.user_id);
        }
        if (message.display_name !== "") {
            writer.uint32(18).string(message.display_name);
        }
        if (message.avatar !== "") {
            writer.uint32(26).string(message.avatar);
        }
        if (message.about_me !== "") {
            writer.uint32(34).string(message.about_me);
        }
        if (message.channel_id !== "") {
            writer.uint32(42).string(message.channel_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(50).string(message.clan_id);
        }
        if (message.encrypt_private_key !== "") {
            writer.uint32(58).string(message.encrypt_private_key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserProfileUpdatedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.display_name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.avatar = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.about_me = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.encrypt_private_key = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            display_name: isSet(object.display_name) ? globalThis.String(object.display_name) : "",
            avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
            about_me: isSet(object.about_me) ? globalThis.String(object.about_me) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            encrypt_private_key: isSet(object.encrypt_private_key) ? globalThis.String(object.encrypt_private_key) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.display_name !== "") {
            obj.display_name = message.display_name;
        }
        if (message.avatar !== "") {
            obj.avatar = message.avatar;
        }
        if (message.about_me !== "") {
            obj.about_me = message.about_me;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.encrypt_private_key !== "") {
            obj.encrypt_private_key = message.encrypt_private_key;
        }
        return obj;
    },
    create(base) {
        return exports.UserProfileUpdatedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseUserProfileUpdatedEvent();
        message.user_id = (_a = object.user_id) !== null && _a !== void 0 ? _a : "";
        message.display_name = (_b = object.display_name) !== null && _b !== void 0 ? _b : "";
        message.avatar = (_c = object.avatar) !== null && _c !== void 0 ? _c : "";
        message.about_me = (_d = object.about_me) !== null && _d !== void 0 ? _d : "";
        message.channel_id = (_e = object.channel_id) !== null && _e !== void 0 ? _e : "";
        message.clan_id = (_f = object.clan_id) !== null && _f !== void 0 ? _f : "";
        message.encrypt_private_key = (_g = object.encrypt_private_key) !== null && _g !== void 0 ? _g : "";
        return message;
    },
};
function createBaseUserProfileRedis() {
    return {
        user_id: "",
        username: "",
        avatar: "",
        display_name: "",
        about_me: "",
        custom_status: "",
        create_time_second: 0,
        fcm_tokens: [],
        online: false,
        metadata: "",
        is_disabled: false,
        joined_clans: [],
        pubkey: "",
        mezon_id: "",
        app_token: "",
        app_url: "",
        is_bot: false,
        voip_token: "",
    };
}
exports.UserProfileRedis = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user_id !== "") {
            writer.uint32(10).string(message.user_id);
        }
        if (message.username !== "") {
            writer.uint32(18).string(message.username);
        }
        if (message.avatar !== "") {
            writer.uint32(26).string(message.avatar);
        }
        if (message.display_name !== "") {
            writer.uint32(34).string(message.display_name);
        }
        if (message.about_me !== "") {
            writer.uint32(42).string(message.about_me);
        }
        if (message.custom_status !== "") {
            writer.uint32(50).string(message.custom_status);
        }
        if (message.create_time_second !== 0) {
            writer.uint32(56).uint32(message.create_time_second);
        }
        for (const v of message.fcm_tokens) {
            exports.FCMTokens.encode(v, writer.uint32(66).fork()).ldelim();
        }
        if (message.online !== false) {
            writer.uint32(72).bool(message.online);
        }
        if (message.metadata !== "") {
            writer.uint32(82).string(message.metadata);
        }
        if (message.is_disabled !== false) {
            writer.uint32(88).bool(message.is_disabled);
        }
        for (const v of message.joined_clans) {
            writer.uint32(98).string(v);
        }
        if (message.pubkey !== "") {
            writer.uint32(106).string(message.pubkey);
        }
        if (message.mezon_id !== "") {
            writer.uint32(114).string(message.mezon_id);
        }
        if (message.app_token !== "") {
            writer.uint32(122).string(message.app_token);
        }
        if (message.app_url !== "") {
            writer.uint32(130).string(message.app_url);
        }
        if (message.is_bot !== false) {
            writer.uint32(136).bool(message.is_bot);
        }
        if (message.voip_token !== "") {
            writer.uint32(146).string(message.voip_token);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserProfileRedis();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.avatar = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.display_name = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.about_me = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.custom_status = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.create_time_second = reader.uint32();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.fcm_tokens.push(exports.FCMTokens.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.online = reader.bool();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.metadata = reader.string();
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.is_disabled = reader.bool();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.joined_clans.push(reader.string());
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.pubkey = reader.string();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.mezon_id = reader.string();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.app_token = reader.string();
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.app_url = reader.string();
                    continue;
                case 17:
                    if (tag !== 136) {
                        break;
                    }
                    message.is_bot = reader.bool();
                    continue;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    message.voip_token = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : "",
            display_name: isSet(object.display_name) ? globalThis.String(object.display_name) : "",
            about_me: isSet(object.about_me) ? globalThis.String(object.about_me) : "",
            custom_status: isSet(object.custom_status) ? globalThis.String(object.custom_status) : "",
            create_time_second: isSet(object.create_time_second) ? globalThis.Number(object.create_time_second) : 0,
            fcm_tokens: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.fcm_tokens)
                ? object.fcm_tokens.map((e) => exports.FCMTokens.fromJSON(e))
                : [],
            online: isSet(object.online) ? globalThis.Boolean(object.online) : false,
            metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
            is_disabled: isSet(object.is_disabled) ? globalThis.Boolean(object.is_disabled) : false,
            joined_clans: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.joined_clans)
                ? object.joined_clans.map((e) => globalThis.String(e))
                : [],
            pubkey: isSet(object.pubkey) ? globalThis.String(object.pubkey) : "",
            mezon_id: isSet(object.mezon_id) ? globalThis.String(object.mezon_id) : "",
            app_token: isSet(object.app_token) ? globalThis.String(object.app_token) : "",
            app_url: isSet(object.app_url) ? globalThis.String(object.app_url) : "",
            is_bot: isSet(object.is_bot) ? globalThis.Boolean(object.is_bot) : false,
            voip_token: isSet(object.voip_token) ? globalThis.String(object.voip_token) : "",
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.avatar !== "") {
            obj.avatar = message.avatar;
        }
        if (message.display_name !== "") {
            obj.display_name = message.display_name;
        }
        if (message.about_me !== "") {
            obj.about_me = message.about_me;
        }
        if (message.custom_status !== "") {
            obj.custom_status = message.custom_status;
        }
        if (message.create_time_second !== 0) {
            obj.create_time_second = Math.round(message.create_time_second);
        }
        if ((_a = message.fcm_tokens) === null || _a === void 0 ? void 0 : _a.length) {
            obj.fcm_tokens = message.fcm_tokens.map((e) => exports.FCMTokens.toJSON(e));
        }
        if (message.online !== false) {
            obj.online = message.online;
        }
        if (message.metadata !== "") {
            obj.metadata = message.metadata;
        }
        if (message.is_disabled !== false) {
            obj.is_disabled = message.is_disabled;
        }
        if ((_b = message.joined_clans) === null || _b === void 0 ? void 0 : _b.length) {
            obj.joined_clans = message.joined_clans;
        }
        if (message.pubkey !== "") {
            obj.pubkey = message.pubkey;
        }
        if (message.mezon_id !== "") {
            obj.mezon_id = message.mezon_id;
        }
        if (message.app_token !== "") {
            obj.app_token = message.app_token;
        }
        if (message.app_url !== "") {
            obj.app_url = message.app_url;
        }
        if (message.is_bot !== false) {
            obj.is_bot = message.is_bot;
        }
        if (message.voip_token !== "") {
            obj.voip_token = message.voip_token;
        }
        return obj;
    },
    create(base) {
        return exports.UserProfileRedis.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        const message = createBaseUserProfileRedis();
        message.user_id = (_a = object.user_id) !== null && _a !== void 0 ? _a : "";
        message.username = (_b = object.username) !== null && _b !== void 0 ? _b : "";
        message.avatar = (_c = object.avatar) !== null && _c !== void 0 ? _c : "";
        message.display_name = (_d = object.display_name) !== null && _d !== void 0 ? _d : "";
        message.about_me = (_e = object.about_me) !== null && _e !== void 0 ? _e : "";
        message.custom_status = (_f = object.custom_status) !== null && _f !== void 0 ? _f : "";
        message.create_time_second = (_g = object.create_time_second) !== null && _g !== void 0 ? _g : 0;
        message.fcm_tokens = ((_h = object.fcm_tokens) === null || _h === void 0 ? void 0 : _h.map((e) => exports.FCMTokens.fromPartial(e))) || [];
        message.online = (_j = object.online) !== null && _j !== void 0 ? _j : false;
        message.metadata = (_k = object.metadata) !== null && _k !== void 0 ? _k : "";
        message.is_disabled = (_l = object.is_disabled) !== null && _l !== void 0 ? _l : false;
        message.joined_clans = ((_m = object.joined_clans) === null || _m === void 0 ? void 0 : _m.map((e) => e)) || [];
        message.pubkey = (_o = object.pubkey) !== null && _o !== void 0 ? _o : "";
        message.mezon_id = (_p = object.mezon_id) !== null && _p !== void 0 ? _p : "";
        message.app_token = (_q = object.app_token) !== null && _q !== void 0 ? _q : "";
        message.app_url = (_r = object.app_url) !== null && _r !== void 0 ? _r : "";
        message.is_bot = (_s = object.is_bot) !== null && _s !== void 0 ? _s : false;
        message.voip_token = (_t = object.voip_token) !== null && _t !== void 0 ? _t : "";
        return message;
    },
};
function createBaseFCMTokens() {
    return { device_id: "", token_id: "", platform: "" };
}
exports.FCMTokens = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.device_id !== "") {
            writer.uint32(10).string(message.device_id);
        }
        if (message.token_id !== "") {
            writer.uint32(18).string(message.token_id);
        }
        if (message.platform !== "") {
            writer.uint32(26).string(message.platform);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFCMTokens();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.device_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.token_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.platform = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            device_id: isSet(object.device_id) ? globalThis.String(object.device_id) : "",
            token_id: isSet(object.token_id) ? globalThis.String(object.token_id) : "",
            platform: isSet(object.platform) ? globalThis.String(object.platform) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.device_id !== "") {
            obj.device_id = message.device_id;
        }
        if (message.token_id !== "") {
            obj.token_id = message.token_id;
        }
        if (message.platform !== "") {
            obj.platform = message.platform;
        }
        return obj;
    },
    create(base) {
        return exports.FCMTokens.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseFCMTokens();
        message.device_id = (_a = object.device_id) !== null && _a !== void 0 ? _a : "";
        message.token_id = (_b = object.token_id) !== null && _b !== void 0 ? _b : "";
        message.platform = (_c = object.platform) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseCheckNameExistedEvent() {
    return { name: "", condition_id: "", exist: false, type: 0 };
}
exports.CheckNameExistedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.condition_id !== "") {
            writer.uint32(18).string(message.condition_id);
        }
        if (message.exist !== false) {
            writer.uint32(24).bool(message.exist);
        }
        if (message.type !== 0) {
            writer.uint32(32).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckNameExistedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.condition_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.exist = reader.bool();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            condition_id: isSet(object.condition_id) ? globalThis.String(object.condition_id) : "",
            exist: isSet(object.exist) ? globalThis.Boolean(object.exist) : false,
            type: isSet(object.type) ? globalThis.Number(object.type) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.condition_id !== "") {
            obj.condition_id = message.condition_id;
        }
        if (message.exist !== false) {
            obj.exist = message.exist;
        }
        if (message.type !== 0) {
            obj.type = Math.round(message.type);
        }
        return obj;
    },
    create(base) {
        return exports.CheckNameExistedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseCheckNameExistedEvent();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.condition_id = (_b = object.condition_id) !== null && _b !== void 0 ? _b : "";
        message.exist = (_c = object.exist) !== null && _c !== void 0 ? _c : false;
        message.type = (_d = object.type) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBaseNotificationChannelCategorySetting() {
    return { id: "", channel_category_label: "", notification_setting_type: 0, channel_category_title: "", action: 0 };
}
exports.NotificationChannelCategorySetting = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.channel_category_label !== "") {
            writer.uint32(18).string(message.channel_category_label);
        }
        if (message.notification_setting_type !== 0) {
            writer.uint32(24).int32(message.notification_setting_type);
        }
        if (message.channel_category_title !== "") {
            writer.uint32(34).string(message.channel_category_title);
        }
        if (message.action !== 0) {
            writer.uint32(40).int32(message.action);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNotificationChannelCategorySetting();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_category_label = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.notification_setting_type = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.channel_category_title = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.action = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            channel_category_label: isSet(object.channel_category_label)
                ? globalThis.String(object.channel_category_label)
                : "",
            notification_setting_type: isSet(object.notification_setting_type)
                ? globalThis.Number(object.notification_setting_type)
                : 0,
            channel_category_title: isSet(object.channel_category_title)
                ? globalThis.String(object.channel_category_title)
                : "",
            action: isSet(object.action) ? globalThis.Number(object.action) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.channel_category_label !== "") {
            obj.channel_category_label = message.channel_category_label;
        }
        if (message.notification_setting_type !== 0) {
            obj.notification_setting_type = Math.round(message.notification_setting_type);
        }
        if (message.channel_category_title !== "") {
            obj.channel_category_title = message.channel_category_title;
        }
        if (message.action !== 0) {
            obj.action = Math.round(message.action);
        }
        return obj;
    },
    create(base) {
        return exports.NotificationChannelCategorySetting.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseNotificationChannelCategorySetting();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.channel_category_label = (_b = object.channel_category_label) !== null && _b !== void 0 ? _b : "";
        message.notification_setting_type = (_c = object.notification_setting_type) !== null && _c !== void 0 ? _c : 0;
        message.channel_category_title = (_d = object.channel_category_title) !== null && _d !== void 0 ? _d : "";
        message.action = (_e = object.action) !== null && _e !== void 0 ? _e : 0;
        return message;
    },
};
function createBaseEventEmoji() {
    return {
        id: "",
        clan_id: "",
        short_name: "",
        source: "",
        category: "",
        action: 0,
        user_id: "",
        logo: "",
        clan_name: "",
    };
}
exports.EventEmoji = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        if (message.short_name !== "") {
            writer.uint32(26).string(message.short_name);
        }
        if (message.source !== "") {
            writer.uint32(34).string(message.source);
        }
        if (message.category !== "") {
            writer.uint32(42).string(message.category);
        }
        if (message.action !== 0) {
            writer.uint32(48).int32(message.action);
        }
        if (message.user_id !== "") {
            writer.uint32(58).string(message.user_id);
        }
        if (message.logo !== "") {
            writer.uint32(66).string(message.logo);
        }
        if (message.clan_name !== "") {
            writer.uint32(74).string(message.clan_name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventEmoji();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.short_name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.source = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.category = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.action = reader.int32();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.logo = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.clan_name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            short_name: isSet(object.short_name) ? globalThis.String(object.short_name) : "",
            source: isSet(object.source) ? globalThis.String(object.source) : "",
            category: isSet(object.category) ? globalThis.String(object.category) : "",
            action: isSet(object.action) ? globalThis.Number(object.action) : 0,
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            logo: isSet(object.logo) ? globalThis.String(object.logo) : "",
            clan_name: isSet(object.clan_name) ? globalThis.String(object.clan_name) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.short_name !== "") {
            obj.short_name = message.short_name;
        }
        if (message.source !== "") {
            obj.source = message.source;
        }
        if (message.category !== "") {
            obj.category = message.category;
        }
        if (message.action !== 0) {
            obj.action = Math.round(message.action);
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.logo !== "") {
            obj.logo = message.logo;
        }
        if (message.clan_name !== "") {
            obj.clan_name = message.clan_name;
        }
        return obj;
    },
    create(base) {
        return exports.EventEmoji.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseEventEmoji();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        message.short_name = (_c = object.short_name) !== null && _c !== void 0 ? _c : "";
        message.source = (_d = object.source) !== null && _d !== void 0 ? _d : "";
        message.category = (_e = object.category) !== null && _e !== void 0 ? _e : "";
        message.action = (_f = object.action) !== null && _f !== void 0 ? _f : 0;
        message.user_id = (_g = object.user_id) !== null && _g !== void 0 ? _g : "";
        message.logo = (_h = object.logo) !== null && _h !== void 0 ? _h : "";
        message.clan_name = (_j = object.clan_name) !== null && _j !== void 0 ? _j : "";
        return message;
    },
};
function createBasePermissionSetEvent() {
    return { caller: "", role_id: "", user_id: "", channel_id: "", permission_updates: [] };
}
exports.PermissionSetEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.caller !== "") {
            writer.uint32(10).string(message.caller);
        }
        if (message.role_id !== "") {
            writer.uint32(18).string(message.role_id);
        }
        if (message.user_id !== "") {
            writer.uint32(26).string(message.user_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(34).string(message.channel_id);
        }
        for (const v of message.permission_updates) {
            api_1.PermissionUpdate.encode(v, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePermissionSetEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.caller = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.role_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.permission_updates.push(api_1.PermissionUpdate.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            caller: isSet(object.caller) ? globalThis.String(object.caller) : "",
            role_id: isSet(object.role_id) ? globalThis.String(object.role_id) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            permission_updates: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.permission_updates)
                ? object.permission_updates.map((e) => api_1.PermissionUpdate.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.caller !== "") {
            obj.caller = message.caller;
        }
        if (message.role_id !== "") {
            obj.role_id = message.role_id;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if ((_a = message.permission_updates) === null || _a === void 0 ? void 0 : _a.length) {
            obj.permission_updates = message.permission_updates.map((e) => api_1.PermissionUpdate.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.PermissionSetEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBasePermissionSetEvent();
        message.caller = (_a = object.caller) !== null && _a !== void 0 ? _a : "";
        message.role_id = (_b = object.role_id) !== null && _b !== void 0 ? _b : "";
        message.user_id = (_c = object.user_id) !== null && _c !== void 0 ? _c : "";
        message.channel_id = (_d = object.channel_id) !== null && _d !== void 0 ? _d : "";
        message.permission_updates = ((_e = object.permission_updates) === null || _e === void 0 ? void 0 : _e.map((e) => api_1.PermissionUpdate.fromPartial(e))) || [];
        return message;
    },
};
function createBasePermissionChangedEvent() {
    return { user_id: "", channel_id: "", add_permissions: [], remove_permissions: [], default_permissions: [] };
}
exports.PermissionChangedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user_id !== "") {
            writer.uint32(10).string(message.user_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        for (const v of message.add_permissions) {
            api_1.PermissionUpdate.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.remove_permissions) {
            api_1.PermissionUpdate.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.default_permissions) {
            api_1.PermissionUpdate.encode(v, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePermissionChangedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.add_permissions.push(api_1.PermissionUpdate.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.remove_permissions.push(api_1.PermissionUpdate.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.default_permissions.push(api_1.PermissionUpdate.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            add_permissions: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.add_permissions)
                ? object.add_permissions.map((e) => api_1.PermissionUpdate.fromJSON(e))
                : [],
            remove_permissions: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.remove_permissions)
                ? object.remove_permissions.map((e) => api_1.PermissionUpdate.fromJSON(e))
                : [],
            default_permissions: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.default_permissions)
                ? object.default_permissions.map((e) => api_1.PermissionUpdate.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c;
        const obj = {};
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if ((_a = message.add_permissions) === null || _a === void 0 ? void 0 : _a.length) {
            obj.add_permissions = message.add_permissions.map((e) => api_1.PermissionUpdate.toJSON(e));
        }
        if ((_b = message.remove_permissions) === null || _b === void 0 ? void 0 : _b.length) {
            obj.remove_permissions = message.remove_permissions.map((e) => api_1.PermissionUpdate.toJSON(e));
        }
        if ((_c = message.default_permissions) === null || _c === void 0 ? void 0 : _c.length) {
            obj.default_permissions = message.default_permissions.map((e) => api_1.PermissionUpdate.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.PermissionChangedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBasePermissionChangedEvent();
        message.user_id = (_a = object.user_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.add_permissions = ((_c = object.add_permissions) === null || _c === void 0 ? void 0 : _c.map((e) => api_1.PermissionUpdate.fromPartial(e))) || [];
        message.remove_permissions = ((_d = object.remove_permissions) === null || _d === void 0 ? void 0 : _d.map((e) => api_1.PermissionUpdate.fromPartial(e))) || [];
        message.default_permissions = ((_e = object.default_permissions) === null || _e === void 0 ? void 0 : _e.map((e) => api_1.PermissionUpdate.fromPartial(e))) || [];
        return message;
    },
};
function createBaseMessageButtonClicked() {
    return { message_id: "", channel_id: "", button_id: "", sender_id: "", user_id: "", extra_data: "" };
}
exports.MessageButtonClicked = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.message_id !== "") {
            writer.uint32(10).string(message.message_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.button_id !== "") {
            writer.uint32(26).string(message.button_id);
        }
        if (message.sender_id !== "") {
            writer.uint32(34).string(message.sender_id);
        }
        if (message.user_id !== "") {
            writer.uint32(42).string(message.user_id);
        }
        if (message.extra_data !== "") {
            writer.uint32(50).string(message.extra_data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessageButtonClicked();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.button_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.sender_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.extra_data = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            button_id: isSet(object.button_id) ? globalThis.String(object.button_id) : "",
            sender_id: isSet(object.sender_id) ? globalThis.String(object.sender_id) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            extra_data: isSet(object.extra_data) ? globalThis.String(object.extra_data) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.message_id !== "") {
            obj.message_id = message.message_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.button_id !== "") {
            obj.button_id = message.button_id;
        }
        if (message.sender_id !== "") {
            obj.sender_id = message.sender_id;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.extra_data !== "") {
            obj.extra_data = message.extra_data;
        }
        return obj;
    },
    create(base) {
        return exports.MessageButtonClicked.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseMessageButtonClicked();
        message.message_id = (_a = object.message_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.button_id = (_c = object.button_id) !== null && _c !== void 0 ? _c : "";
        message.sender_id = (_d = object.sender_id) !== null && _d !== void 0 ? _d : "";
        message.user_id = (_e = object.user_id) !== null && _e !== void 0 ? _e : "";
        message.extra_data = (_f = object.extra_data) !== null && _f !== void 0 ? _f : "";
        return message;
    },
};
function createBaseUnmuteEvent() {
    return { channel_id: "", category_id: "", clan_id: "" };
}
exports.UnmuteEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channel_id !== "") {
            writer.uint32(10).string(message.channel_id);
        }
        if (message.category_id !== "") {
            writer.uint32(18).string(message.category_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(26).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnmuteEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.category_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            category_id: isSet(object.category_id) ? globalThis.String(object.category_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.category_id !== "") {
            obj.category_id = message.category_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.UnmuteEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseUnmuteEvent();
        message.channel_id = (_a = object.channel_id) !== null && _a !== void 0 ? _a : "";
        message.category_id = (_b = object.category_id) !== null && _b !== void 0 ? _b : "";
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseListActivity() {
    return { acts: [] };
}
exports.ListActivity = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.acts) {
            api_1.UserActivity.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListActivity();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.acts.push(api_1.UserActivity.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            acts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.acts) ? object.acts.map((e) => api_1.UserActivity.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.acts) === null || _a === void 0 ? void 0 : _a.length) {
            obj.acts = message.acts.map((e) => api_1.UserActivity.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListActivity.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListActivity();
        message.acts = ((_a = object.acts) === null || _a === void 0 ? void 0 : _a.map((e) => api_1.UserActivity.fromPartial(e))) || [];
        return message;
    },
};
function createBaseDropdownBoxSelected() {
    return { message_id: "", channel_id: "", selectbox_id: "", sender_id: "", user_id: "", values: [] };
}
exports.DropdownBoxSelected = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.message_id !== "") {
            writer.uint32(10).string(message.message_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.selectbox_id !== "") {
            writer.uint32(26).string(message.selectbox_id);
        }
        if (message.sender_id !== "") {
            writer.uint32(34).string(message.sender_id);
        }
        if (message.user_id !== "") {
            writer.uint32(42).string(message.user_id);
        }
        for (const v of message.values) {
            writer.uint32(50).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDropdownBoxSelected();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.selectbox_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.sender_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.values.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            selectbox_id: isSet(object.selectbox_id) ? globalThis.String(object.selectbox_id) : "",
            sender_id: isSet(object.sender_id) ? globalThis.String(object.sender_id) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            values: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.values) ? object.values.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.message_id !== "") {
            obj.message_id = message.message_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.selectbox_id !== "") {
            obj.selectbox_id = message.selectbox_id;
        }
        if (message.sender_id !== "") {
            obj.sender_id = message.sender_id;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if ((_a = message.values) === null || _a === void 0 ? void 0 : _a.length) {
            obj.values = message.values;
        }
        return obj;
    },
    create(base) {
        return exports.DropdownBoxSelected.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseDropdownBoxSelected();
        message.message_id = (_a = object.message_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.selectbox_id = (_c = object.selectbox_id) !== null && _c !== void 0 ? _c : "";
        message.sender_id = (_d = object.sender_id) !== null && _d !== void 0 ? _d : "";
        message.user_id = (_e = object.user_id) !== null && _e !== void 0 ? _e : "";
        message.values = ((_f = object.values) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        return message;
    },
};
function createBaseSdTopicEvent() {
    return {
        id: "",
        clan_id: "",
        channel_id: "",
        message_id: "",
        user_id: "",
        last_sent_message: undefined,
        message: undefined,
    };
}
exports.SdTopicEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.clan_id !== "") {
            writer.uint32(18).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(26).string(message.channel_id);
        }
        if (message.message_id !== "") {
            writer.uint32(34).string(message.message_id);
        }
        if (message.user_id !== "") {
            writer.uint32(42).string(message.user_id);
        }
        if (message.last_sent_message !== undefined) {
            api_1.ChannelMessageHeader.encode(message.last_sent_message, writer.uint32(50).fork()).ldelim();
        }
        if (message.message !== undefined) {
            api_1.ChannelMessage.encode(message.message, writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSdTopicEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.last_sent_message = api_1.ChannelMessageHeader.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.message = api_1.ChannelMessage.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            last_sent_message: isSet(object.last_sent_message)
                ? api_1.ChannelMessageHeader.fromJSON(object.last_sent_message)
                : undefined,
            message: isSet(object.message) ? api_1.ChannelMessage.fromJSON(object.message) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.message_id !== "") {
            obj.message_id = message.message_id;
        }
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.last_sent_message !== undefined) {
            obj.last_sent_message = api_1.ChannelMessageHeader.toJSON(message.last_sent_message);
        }
        if (message.message !== undefined) {
            obj.message = api_1.ChannelMessage.toJSON(message.message);
        }
        return obj;
    },
    create(base) {
        return exports.SdTopicEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseSdTopicEvent();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.clan_id = (_b = object.clan_id) !== null && _b !== void 0 ? _b : "";
        message.channel_id = (_c = object.channel_id) !== null && _c !== void 0 ? _c : "";
        message.message_id = (_d = object.message_id) !== null && _d !== void 0 ? _d : "";
        message.user_id = (_e = object.user_id) !== null && _e !== void 0 ? _e : "";
        message.last_sent_message = (object.last_sent_message !== undefined && object.last_sent_message !== null)
            ? api_1.ChannelMessageHeader.fromPartial(object.last_sent_message)
            : undefined;
        message.message = (object.message !== undefined && object.message !== null)
            ? api_1.ChannelMessage.fromPartial(object.message)
            : undefined;
        return message;
    },
};
function createBaseChannelAppEvent() {
    return { user_id: "", username: "", clan_id: "", channel_id: "", action: 0 };
}
exports.ChannelAppEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user_id !== "") {
            writer.uint32(10).string(message.user_id);
        }
        if (message.username !== "") {
            writer.uint32(18).string(message.username);
        }
        if (message.clan_id !== "") {
            writer.uint32(26).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(34).string(message.channel_id);
        }
        if (message.action !== 0) {
            writer.uint32(40).int32(message.action);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChannelAppEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.action = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            action: isSet(object.action) ? globalThis.Number(object.action) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.action !== 0) {
            obj.action = Math.round(message.action);
        }
        return obj;
    },
    create(base) {
        return exports.ChannelAppEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseChannelAppEvent();
        message.user_id = (_a = object.user_id) !== null && _a !== void 0 ? _a : "";
        message.username = (_b = object.username) !== null && _b !== void 0 ? _b : "";
        message.clan_id = (_c = object.clan_id) !== null && _c !== void 0 ? _c : "";
        message.channel_id = (_d = object.channel_id) !== null && _d !== void 0 ? _d : "";
        message.action = (_e = object.action) !== null && _e !== void 0 ? _e : 0;
        return message;
    },
};
function createBaseUserStatusEvent() {
    return { user_id: "", custom_status: "" };
}
exports.UserStatusEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user_id !== "") {
            writer.uint32(10).string(message.user_id);
        }
        if (message.custom_status !== "") {
            writer.uint32(18).string(message.custom_status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserStatusEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.custom_status = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            custom_status: isSet(object.custom_status) ? globalThis.String(object.custom_status) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.custom_status !== "") {
            obj.custom_status = message.custom_status;
        }
        return obj;
    },
    create(base) {
        return exports.UserStatusEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUserStatusEvent();
        message.user_id = (_a = object.user_id) !== null && _a !== void 0 ? _a : "";
        message.custom_status = (_b = object.custom_status) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseJoinChannelAppData() {
    return { user_id: "", username: "", hash: "" };
}
exports.JoinChannelAppData = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user_id !== "") {
            writer.uint32(10).string(message.user_id);
        }
        if (message.username !== "") {
            writer.uint32(18).string(message.username);
        }
        if (message.hash !== "") {
            writer.uint32(26).string(message.hash);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseJoinChannelAppData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "",
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.hash !== "") {
            obj.hash = message.hash;
        }
        return obj;
    },
    create(base) {
        return exports.JoinChannelAppData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseJoinChannelAppData();
        message.user_id = (_a = object.user_id) !== null && _a !== void 0 ? _a : "";
        message.username = (_b = object.username) !== null && _b !== void 0 ? _b : "";
        message.hash = (_c = object.hash) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseUnpinMessageEvent() {
    return { id: "", message_id: "", channel_id: "", clan_id: "" };
}
exports.UnpinMessageEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.message_id !== "") {
            writer.uint32(18).string(message.message_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(26).string(message.channel_id);
        }
        if (message.clan_id !== "") {
            writer.uint32(34).string(message.clan_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnpinMessageEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            message_id: isSet(object.message_id) ? globalThis.String(object.message_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.message_id !== "") {
            obj.message_id = message.message_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        return obj;
    },
    create(base) {
        return exports.UnpinMessageEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseUnpinMessageEvent();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.message_id = (_b = object.message_id) !== null && _b !== void 0 ? _b : "";
        message.channel_id = (_c = object.channel_id) !== null && _c !== void 0 ? _c : "";
        message.clan_id = (_d = object.clan_id) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseHandleParticipantMeetStateEvent() {
    return { clan_id: "", channel_id: "", display_name: "", state: 0 };
}
exports.HandleParticipantMeetStateEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.clan_id !== "") {
            writer.uint32(10).string(message.clan_id);
        }
        if (message.channel_id !== "") {
            writer.uint32(18).string(message.channel_id);
        }
        if (message.display_name !== "") {
            writer.uint32(26).string(message.display_name);
        }
        if (message.state !== 0) {
            writer.uint32(32).int32(message.state);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHandleParticipantMeetStateEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clan_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.channel_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.display_name = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.state = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clan_id: isSet(object.clan_id) ? globalThis.String(object.clan_id) : "",
            channel_id: isSet(object.channel_id) ? globalThis.String(object.channel_id) : "",
            display_name: isSet(object.display_name) ? globalThis.String(object.display_name) : "",
            state: isSet(object.state) ? globalThis.Number(object.state) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clan_id !== "") {
            obj.clan_id = message.clan_id;
        }
        if (message.channel_id !== "") {
            obj.channel_id = message.channel_id;
        }
        if (message.display_name !== "") {
            obj.display_name = message.display_name;
        }
        if (message.state !== 0) {
            obj.state = Math.round(message.state);
        }
        return obj;
    },
    create(base) {
        return exports.HandleParticipantMeetStateEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseHandleParticipantMeetStateEvent();
        message.clan_id = (_a = object.clan_id) !== null && _a !== void 0 ? _a : "";
        message.channel_id = (_b = object.channel_id) !== null && _b !== void 0 ? _b : "";
        message.display_name = (_c = object.display_name) !== null && _c !== void 0 ? _c : "";
        message.state = (_d = object.state) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBaseDeleteAccountEvent() {
    return { user_id: "" };
}
exports.DeleteAccountEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user_id !== "") {
            writer.uint32(10).string(message.user_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteAccountEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { user_id: isSet(object.user_id) ? globalThis.String(object.user_id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.user_id !== "") {
            obj.user_id = message.user_id;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteAccountEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDeleteAccountEvent();
        message.user_id = (_a = object.user_id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=realtime.js.map