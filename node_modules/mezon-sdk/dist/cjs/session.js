"use strict";
/**
 * Copyright 2022 The Nakama Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Session = void 0;
const base64 = __importStar(require("js-base64"));
class Session {
    constructor(apiSession) {
        const { token, refresh_token, user_id } = apiSession;
        this.token = token;
        this.refresh_token = refresh_token;
        this.user_id = user_id;
        this.created_at = Math.floor(new Date().getTime() / 1000);
        this.update(token, refresh_token);
        this.api_url = apiSession.api_url;
    }
    isexpired(currenttime) {
        return (this.expires_at - currenttime) < 0;
    }
    isrefreshexpired(currenttime) {
        return (this.refresh_expires_at - currenttime) < 0;
    }
    update(token, refreshToken) {
        const tokenParts = token.split('.');
        if (tokenParts.length != 3) {
            throw 'jwt is not valid.';
        }
        const tokenDecoded = JSON.parse(base64.atob(tokenParts[1]));
        const tokenExpiresAt = Math.floor(parseInt(tokenDecoded['exp']));
        /** clients that have just updated to the refresh tokens */
        /** client release will not have a cached refresh token */
        if (refreshToken) {
            const refreshTokenParts = refreshToken.split('.');
            if (refreshTokenParts.length != 3) {
                throw 'refresh jwt is not valid.';
            }
            const refreshTokenDecoded = JSON.parse(base64.atob(refreshTokenParts[1]));
            const refreshTokenExpiresAt = Math.floor(parseInt(refreshTokenDecoded['exp']));
            this.refresh_expires_at = refreshTokenExpiresAt;
            this.refresh_token = refreshToken;
        }
        this.token = token;
        this.expires_at = tokenExpiresAt;
        // this.user_id = tokenDecoded['uid'];
        this.vars = tokenDecoded['vrs'];
    }
    static restore(session) {
        return new Session(session);
    }
}
exports.Session = Session;
//# sourceMappingURL=session.js.map