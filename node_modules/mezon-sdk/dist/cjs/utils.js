"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.b64DecodeUnicode = exports.b64EncodeUnicode = exports.buildFetchOptions = void 0;
const js_base64_1 = require("js-base64");
function buildFetchOptions(method, options, bodyJson) {
    const fetchOptions = Object.assign({ method: method }, options);
    fetchOptions.headers = Object.assign({}, options.headers);
    if (!Object.keys(fetchOptions.headers).includes("Accept")) {
        fetchOptions.headers["Accept"] = "application/json";
    }
    if (!Object.keys(fetchOptions.headers).includes("Content-Type")) {
        fetchOptions.headers["Content-Type"] = "application/json";
    }
    Object.keys(fetchOptions.headers).forEach((key) => {
        if (!fetchOptions.headers[key]) {
            delete fetchOptions.headers[key];
        }
    });
    if (bodyJson) {
        fetchOptions.body = bodyJson;
    }
    return fetchOptions;
}
exports.buildFetchOptions = buildFetchOptions;
function b64EncodeUnicode(str) {
    return (0, js_base64_1.encode)(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function toSolidBytes(_match, p1) {
        return String.fromCharCode(Number('0x' + p1));
    }));
}
exports.b64EncodeUnicode = b64EncodeUnicode;
function b64DecodeUnicode(str) {
    return decodeURIComponent((0, js_base64_1.decode)(str).split('').map(function (c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));
}
exports.b64DecodeUnicode = b64DecodeUnicode;
//# sourceMappingURL=utils.js.map