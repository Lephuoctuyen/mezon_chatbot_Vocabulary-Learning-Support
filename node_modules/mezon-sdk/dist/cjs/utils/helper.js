"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseUrlToHostAndSSL = exports.sleep = exports.isValidUserId = exports.convertChanneltypeToChannelMode = exports.convertInternalEventToEvents = void 0;
const constants_1 = require("../constants");
function convertInternalEventToEvents(input) {
    return input.replace(/_event/g, "").replace(/_/g, "");
}
exports.convertInternalEventToEvents = convertInternalEventToEvents;
function convertChanneltypeToChannelMode(channelType) {
    switch (Number(channelType)) {
        case constants_1.ChannelType.CHANNEL_TYPE_DM:
            return constants_1.ChannelStreamMode.STREAM_MODE_DM;
        case constants_1.ChannelType.CHANNEL_TYPE_GROUP:
            return constants_1.ChannelStreamMode.STREAM_MODE_GROUP;
        case constants_1.ChannelType.CHANNEL_TYPE_CHANNEL:
            return constants_1.ChannelStreamMode.STREAM_MODE_CHANNEL;
        case constants_1.ChannelType.CHANNEL_TYPE_THREAD:
            return constants_1.ChannelStreamMode.STREAM_MODE_THREAD;
    }
    return 0;
}
exports.convertChanneltypeToChannelMode = convertChanneltypeToChannelMode;
function isValidUserId(userId) {
    if (typeof userId === "string" || typeof userId === "number") {
        const strId = userId.toString();
        return /^\d+$/.test(strId);
    }
    return false;
}
exports.isValidUserId = isValidUserId;
function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
exports.sleep = sleep;
function parseUrlToHostAndSSL(urlStr) {
    const url = new URL(urlStr);
    return {
        host: url.hostname,
        port: url.port || (url.protocol === "https:" ? "443" : "80"),
        useSSL: url.protocol === "https:",
    };
}
exports.parseUrlToHostAndSSL = parseUrlToHostAndSSL;
//# sourceMappingURL=helper.js.map