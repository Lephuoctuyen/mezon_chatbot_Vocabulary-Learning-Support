"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stack = void 0;
class Stack {
    constructor(messageProcessPerTime = 1, interval = 1000, client, callback, isToUser = false) {
        this.messageProcessPerTime = messageProcessPerTime;
        this.interval = interval;
        this.client = client;
        this.callback = callback;
        this.isToUser = isToUser;
        this.items = [];
        this.intervalId = null;
        this.isProcessing = false;
    }
    push(element) {
        if (Array.isArray(element)) {
            this.items.push(...element);
        }
        else {
            this.items.push(element);
        }
        if (this.intervalId == null) {
            setInterval(() => this.processQueue().catch(console.log), this.interval);
        }
    }
    async processQueue() {
        if (this.isProcessing || this.items.length === 0) {
            clearInterval(this.intervalId);
            return;
        }
        this.isProcessing = true;
        try {
            for (let i = 0; i < this.messageProcessPerTime; i++) {
                const mess = this.items[0];
                let msgACK;
                if (!this.isToUser) {
                    msgACK = await this.client.sendMessage(mess.clan_id, mess.channel_id, mess.mode, mess.is_public, mess.msg, mess.mentions, mess.attachments, mess.ref);
                }
                else {
                    msgACK = await this.client.sendDMChannelMessage(mess.channelDmId, mess.msg, mess.messOptions ? mess.messOptions : {}, Array.isArray(mess.attachments) ? mess.attachments : [], Array.isArray(mess.refs) ? mess.refs : []);
                }
                await this.callback(msgACK);
                this.items.shift();
            }
        }
        catch (e) {
            this.isProcessing = false;
            return;
        }
        this.isProcessing = false;
    }
}
exports.Stack = Stack;
//# sourceMappingURL=stack.js.map