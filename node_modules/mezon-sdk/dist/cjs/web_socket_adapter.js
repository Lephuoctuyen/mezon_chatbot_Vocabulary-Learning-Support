"use strict";
/**
 * Copyright 2020 The Mezon Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketAdapterText = void 0;
const base64_arraybuffer_1 = require("base64-arraybuffer");
const js_base64_1 = require("js-base64");
const ws_1 = __importDefault(require("ws"));
/**
 * A text-based socket adapter that accepts and transmits payloads over UTF-8.
 */
class WebSocketAdapterText {
    get onClose() {
        return this._socket.onclose;
    }
    set onClose(value) {
        this._socket.onclose = value;
    }
    get onError() {
        return this._socket.onerror;
    }
    set onError(value) {
        this._socket.onerror = value;
    }
    get onMessage() {
        return this._socket.onmessage;
    }
    set onMessage(value) {
        if (value) {
            this._socket.onmessage = (evt) => {
                const message = JSON.parse(evt.data);
                if (message.party_data && message.party_data.data) {
                    message.party_data.data = new Uint8Array((0, base64_arraybuffer_1.decode)(message.party_data.data));
                }
                value(message);
            };
        }
        else {
            value = null;
        }
    }
    get onOpen() {
        return this._socket.onopen;
    }
    set onOpen(value) {
        this._socket.onopen = value;
    }
    isOpen() {
        var _a;
        return ((_a = this._socket) === null || _a === void 0 ? void 0 : _a.readyState) == ws_1.default.OPEN;
    }
    connect(scheme, host, port, createStatus, token) {
        const url = `${scheme}${host}:${port}/ws?lang=en&status=${encodeURIComponent(createStatus.toString())}&token=${encodeURIComponent(token)}`;
        this._socket = new ws_1.default(url);
    }
    close() {
        this._socket.close();
        this._socket = undefined;
    }
    send(msg) {
        if (msg.party_data_send) {
            // according to protobuf docs, int64 is encoded to JSON as string.
            msg.party_data_send.op_code = msg.party_data_send.op_code.toString();
            let payload = msg.party_data_send.data;
            if (payload && payload instanceof Uint8Array) {
                msg.party_data_send.data = (0, base64_arraybuffer_1.encode)(payload.buffer);
            }
            else if (payload) { // it's a string
                msg.party_data_send.data = (0, js_base64_1.btoa)(payload);
            }
        }
        this._socket.send(JSON.stringify(msg));
    }
}
exports.WebSocketAdapterText = WebSocketAdapterText;
//# sourceMappingURL=web_socket_adapter.js.map