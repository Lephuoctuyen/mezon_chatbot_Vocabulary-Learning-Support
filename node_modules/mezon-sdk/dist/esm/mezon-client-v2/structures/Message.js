import { convertChanneltypeToChannelMode } from "../../utils/helper";
export class Message {
    id;
    sender_id;
    content;
    mentions;
    attachments;
    reactions;
    references;
    topic_id;
    channel;
    socketManager;
    messageQueue;
    constructor(initMessageData, channel, socketManager, messageQueue) {
        this.id = initMessageData.id;
        this.sender_id = initMessageData.sender_id;
        this.content = initMessageData.content;
        this.references = initMessageData?.references;
        this.mentions = initMessageData?.mentions;
        this.attachments = initMessageData?.attachments;
        this.reactions = initMessageData?.reactions;
        this.references = initMessageData?.references;
        this.topic_id = initMessageData?.topic_id;
        this.channel = channel;
        this.socketManager = socketManager;
        this.messageQueue = messageQueue;
    }
    async reply(content) {
        return await this.messageQueue.enqueue(async () => {
            const user = await this.channel.clan.users.fetch(this.sender_id);
            const references = [
                {
                    message_ref_id: this.id,
                    message_sender_id: this.sender_id,
                    message_sender_username: user.clan_nick || user.display_name || user.username,
                    mesages_sender_avatar: user.clan_avatar || user.avartar,
                    content: JSON.stringify(this.content),
                },
            ];
            const dataReply = {
                clan_id: this.channel.clan.id,
                mode: convertChanneltypeToChannelMode(this.channel.channel_type),
                is_public: !this.channel.is_private,
                channel_id: this.channel.id,
                content,
                references,
            };
            return await this.socketManager.writeChatMessage(dataReply);
        });
    }
    async update(content) {
        return await this.messageQueue.enqueue(() => {
            const dataUpdate = {
                clan_id: this.channel.clan.id,
                channel_id: this.channel.id,
                mode: convertChanneltypeToChannelMode(this.channel.channel_type),
                is_public: !this.channel.is_private,
                message_id: this.id,
                content,
                topic_id: this.topic_id,
            };
            return this.socketManager.updateChatMessage(dataUpdate);
        });
    }
    async react(dataReactMessage) {
        return await this.messageQueue.enqueue(() => {
            const dataReact = {
                id: dataReactMessage?.id ?? "",
                clan_id: this.channel.clan.id,
                channel_id: this.channel.id,
                mode: convertChanneltypeToChannelMode(this.channel.channel_type),
                is_public: !this.channel.is_private,
                message_id: this.id,
                emoji_id: dataReactMessage.emoji_id,
                emoji: dataReactMessage.emoji,
                count: dataReactMessage.count,
                message_sender_id: this.sender_id,
                action_delete: dataReactMessage?.action_delete ?? false,
            };
            return this.socketManager.writeMessageReaction(dataReact);
        });
    }
    async delete() {
        return await this.messageQueue.enqueue(() => {
            const dataRemove = {
                clan_id: this.channel.clan.id,
                channel_id: this.channel.id,
                mode: convertChanneltypeToChannelMode(this.channel.channel_type),
                is_public: !this.channel.is_private,
                message_id: this.id,
            };
            return this.socketManager.removeChatMessage(dataRemove);
        });
    }
}
//# sourceMappingURL=Message.js.map