import { ChannelType } from "../constants/enum";
import { isValidUserId } from "../utils/helper";
export class ChannelManager {
    apiClient;
    socketManager;
    sessionManager;
    constructor(apiClient, socketManager, sessionManager) {
        this.apiClient = apiClient;
        this.socketManager = socketManager;
        this.sessionManager = sessionManager;
    }
    /** Create DM channel with user */
    async createDMchannel(userId) {
        try {
            if (!isValidUserId(userId))
                return null;
            const socket = this.socketManager.getSocket();
            const request = {
                clan_id: "",
                channel_id: "0",
                category_id: "0",
                type: ChannelType.CHANNEL_TYPE_DM,
                user_ids: [userId],
                channel_private: 1,
            };
            const channelDM = await this.apiClient.createChannelDesc(this.sessionManager.getSession().token, request);
            if (channelDM) {
                await this.sleep(100);
                await socket.joinChat(channelDM.clan_id, channelDM.channel_id, channelDM.type, false);
                return channelDM;
            }
            return null;
        }
        catch (e) {
            console.log(e);
            return null;
        }
    }
    /** List current user in channel voice */
    async listChannelVoiceUsers(clanId, channelId, channelType, limit = 500, state, cursor) {
        if (limit <= 0 || limit > 500) {
            console.log("0 < limit <= 500");
            throw new Error("0 < limit <= 500");
        }
        return this.apiClient
            .listChannelVoiceUsers(this.sessionManager.getSession().token, clanId, channelId, channelType, limit, state, cursor)
            .then((response) => {
            var result = {
                voice_channel_users: [],
            };
            if (response.voice_channel_users == null) {
                return Promise.resolve(result);
            }
            response.voice_channel_users.forEach((gu) => {
                result.voice_channel_users.push({
                    id: gu.id,
                    channel_id: gu.channel_id,
                    user_id: gu.user_id,
                    participant: gu.participant,
                });
            });
            return Promise.resolve(result);
        });
    }
    sleep(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
    }
}
//# sourceMappingURL=channel_manager.js.map