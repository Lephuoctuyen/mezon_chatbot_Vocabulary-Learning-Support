import { MezonApi } from "../../api";
import { ApiRoleListEventResponse, ApiVoiceChannelUserList, MezonUpdateRoleBody } from "../../interfaces";
import { MessageDatabase } from "../../sqlite/MessageDatabase";
import { MezonClient } from "../client/MezonClient";
import { SocketManager } from "../manager/socket_manager";
import { AsyncThrottleQueue } from "../utils/AsyncThrottleQueue";
import { CacheManager } from "../utils/CacheManager";
import { TextChannel } from "./TextChannel";
import { User } from "./User";
interface ClanInitData {
    id: string;
    name: string;
    welcome_channel_id: string;
}
export declare class Clan {
    id: string;
    name: string;
    welcome_channel_id: string;
    channels: CacheManager<string, TextChannel>;
    users: CacheManager<string, User>;
    sessionToken: string;
    apiClient: MezonApi;
    private _channelsLoaded;
    private _loadingPromise;
    private readonly client;
    private readonly socketManager;
    private readonly messageQueue;
    private readonly messageDB;
    constructor(initClanData: ClanInitData, client: MezonClient, apiClient: MezonApi, socketManager: SocketManager, sessionToken: string, messageQueue: AsyncThrottleQueue, messageDB: MessageDatabase);
    loadChannels(): Promise<void>;
    listChannelVoiceUsers(channel_id?: string, channel_type?: number, limit?: number, state?: number, cursor?: string): Promise<ApiVoiceChannelUserList>;
    updateRole(roleId: string, request: MezonUpdateRoleBody): Promise<boolean>;
    listRoles(limit?: string, state?: string, cursor?: string): Promise<ApiRoleListEventResponse>;
}
export {};
