import { ApiMessageAttachment, ApiMessageMention, ApiMessageReaction, ApiMessageRef, ChannelMessageContent, ReactMessagePayload } from "../../interfaces";
import { SocketManager } from "../manager/socket_manager";
import { AsyncThrottleQueue } from "../utils/AsyncThrottleQueue";
import { TextChannel } from "./TextChannel";
export interface MessageInitData {
    id: string;
    clan_id: string;
    channel_id: string;
    sender_id: string;
    content: ChannelMessageContent;
    mentions?: ApiMessageMention[];
    attachments?: ApiMessageAttachment[];
    reactions?: ApiMessageReaction[];
    references?: ApiMessageRef[];
    topic_id?: string;
    create_time_seconds?: number;
}
export declare class Message {
    id: string;
    sender_id: string;
    content: ChannelMessageContent;
    mentions: ApiMessageMention[] | undefined;
    attachments: ApiMessageAttachment[] | undefined;
    reactions: ApiMessageReaction[] | undefined;
    references: ApiMessageRef[] | undefined;
    topic_id: string | undefined;
    create_time_seconds: number | undefined;
    channel: TextChannel;
    private readonly socketManager;
    private readonly messageQueue;
    constructor(initMessageData: MessageInitData, channel: TextChannel, socketManager: SocketManager, messageQueue: AsyncThrottleQueue);
    reply(content: ChannelMessageContent, mentions?: Array<ApiMessageMention>, attachments?: Array<ApiMessageAttachment>, mention_everyone?: boolean, anonymous_message?: boolean, topic_id?: string, code?: number): Promise<import("../../interfaces").ChannelMessageAck>;
    update(content: ChannelMessageContent, topic_id?: string): Promise<import("../../interfaces").ChannelMessageAck>;
    react(dataReactMessage: ReactMessagePayload): Promise<ApiMessageReaction>;
    delete(): Promise<import("../../interfaces").ChannelMessageAck>;
}
