import { ChannelStreamMode } from "../../constants";
export class User {
    id;
    username;
    clan_nick;
    clan_avatar;
    display_name;
    avartar;
    dmChannelId;
    clan;
    channelManager;
    messageQueue;
    socketManager;
    constructor(initUserData, clan, messageQueue, socketManager, channelManager) {
        this.id = initUserData.id;
        this.avartar = initUserData.avartar ?? "";
        this.dmChannelId = initUserData?.dmChannelId ?? "";
        this.username = initUserData?.username ?? "";
        this.clan_nick = initUserData?.clan_nick ?? "";
        this.clan_avatar = initUserData?.clan_avatar ?? "";
        this.display_name = initUserData?.display_name ?? "";
        this.clan = clan;
        this.channelManager = channelManager;
        this.messageQueue = messageQueue;
        this.socketManager = socketManager;
    }
    async sendToken(sendTokenData) {
        const dataSendToken = {
            receiver_id: this.id,
            amount: sendTokenData.amount,
            note: sendTokenData?.note ?? "",
            extra_attribute: sendTokenData?.extra_attribute ?? "",
        };
        try {
            return this.clan.apiClient.sendToken(this.clan.sessionToken, dataSendToken);
        }
        catch (error) {
            console.log("Error sendToken");
        }
    }
    async sendDM(content, code) {
        return this.messageQueue.enqueue(async () => {
            if (!this.dmChannelId) {
                const dmChannel = await this.createDmChannel();
                this.dmChannelId = dmChannel?.channel_id ?? "";
            }
            if (!this.dmChannelId)
                throw Error(`Can not get dmChannelId for this user ${this.id}!`);
            const dataSendDm = {
                clan_id: "0",
                channel_id: this.dmChannelId,
                mode: ChannelStreamMode.STREAM_MODE_DM,
                is_public: false,
                content,
                code,
            };
            return await this.socketManager.writeChatMessage(dataSendDm);
        });
    }
    async createDmChannel() {
        try {
            const dmChannel = await this.channelManager?.createDMchannel(this.id);
            return dmChannel ?? {};
        }
        catch (error) {
            console.log("Error createDmChannel User");
            return null;
        }
    }
    async listTransactionDetail(transactionId) {
        const session = this.clan.sessionToken;
        return this.clan.apiClient.listTransactionDetail(session, transactionId);
    }
}
//# sourceMappingURL=User.js.map